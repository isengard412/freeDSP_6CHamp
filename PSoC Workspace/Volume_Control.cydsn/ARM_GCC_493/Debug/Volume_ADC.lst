ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"Volume_ADC.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	Volume_ADC_convDone
  19              		.bss
  20              		.type	Volume_ADC_convDone, %object
  21              		.size	Volume_ADC_convDone, 1
  22              	Volume_ADC_convDone:
  23 0000 00       		.space	1
  24              		.global	Volume_ADC_stopConversion
  25              		.type	Volume_ADC_stopConversion, %object
  26              		.size	Volume_ADC_stopConversion, 1
  27              	Volume_ADC_stopConversion:
  28 0001 00       		.space	1
  29              		.global	Volume_ADC_initVar
  30              		.type	Volume_ADC_initVar, %object
  31              		.size	Volume_ADC_initVar, 1
  32              	Volume_ADC_initVar:
  33 0002 00       		.space	1
  34              		.global	Volume_ADC_started
  35              		.type	Volume_ADC_started, %object
  36              		.size	Volume_ADC_started, 1
  37              	Volume_ADC_started:
  38 0003 00       		.space	1
  39              		.global	Volume_ADC_Config
  40              		.data
  41              		.type	Volume_ADC_Config, %object
  42              		.size	Volume_ADC_Config, 1
  43              	Volume_ADC_Config:
  44 0000 01       		.byte	1
  45              		.comm	Volume_ADC_Offset,4,4
  46              		.comm	Volume_ADC_CountsPerVolt,4,4
  47              		.bss
  48              		.align	2
  49              	Volume_ADC_gcor:
  50 0004 00000000 		.space	4
  51              		.section	.text.Volume_ADC_Init,"ax",%progbits
  52              		.align	2
  53              		.global	Volume_ADC_Init
  54              		.thumb
  55              		.thumb_func
  56              		.type	Volume_ADC_Init, %function
  57              	Volume_ADC_Init:
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 2


  58              	.LFB0:
  59              		.file 1 ".\\Generated_Source\\PSoC5\\Volume_ADC.c"
   1:.\Generated_Source\PSoC5/Volume_ADC.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/Volume_ADC.c **** * File Name: Volume_ADC.c
   3:.\Generated_Source\PSoC5/Volume_ADC.c **** * Version 3.20
   4:.\Generated_Source\PSoC5/Volume_ADC.c **** *
   5:.\Generated_Source\PSoC5/Volume_ADC.c **** * Description:
   6:.\Generated_Source\PSoC5/Volume_ADC.c **** *  This file provides the source code to the API for the Delta-Sigma ADC
   7:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Component.
   8:.\Generated_Source\PSoC5/Volume_ADC.c **** *
   9:.\Generated_Source\PSoC5/Volume_ADC.c **** * Note:
  10:.\Generated_Source\PSoC5/Volume_ADC.c **** *
  11:.\Generated_Source\PSoC5/Volume_ADC.c **** ********************************************************************************
  12:.\Generated_Source\PSoC5/Volume_ADC.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC5/Volume_ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC5/Volume_ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC5/Volume_ADC.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC5/Volume_ADC.c **** 
  18:.\Generated_Source\PSoC5/Volume_ADC.c **** #include "Volume_ADC.h"
  19:.\Generated_Source\PSoC5/Volume_ADC.c **** 
  20:.\Generated_Source\PSoC5/Volume_ADC.c **** #if(Volume_ADC_DEFAULT_INTERNAL_CLK)
  21:.\Generated_Source\PSoC5/Volume_ADC.c ****     #include "Volume_ADC_theACLK.h"
  22:.\Generated_Source\PSoC5/Volume_ADC.c **** #endif /* Volume_ADC_DEFAULT_INTERNAL_CLK */
  23:.\Generated_Source\PSoC5/Volume_ADC.c **** 
  24:.\Generated_Source\PSoC5/Volume_ADC.c **** #include "Volume_ADC_Ext_CP_Clk.h"
  25:.\Generated_Source\PSoC5/Volume_ADC.c **** 
  26:.\Generated_Source\PSoC5/Volume_ADC.c **** #if(Volume_ADC_DEFAULT_INPUT_MODE)
  27:.\Generated_Source\PSoC5/Volume_ADC.c ****     #include "Volume_ADC_AMux.h"
  28:.\Generated_Source\PSoC5/Volume_ADC.c **** #endif /* Volume_ADC_DEFAULT_INPUT_MODE */
  29:.\Generated_Source\PSoC5/Volume_ADC.c **** 
  30:.\Generated_Source\PSoC5/Volume_ADC.c **** 
  31:.\Generated_Source\PSoC5/Volume_ADC.c **** /***************************************
  32:.\Generated_Source\PSoC5/Volume_ADC.c **** * Global data allocation
  33:.\Generated_Source\PSoC5/Volume_ADC.c **** ***************************************/
  34:.\Generated_Source\PSoC5/Volume_ADC.c **** 
  35:.\Generated_Source\PSoC5/Volume_ADC.c **** /* Software flag for checking conversion completed or not */
  36:.\Generated_Source\PSoC5/Volume_ADC.c **** volatile uint8 Volume_ADC_convDone = 0u;
  37:.\Generated_Source\PSoC5/Volume_ADC.c **** 
  38:.\Generated_Source\PSoC5/Volume_ADC.c **** /* Software flag to stop conversion for single sample conversion mode
  39:.\Generated_Source\PSoC5/Volume_ADC.c **** *   with resolution above 16 bits 
  40:.\Generated_Source\PSoC5/Volume_ADC.c **** */
  41:.\Generated_Source\PSoC5/Volume_ADC.c **** volatile uint8 Volume_ADC_stopConversion = 0u;
  42:.\Generated_Source\PSoC5/Volume_ADC.c **** 
  43:.\Generated_Source\PSoC5/Volume_ADC.c **** /* To run the initialization block only at the start up */
  44:.\Generated_Source\PSoC5/Volume_ADC.c **** uint8 Volume_ADC_initVar = 0u;
  45:.\Generated_Source\PSoC5/Volume_ADC.c **** 
  46:.\Generated_Source\PSoC5/Volume_ADC.c **** /* To check whether ADC started or not before switching the configuration */
  47:.\Generated_Source\PSoC5/Volume_ADC.c **** volatile uint8 Volume_ADC_started = 0u;
  48:.\Generated_Source\PSoC5/Volume_ADC.c **** 
  49:.\Generated_Source\PSoC5/Volume_ADC.c **** /* Flag to hold ADC config number. By default active config is 1. */
  50:.\Generated_Source\PSoC5/Volume_ADC.c **** volatile uint8 Volume_ADC_Config = 1u;
  51:.\Generated_Source\PSoC5/Volume_ADC.c **** 
  52:.\Generated_Source\PSoC5/Volume_ADC.c **** volatile int32 Volume_ADC_Offset;
  53:.\Generated_Source\PSoC5/Volume_ADC.c **** volatile int32 Volume_ADC_CountsPerVolt;
  54:.\Generated_Source\PSoC5/Volume_ADC.c **** 
  55:.\Generated_Source\PSoC5/Volume_ADC.c **** 
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 3


  56:.\Generated_Source\PSoC5/Volume_ADC.c **** /***************************************
  57:.\Generated_Source\PSoC5/Volume_ADC.c **** * Local data allocation
  58:.\Generated_Source\PSoC5/Volume_ADC.c **** ***************************************/
  59:.\Generated_Source\PSoC5/Volume_ADC.c **** 
  60:.\Generated_Source\PSoC5/Volume_ADC.c **** /* The array with precalculated gain compensation coefficients */
  61:.\Generated_Source\PSoC5/Volume_ADC.c **** static Volume_ADC_GCOR_STRUCT Volume_ADC_gcor[Volume_ADC_DEFAULT_NUM_CONFIGS];
  62:.\Generated_Source\PSoC5/Volume_ADC.c **** 
  63:.\Generated_Source\PSoC5/Volume_ADC.c **** 
  64:.\Generated_Source\PSoC5/Volume_ADC.c **** 
  65:.\Generated_Source\PSoC5/Volume_ADC.c **** /***************************************
  66:.\Generated_Source\PSoC5/Volume_ADC.c **** * Forward function references
  67:.\Generated_Source\PSoC5/Volume_ADC.c **** ***************************************/
  68:.\Generated_Source\PSoC5/Volume_ADC.c **** static void Volume_ADC_InitConfig(uint8 config) ;
  69:.\Generated_Source\PSoC5/Volume_ADC.c **** static void Volume_ADC_GainCompensation(uint8 inputRange, uint16 idealDecGain, uint16 idealOddDecGa
  70:.\Generated_Source\PSoC5/Volume_ADC.c ****                             uint8 resolution, uint8 config) ;
  71:.\Generated_Source\PSoC5/Volume_ADC.c **** static void Volume_ADC_SetDSMRef0Reg(uint8 value) ;
  72:.\Generated_Source\PSoC5/Volume_ADC.c **** 
  73:.\Generated_Source\PSoC5/Volume_ADC.c **** 
  74:.\Generated_Source\PSoC5/Volume_ADC.c **** /******************************************************************************
  75:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_Init
  76:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************
  77:.\Generated_Source\PSoC5/Volume_ADC.c **** *
  78:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
  79:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  80:.\Generated_Source\PSoC5/Volume_ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  81:.\Generated_Source\PSoC5/Volume_ADC.c **** * Volume_ADC_Start().
  82:.\Generated_Source\PSoC5/Volume_ADC.c **** *
  83:.\Generated_Source\PSoC5/Volume_ADC.c **** *
  84:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
  85:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
  86:.\Generated_Source\PSoC5/Volume_ADC.c **** *
  87:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
  88:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
  89:.\Generated_Source\PSoC5/Volume_ADC.c **** *
  90:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
  91:.\Generated_Source\PSoC5/Volume_ADC.c **** void Volume_ADC_Init(void) 
  92:.\Generated_Source\PSoC5/Volume_ADC.c **** {
  60              		.loc 1 92 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 1, uses_anonymous_args = 0
  64 0000 80B5     		push	{r7, lr}
  65              		.cfi_def_cfa_offset 8
  66              		.cfi_offset 7, -8
  67              		.cfi_offset 14, -4
  68 0002 82B0     		sub	sp, sp, #8
  69              		.cfi_def_cfa_offset 16
  70 0004 02AF     		add	r7, sp, #8
  71              		.cfi_def_cfa 7, 8
  93:.\Generated_Source\PSoC5/Volume_ADC.c **** 
  94:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_Config = 1u;
  72              		.loc 1 94 0
  73 0006 324B     		ldr	r3, .L2
  74 0008 0122     		movs	r2, #1
  75 000a 1A70     		strb	r2, [r3]
  95:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_convDone = 0u;
  76              		.loc 1 95 0
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 4


  77 000c 314B     		ldr	r3, .L2+4
  78 000e 0022     		movs	r2, #0
  79 0010 1A70     		strb	r2, [r3]
  96:.\Generated_Source\PSoC5/Volume_ADC.c **** 
  97:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_Ext_CP_Clk_SetMode(CYCLK_DUTY);
  80              		.loc 1 97 0
  81 0012 1020     		movs	r0, #16
  82 0014 FFF7FEFF 		bl	Volume_ADC_Ext_CP_Clk_SetModeRegister
  98:.\Generated_Source\PSoC5/Volume_ADC.c **** 
  99:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* This is only valid if there is an internal clock */
 100:.\Generated_Source\PSoC5/Volume_ADC.c ****     #if(Volume_ADC_DEFAULT_INTERNAL_CLK)
 101:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_theACLK_SetMode(CYCLK_DUTY);
  83              		.loc 1 101 0
  84 0018 1020     		movs	r0, #16
  85 001a FFF7FEFF 		bl	Volume_ADC_theACLK_SetModeRegister
 102:.\Generated_Source\PSoC5/Volume_ADC.c ****     #endif /* Volume_ADC_DEFAULT_INTERNAL_CLK */
 103:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 104:.\Generated_Source\PSoC5/Volume_ADC.c ****     #if(Volume_ADC_IRQ_REMOVE == 0u)
 105:.\Generated_Source\PSoC5/Volume_ADC.c ****         /* Set interrupt priority */
 106:.\Generated_Source\PSoC5/Volume_ADC.c ****         CyIntSetPriority(Volume_ADC_INTC_NUMBER, Volume_ADC_INTC_PRIOR_NUMBER);
  86              		.loc 1 106 0
  87 001e 1D20     		movs	r0, #29
  88 0020 0721     		movs	r1, #7
  89 0022 FFF7FEFF 		bl	CyIntSetPriority
 107:.\Generated_Source\PSoC5/Volume_ADC.c ****     #endif   /* End Volume_ADC_IRQ_REMOVE */
 108:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 109:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Init static registers with common configuration */
 110:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DSM_DEM0_REG    = Volume_ADC_CFG1_DSM_DEM0;
  90              		.loc 1 110 0
  91 0026 2C4B     		ldr	r3, .L2+8
  92 0028 0422     		movs	r2, #4
  93 002a 1A70     		strb	r2, [r3]
 111:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DSM_DEM1_REG    = Volume_ADC_CFG1_DSM_DEM1;
  94              		.loc 1 111 0
  95 002c 2B4B     		ldr	r3, .L2+12
  96 002e 0022     		movs	r2, #0
  97 0030 1A70     		strb	r2, [r3]
 112:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DSM_MISC_REG    = Volume_ADC_CFG1_DSM_MISC;
  98              		.loc 1 112 0
  99 0032 2B4B     		ldr	r3, .L2+16
 100 0034 0022     		movs	r2, #0
 101 0036 1A70     		strb	r2, [r3]
 113:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DSM_CLK_REG    |= Volume_ADC_CFG1_DSM_CLK;
 102              		.loc 1 113 0
 103 0038 2A4A     		ldr	r2, .L2+20
 104 003a 2A4B     		ldr	r3, .L2+20
 105 003c 1B78     		ldrb	r3, [r3]
 106 003e DBB2     		uxtb	r3, r3
 107 0040 43F01803 		orr	r3, r3, #24
 108 0044 DBB2     		uxtb	r3, r3
 109 0046 1370     		strb	r3, [r2]
 114:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DSM_REF1_REG    = Volume_ADC_CFG1_DSM_REF1;
 110              		.loc 1 114 0
 111 0048 274B     		ldr	r3, .L2+24
 112 004a 0022     		movs	r2, #0
 113 004c 1A70     		strb	r2, [r3]
 115:.\Generated_Source\PSoC5/Volume_ADC.c **** 
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 5


 116:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DSM_OUT0_REG    = Volume_ADC_CFG1_DSM_OUT0;
 114              		.loc 1 116 0
 115 004e 274B     		ldr	r3, .L2+28
 116 0050 0022     		movs	r2, #0
 117 0052 1A70     		strb	r2, [r3]
 117:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DSM_OUT1_REG    = Volume_ADC_CFG1_DSM_OUT1;
 118              		.loc 1 117 0
 119 0054 264B     		ldr	r3, .L2+32
 120 0056 0022     		movs	r2, #0
 121 0058 1A70     		strb	r2, [r3]
 118:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 119:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DSM_CR0_REG     = Volume_ADC_CFG1_DSM_CR0;
 122              		.loc 1 119 0
 123 005a 264B     		ldr	r3, .L2+36
 124 005c 0A22     		movs	r2, #10
 125 005e 1A70     		strb	r2, [r3]
 120:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DSM_CR1_REG     = Volume_ADC_CFG1_DSM_CR1;
 126              		.loc 1 120 0
 127 0060 254B     		ldr	r3, .L2+40
 128 0062 0022     		movs	r2, #0
 129 0064 1A70     		strb	r2, [r3]
 121:.\Generated_Source\PSoC5/Volume_ADC.c **** #if(Volume_ADC_MI_ENABLE != 0u) /* Enable Modulator Input */
 122:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DSM_CR3_REG     |= Volume_ADC_DSM_MODBIT_EN;
 123:.\Generated_Source\PSoC5/Volume_ADC.c **** #else
 124:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DSM_CR3_REG     = Volume_ADC_CFG1_DSM_CR3;
 130              		.loc 1 124 0
 131 0066 254B     		ldr	r3, .L2+44
 132 0068 0022     		movs	r2, #0
 133 006a 1A70     		strb	r2, [r3]
 125:.\Generated_Source\PSoC5/Volume_ADC.c **** #endif /* Volume_ADC_MI_ENABLE != 0u*/    
 126:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DSM_CR8_REG     = Volume_ADC_CFG1_DSM_CR8;
 134              		.loc 1 126 0
 135 006c 244B     		ldr	r3, .L2+48
 136 006e 1222     		movs	r2, #18
 137 0070 1A70     		strb	r2, [r3]
 127:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DSM_CR9_REG     = Volume_ADC_CFG1_DSM_CR9;
 138              		.loc 1 127 0
 139 0072 244B     		ldr	r3, .L2+52
 140 0074 1322     		movs	r2, #19
 141 0076 1A70     		strb	r2, [r3]
 128:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DSM_CR13_REG    = Volume_ADC_CFG1_DSM_CR13;
 142              		.loc 1 128 0
 143 0078 234B     		ldr	r3, .L2+56
 144 007a 0022     		movs	r2, #0
 145 007c 1A70     		strb	r2, [r3]
 129:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 130:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DEC_SR_REG      = Volume_ADC_CFG1_DEC_SR;
 146              		.loc 1 130 0
 147 007e 234B     		ldr	r3, .L2+60
 148 0080 1422     		movs	r2, #20
 149 0082 1A70     		strb	r2, [r3]
 131:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 132:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Calculate Gain compensation coefficients for all configurations */
 133:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_GainCompensation(Volume_ADC_CFG1_INPUT_RANGE,
 150              		.loc 1 133 0
 151 0084 0123     		movs	r3, #1
 152 0086 0093     		str	r3, [sp]
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 6


 153 0088 0420     		movs	r0, #4
 154 008a 48F6B651 		movw	r1, #36278
 155 008e 4FF40042 		mov	r2, #32768
 156 0092 0C23     		movs	r3, #12
 157 0094 FFF7FEFF 		bl	Volume_ADC_GainCompensation
 134:.\Generated_Source\PSoC5/Volume_ADC.c ****                                       Volume_ADC_CFG1_IDEAL_DEC_GAIN,
 135:.\Generated_Source\PSoC5/Volume_ADC.c ****                                       Volume_ADC_CFG1_IDEAL_ODDDEC_GAIN,
 136:.\Generated_Source\PSoC5/Volume_ADC.c ****                                       Volume_ADC_CFG1_RESOLUTION,
 137:.\Generated_Source\PSoC5/Volume_ADC.c ****                                       Volume_ADC_CFG1);
 138:.\Generated_Source\PSoC5/Volume_ADC.c ****     #if(Volume_ADC_DEFAULT_NUM_CONFIGS > 1)
 139:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_GainCompensation(Volume_ADC_CFG2_INPUT_RANGE,
 140:.\Generated_Source\PSoC5/Volume_ADC.c ****                                           Volume_ADC_CFG2_IDEAL_DEC_GAIN,
 141:.\Generated_Source\PSoC5/Volume_ADC.c ****                                           Volume_ADC_CFG2_IDEAL_ODDDEC_GAIN,
 142:.\Generated_Source\PSoC5/Volume_ADC.c ****                                           Volume_ADC_CFG2_RESOLUTION,
 143:.\Generated_Source\PSoC5/Volume_ADC.c ****                                           Volume_ADC_CFG2);
 144:.\Generated_Source\PSoC5/Volume_ADC.c ****     #endif /* Volume_ADC_DEFAULT_NUM_CONFIGS > 1 */
 145:.\Generated_Source\PSoC5/Volume_ADC.c ****     #if(Volume_ADC_DEFAULT_NUM_CONFIGS > 2)
 146:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_GainCompensation(Volume_ADC_CFG3_INPUT_RANGE,
 147:.\Generated_Source\PSoC5/Volume_ADC.c ****                                           Volume_ADC_CFG3_IDEAL_DEC_GAIN,
 148:.\Generated_Source\PSoC5/Volume_ADC.c ****                                           Volume_ADC_CFG3_IDEAL_ODDDEC_GAIN,
 149:.\Generated_Source\PSoC5/Volume_ADC.c ****                                           Volume_ADC_CFG3_RESOLUTION,
 150:.\Generated_Source\PSoC5/Volume_ADC.c ****                                           Volume_ADC_CFG3);
 151:.\Generated_Source\PSoC5/Volume_ADC.c ****     #endif /* Volume_ADC_DEFAULT_NUM_CONFIGS > 2 */
 152:.\Generated_Source\PSoC5/Volume_ADC.c ****     #if(Volume_ADC_DEFAULT_NUM_CONFIGS > 3)
 153:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_GainCompensation(Volume_ADC_CFG4_INPUT_RANGE,
 154:.\Generated_Source\PSoC5/Volume_ADC.c ****                                           Volume_ADC_CFG4_IDEAL_DEC_GAIN,
 155:.\Generated_Source\PSoC5/Volume_ADC.c ****                                           Volume_ADC_CFG4_IDEAL_ODDDEC_GAIN,
 156:.\Generated_Source\PSoC5/Volume_ADC.c ****                                           Volume_ADC_CFG4_RESOLUTION,
 157:.\Generated_Source\PSoC5/Volume_ADC.c ****                                           Volume_ADC_CFG4);
 158:.\Generated_Source\PSoC5/Volume_ADC.c ****     #endif /* Volume_ADC_DEFAULT_NUM_CONFIGS > 3 */
 159:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 160:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Set GCOR register for config1 */
 161:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DEC_GVAL_REG = Volume_ADC_gcor[Volume_ADC_Config - 1u].gval;
 158              		.loc 1 161 0
 159 0098 1D4A     		ldr	r2, .L2+64
 160 009a 0D4B     		ldr	r3, .L2
 161 009c 1B78     		ldrb	r3, [r3]
 162 009e DBB2     		uxtb	r3, r3
 163 00a0 013B     		subs	r3, r3, #1
 164 00a2 1C49     		ldr	r1, .L2+68
 165 00a4 9B00     		lsls	r3, r3, #2
 166 00a6 0B44     		add	r3, r3, r1
 167 00a8 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 168 00aa 1370     		strb	r3, [r2]
 162:.\Generated_Source\PSoC5/Volume_ADC.c ****     CY_SET_REG16(Volume_ADC_DEC_GCOR_16B_PTR, Volume_ADC_gcor[Volume_ADC_Config - 1u].gcor);
 169              		.loc 1 162 0
 170 00ac 1A4A     		ldr	r2, .L2+72
 171 00ae 084B     		ldr	r3, .L2
 172 00b0 1B78     		ldrb	r3, [r3]
 173 00b2 DBB2     		uxtb	r3, r3
 174 00b4 013B     		subs	r3, r3, #1
 175 00b6 1749     		ldr	r1, .L2+68
 176 00b8 31F82330 		ldrh	r3, [r1, r3, lsl #2]
 177 00bc 1380     		strh	r3, [r2]	@ movhi
 163:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 164:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Initialize the registers with default customizer settings for config1 */
 165:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_InitConfig(Volume_ADC_Config);
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 7


 178              		.loc 1 165 0
 179 00be 044B     		ldr	r3, .L2
 180 00c0 1B78     		ldrb	r3, [r3]
 181 00c2 DBB2     		uxtb	r3, r3
 182 00c4 1846     		mov	r0, r3
 183 00c6 FFF7FEFF 		bl	Volume_ADC_InitConfig
 166:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 184              		.loc 1 166 0
 185 00ca BD46     		mov	sp, r7
 186              		.cfi_def_cfa_register 13
 187              		@ sp needed
 188 00cc 80BD     		pop	{r7, pc}
 189              	.L3:
 190 00ce 00BF     		.align	2
 191              	.L2:
 192 00d0 00000000 		.word	Volume_ADC_Config
 193 00d4 00000000 		.word	Volume_ADC_convDone
 194 00d8 96580040 		.word	1073764502
 195 00dc 97580040 		.word	1073764503
 196 00e0 9E580040 		.word	1073764510
 197 00e4 075B0040 		.word	1073765127
 198 00e8 93580040 		.word	1073764499
 199 00ec 885B0040 		.word	1073765256
 200 00f0 895B0040 		.word	1073765257
 201 00f4 80580040 		.word	1073764480
 202 00f8 81580040 		.word	1073764481
 203 00fc 83580040 		.word	1073764483
 204 0100 88580040 		.word	1073764488
 205 0104 89580040 		.word	1073764489
 206 0108 8D580040 		.word	1073764493
 207 010c 014E0040 		.word	1073761793
 208 0110 0E4E0040 		.word	1073761806
 209 0114 04000000 		.word	Volume_ADC_gcor
 210 0118 0C4E0040 		.word	1073761804
 211              		.cfi_endproc
 212              	.LFE0:
 213              		.size	Volume_ADC_Init, .-Volume_ADC_Init
 214              		.section	.text.Volume_ADC_Enable,"ax",%progbits
 215              		.align	2
 216              		.global	Volume_ADC_Enable
 217              		.thumb
 218              		.thumb_func
 219              		.type	Volume_ADC_Enable, %function
 220              	Volume_ADC_Enable:
 221              	.LFB1:
 167:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 168:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 169:.\Generated_Source\PSoC5/Volume_ADC.c **** /******************************************************************************
 170:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_Enable
 171:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************
 172:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 173:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
 174:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Enables the ADC DelSig block operation.
 175:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 176:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 177:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
 178:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 8


 179:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 180:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
 181:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
 182:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 183:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
 184:.\Generated_Source\PSoC5/Volume_ADC.c **** void Volume_ADC_Enable(void) 
 185:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 222              		.loc 1 185 0
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 8
 225              		@ frame_needed = 1, uses_anonymous_args = 0
 226 0000 80B5     		push	{r7, lr}
 227              		.cfi_def_cfa_offset 8
 228              		.cfi_offset 7, -8
 229              		.cfi_offset 14, -4
 230 0002 82B0     		sub	sp, sp, #8
 231              		.cfi_def_cfa_offset 16
 232 0004 00AF     		add	r7, sp, #0
 233              		.cfi_def_cfa_register 7
 186:.\Generated_Source\PSoC5/Volume_ADC.c **** 	uint8 config;
 187:.\Generated_Source\PSoC5/Volume_ADC.c ****     uint8 enableInterrupts;
 188:.\Generated_Source\PSoC5/Volume_ADC.c ****     enableInterrupts = CyEnterCriticalSection();
 234              		.loc 1 188 0
 235 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 236 000a 0346     		mov	r3, r0
 237 000c FB71     		strb	r3, [r7, #7]
 189:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 190:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Read volatile variable to the local variable */
 191:.\Generated_Source\PSoC5/Volume_ADC.c ****     config = Volume_ADC_Config;
 238              		.loc 1 191 0
 239 000e 444B     		ldr	r3, .L5
 240 0010 1B78     		ldrb	r3, [r3]
 241 0012 BB71     		strb	r3, [r7, #6]
 192:.\Generated_Source\PSoC5/Volume_ADC.c ****     
 193:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Enable active mode power for ADC */
 194:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_PWRMGR_DEC_REG |= Volume_ADC_ACT_PWR_DEC_EN;
 242              		.loc 1 194 0
 243 0014 434A     		ldr	r2, .L5+4
 244 0016 434B     		ldr	r3, .L5+4
 245 0018 1B78     		ldrb	r3, [r3]
 246 001a DBB2     		uxtb	r3, r3
 247 001c 43F00103 		orr	r3, r3, #1
 248 0020 DBB2     		uxtb	r3, r3
 249 0022 1370     		strb	r3, [r2]
 195:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_PWRMGR_DSM_REG |= Volume_ADC_ACT_PWR_DSM_EN;
 250              		.loc 1 195 0
 251 0024 3F4A     		ldr	r2, .L5+4
 252 0026 3F4B     		ldr	r3, .L5+4
 253 0028 1B78     		ldrb	r3, [r3]
 254 002a DBB2     		uxtb	r3, r3
 255 002c 43F01003 		orr	r3, r3, #16
 256 0030 DBB2     		uxtb	r3, r3
 257 0032 1370     		strb	r3, [r2]
 196:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 197:.\Generated_Source\PSoC5/Volume_ADC.c ****      /* Enable alternative active mode power for ADC */
 198:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_STBY_PWRMGR_DEC_REG |= Volume_ADC_STBY_PWR_DEC_EN;
 258              		.loc 1 198 0
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 9


 259 0034 3C4A     		ldr	r2, .L5+8
 260 0036 3C4B     		ldr	r3, .L5+8
 261 0038 1B78     		ldrb	r3, [r3]
 262 003a DBB2     		uxtb	r3, r3
 263 003c 43F00103 		orr	r3, r3, #1
 264 0040 DBB2     		uxtb	r3, r3
 265 0042 1370     		strb	r3, [r2]
 199:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_STBY_PWRMGR_DSM_REG |= Volume_ADC_STBY_PWR_DSM_EN;
 266              		.loc 1 199 0
 267 0044 384A     		ldr	r2, .L5+8
 268 0046 384B     		ldr	r3, .L5+8
 269 0048 1B78     		ldrb	r3, [r3]
 270 004a DBB2     		uxtb	r3, r3
 271 004c 43F01003 		orr	r3, r3, #16
 272 0050 DBB2     		uxtb	r3, r3
 273 0052 1370     		strb	r3, [r2]
 200:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 201:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Disable PRES, Enable power to VCMBUF0, REFBUF0 and REFBUF1, enable PRES */
 202:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_RESET_CR4_REG |= Volume_ADC_IGNORE_PRESA1;
 274              		.loc 1 202 0
 275 0054 354A     		ldr	r2, .L5+12
 276 0056 354B     		ldr	r3, .L5+12
 277 0058 1B78     		ldrb	r3, [r3]
 278 005a DBB2     		uxtb	r3, r3
 279 005c 43F00203 		orr	r3, r3, #2
 280 0060 DBB2     		uxtb	r3, r3
 281 0062 1370     		strb	r3, [r2]
 203:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_RESET_CR5_REG |= Volume_ADC_IGNORE_PRESA2;
 282              		.loc 1 203 0
 283 0064 324A     		ldr	r2, .L5+16
 284 0066 324B     		ldr	r3, .L5+16
 285 0068 1B78     		ldrb	r3, [r3]
 286 006a DBB2     		uxtb	r3, r3
 287 006c 43F00203 		orr	r3, r3, #2
 288 0070 DBB2     		uxtb	r3, r3
 289 0072 1370     		strb	r3, [r2]
 204:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 205:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DSM_CR17_REG |= (Volume_ADC_DSM_EN_BUF_VREF | Volume_ADC_DSM_EN_BUF_VCM);
 290              		.loc 1 205 0
 291 0074 2F4A     		ldr	r2, .L5+20
 292 0076 2F4B     		ldr	r3, .L5+20
 293 0078 1B78     		ldrb	r3, [r3]
 294 007a DBB2     		uxtb	r3, r3
 295 007c 43F00303 		orr	r3, r3, #3
 296 0080 DBB2     		uxtb	r3, r3
 297 0082 1370     		strb	r3, [r2]
 206:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 207:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Code to disable the REFBUF0 if reference chosen is External ref */
 208:.\Generated_Source\PSoC5/Volume_ADC.c ****     #if (((Volume_ADC_CFG1_REFERENCE == Volume_ADC_EXT_REF_ON_P03) || \
 209:.\Generated_Source\PSoC5/Volume_ADC.c ****           (Volume_ADC_CFG1_REFERENCE == Volume_ADC_EXT_REF_ON_P32)) || \
 210:.\Generated_Source\PSoC5/Volume_ADC.c ****          ((Volume_ADC_DEFAULT_NUM_CONFIGS > 1) && \
 211:.\Generated_Source\PSoC5/Volume_ADC.c ****           ((Volume_ADC_CFG2_REFERENCE == Volume_ADC_EXT_REF_ON_P03) ||  \
 212:.\Generated_Source\PSoC5/Volume_ADC.c ****            (Volume_ADC_CFG2_REFERENCE == Volume_ADC_EXT_REF_ON_P32))) || \
 213:.\Generated_Source\PSoC5/Volume_ADC.c ****          ((Volume_ADC_DEFAULT_NUM_CONFIGS > 2) && \
 214:.\Generated_Source\PSoC5/Volume_ADC.c ****           ((Volume_ADC_CFG3_REFERENCE == Volume_ADC_EXT_REF_ON_P03) ||  \
 215:.\Generated_Source\PSoC5/Volume_ADC.c ****            (Volume_ADC_CFG3_REFERENCE == Volume_ADC_EXT_REF_ON_P32))) || \
 216:.\Generated_Source\PSoC5/Volume_ADC.c ****          ((Volume_ADC_DEFAULT_NUM_CONFIGS > 3) && \
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 10


 217:.\Generated_Source\PSoC5/Volume_ADC.c ****           ((Volume_ADC_CFG4_REFERENCE == Volume_ADC_EXT_REF_ON_P03) || \
 218:.\Generated_Source\PSoC5/Volume_ADC.c ****            (Volume_ADC_CFG4_REFERENCE == Volume_ADC_EXT_REF_ON_P32))))
 219:.\Generated_Source\PSoC5/Volume_ADC.c ****         if (((config == 1u) &&
 220:.\Generated_Source\PSoC5/Volume_ADC.c ****             ((Volume_ADC_CFG1_REFERENCE == Volume_ADC_EXT_REF_ON_P03) ||
 221:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG1_REFERENCE == Volume_ADC_EXT_REF_ON_P32))) ||
 222:.\Generated_Source\PSoC5/Volume_ADC.c ****             ((config == 2u) &&
 223:.\Generated_Source\PSoC5/Volume_ADC.c ****             ((Volume_ADC_CFG2_REFERENCE == Volume_ADC_EXT_REF_ON_P03) ||
 224:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG2_REFERENCE == Volume_ADC_EXT_REF_ON_P32))) ||
 225:.\Generated_Source\PSoC5/Volume_ADC.c ****             ((config == 3u) &&
 226:.\Generated_Source\PSoC5/Volume_ADC.c ****             ((Volume_ADC_CFG3_REFERENCE == Volume_ADC_EXT_REF_ON_P03) ||
 227:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG3_REFERENCE == Volume_ADC_EXT_REF_ON_P32))) ||
 228:.\Generated_Source\PSoC5/Volume_ADC.c ****             ((config == 4u) &&
 229:.\Generated_Source\PSoC5/Volume_ADC.c ****             ((Volume_ADC_CFG4_REFERENCE == Volume_ADC_EXT_REF_ON_P03) ||
 230:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG4_REFERENCE == Volume_ADC_EXT_REF_ON_P32))))
 231:.\Generated_Source\PSoC5/Volume_ADC.c ****         {
 232:.\Generated_Source\PSoC5/Volume_ADC.c ****             /* Disable the REFBUF0 */
 233:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR17_REG &= (uint8)~Volume_ADC_DSM_EN_BUF_VREF;
 234:.\Generated_Source\PSoC5/Volume_ADC.c ****         }
 235:.\Generated_Source\PSoC5/Volume_ADC.c ****     #endif /* External ref */
 236:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 237:.\Generated_Source\PSoC5/Volume_ADC.c ****     #if (((Volume_ADC_CFG1_INPUT_RANGE == Volume_ADC_IR_VSSA_TO_2VREF) || \
 238:.\Generated_Source\PSoC5/Volume_ADC.c ****          ((Volume_ADC_DEFAULT_NUM_CONFIGS > 1) && \
 239:.\Generated_Source\PSoC5/Volume_ADC.c ****           (Volume_ADC_CFG2_INPUT_RANGE == Volume_ADC_IR_VSSA_TO_2VREF)) || \
 240:.\Generated_Source\PSoC5/Volume_ADC.c ****          ((Volume_ADC_DEFAULT_NUM_CONFIGS > 2) && \
 241:.\Generated_Source\PSoC5/Volume_ADC.c ****           (Volume_ADC_CFG3_INPUT_RANGE == Volume_ADC_IR_VSSA_TO_2VREF)) || \
 242:.\Generated_Source\PSoC5/Volume_ADC.c ****          ((Volume_ADC_DEFAULT_NUM_CONFIGS > 3) && \
 243:.\Generated_Source\PSoC5/Volume_ADC.c ****           (Volume_ADC_CFG4_INPUT_RANGE == Volume_ADC_IR_VSSA_TO_2VREF))))
 244:.\Generated_Source\PSoC5/Volume_ADC.c ****         if(((config == 1u) &&
 245:.\Generated_Source\PSoC5/Volume_ADC.c ****             (Volume_ADC_CFG1_INPUT_RANGE == Volume_ADC_IR_VSSA_TO_2VREF) &&
 246:.\Generated_Source\PSoC5/Volume_ADC.c ****             ((Volume_ADC_CFG1_REFERENCE != Volume_ADC_EXT_REF_ON_P03) &&
 247:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG1_REFERENCE != Volume_ADC_EXT_REF_ON_P32))) ||
 248:.\Generated_Source\PSoC5/Volume_ADC.c ****              ((config == 2u) &&
 249:.\Generated_Source\PSoC5/Volume_ADC.c ****               (Volume_ADC_CFG2_INPUT_RANGE == Volume_ADC_IR_VSSA_TO_2VREF) &&
 250:.\Generated_Source\PSoC5/Volume_ADC.c ****              ((Volume_ADC_CFG2_REFERENCE != Volume_ADC_EXT_REF_ON_P03) &&
 251:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG2_REFERENCE != Volume_ADC_EXT_REF_ON_P32))) ||
 252:.\Generated_Source\PSoC5/Volume_ADC.c ****              ((config == 3u) &&
 253:.\Generated_Source\PSoC5/Volume_ADC.c ****               (Volume_ADC_CFG3_INPUT_RANGE == Volume_ADC_IR_VSSA_TO_2VREF) &&
 254:.\Generated_Source\PSoC5/Volume_ADC.c ****              ((Volume_ADC_CFG3_REFERENCE != Volume_ADC_EXT_REF_ON_P03) &&
 255:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG3_REFERENCE != Volume_ADC_EXT_REF_ON_P32))) ||
 256:.\Generated_Source\PSoC5/Volume_ADC.c ****              ((config == 4u) &&
 257:.\Generated_Source\PSoC5/Volume_ADC.c ****               (Volume_ADC_CFG4_INPUT_RANGE == Volume_ADC_IR_VSSA_TO_2VREF) &&
 258:.\Generated_Source\PSoC5/Volume_ADC.c ****              ((Volume_ADC_CFG4_REFERENCE != Volume_ADC_EXT_REF_ON_P03) &&
 259:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG4_REFERENCE != Volume_ADC_EXT_REF_ON_P32))))
 260:.\Generated_Source\PSoC5/Volume_ADC.c ****         {
 261:.\Generated_Source\PSoC5/Volume_ADC.c ****             /* Enable the REFBUF1 */
 262:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_REF0_REG |= Volume_ADC_DSM_EN_BUF_VREF_INN;
 263:.\Generated_Source\PSoC5/Volume_ADC.c ****         }
 264:.\Generated_Source\PSoC5/Volume_ADC.c ****     #endif /* VSSA_TO_2VREF */
 265:.\Generated_Source\PSoC5/Volume_ADC.c ****     if(config != 0u)
 266:.\Generated_Source\PSoC5/Volume_ADC.c ****     {
 267:.\Generated_Source\PSoC5/Volume_ADC.c ****         /* Suppress compiler warning */
 268:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
 269:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 270:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Wait for 3 microseconds */
 271:.\Generated_Source\PSoC5/Volume_ADC.c ****     CyDelayUs(Volume_ADC_PRES_DELAY_TIME);
 298              		.loc 1 271 0
 299 0084 0320     		movs	r0, #3
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 11


 300 0086 FFF7FEFF 		bl	CyDelayUs
 272:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 273:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Enable the press circuit */
 274:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_RESET_CR4_REG &= (uint8)~Volume_ADC_IGNORE_PRESA1;
 301              		.loc 1 274 0
 302 008a 284A     		ldr	r2, .L5+12
 303 008c 274B     		ldr	r3, .L5+12
 304 008e 1B78     		ldrb	r3, [r3]
 305 0090 DBB2     		uxtb	r3, r3
 306 0092 23F00203 		bic	r3, r3, #2
 307 0096 DBB2     		uxtb	r3, r3
 308 0098 1370     		strb	r3, [r2]
 275:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_RESET_CR5_REG &= (uint8)~Volume_ADC_IGNORE_PRESA2;
 309              		.loc 1 275 0
 310 009a 254A     		ldr	r2, .L5+16
 311 009c 244B     		ldr	r3, .L5+16
 312 009e 1B78     		ldrb	r3, [r3]
 313 00a0 DBB2     		uxtb	r3, r3
 314 00a2 23F00203 		bic	r3, r3, #2
 315 00a6 DBB2     		uxtb	r3, r3
 316 00a8 1370     		strb	r3, [r2]
 276:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 277:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Enable negative pumps for DSM  */
 278:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_PUMP_CR1_REG  |= ( Volume_ADC_PUMP_CR1_CLKSEL | Volume_ADC_PUMP_CR1_FORCE );
 317              		.loc 1 278 0
 318 00aa 234A     		ldr	r2, .L5+24
 319 00ac 224B     		ldr	r3, .L5+24
 320 00ae 1B78     		ldrb	r3, [r3]
 321 00b0 DBB2     		uxtb	r3, r3
 322 00b2 43F00603 		orr	r3, r3, #6
 323 00b6 DBB2     		uxtb	r3, r3
 324 00b8 1370     		strb	r3, [r2]
 279:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 280:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Enable Modulator Chopping if required */
 281:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DSM_CR2_REG = Volume_ADC_CFG1_DSM_CR2;
 325              		.loc 1 281 0
 326 00ba 204B     		ldr	r3, .L5+28
 327 00bc 7A22     		movs	r2, #122
 328 00be 1A70     		strb	r2, [r3]
 282:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 283:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* This is only valid if there is an internal clock */
 284:.\Generated_Source\PSoC5/Volume_ADC.c ****     #if(Volume_ADC_DEFAULT_INTERNAL_CLK)
 285:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_PWRMGR_CLK_REG |= Volume_ADC_ACT_PWR_CLK_EN;
 329              		.loc 1 285 0
 330 00c0 1F4A     		ldr	r2, .L5+32
 331 00c2 1F4B     		ldr	r3, .L5+32
 332 00c4 1B78     		ldrb	r3, [r3]
 333 00c6 DBB2     		uxtb	r3, r3
 334 00c8 43F00103 		orr	r3, r3, #1
 335 00cc DBB2     		uxtb	r3, r3
 336 00ce 1370     		strb	r3, [r2]
 286:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_STBY_PWRMGR_CLK_REG |= Volume_ADC_STBY_PWR_CLK_EN;
 337              		.loc 1 286 0
 338 00d0 1C4A     		ldr	r2, .L5+36
 339 00d2 1C4B     		ldr	r3, .L5+36
 340 00d4 1B78     		ldrb	r3, [r3]
 341 00d6 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 12


 342 00d8 43F00103 		orr	r3, r3, #1
 343 00dc DBB2     		uxtb	r3, r3
 344 00de 1370     		strb	r3, [r2]
 287:.\Generated_Source\PSoC5/Volume_ADC.c ****     #endif /* Volume_ADC_DEFAULT_INTERNAL_CLK */
 288:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 289:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Enable the active and alternate active power for charge pump clock */
 290:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_PWRMGR_CHARGE_PUMP_CLK_REG |= Volume_ADC_ACT_PWR_CHARGE_PUMP_CLK_EN;
 345              		.loc 1 290 0
 346 00e0 194A     		ldr	r2, .L5+40
 347 00e2 194B     		ldr	r3, .L5+40
 348 00e4 1B78     		ldrb	r3, [r3]
 349 00e6 DBB2     		uxtb	r3, r3
 350 00e8 43F00103 		orr	r3, r3, #1
 351 00ec DBB2     		uxtb	r3, r3
 352 00ee 1370     		strb	r3, [r2]
 291:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_STBY_PWRMGR_CHARGE_PUMP_CLK_REG |= Volume_ADC_STBY_PWR_CHARGE_PUMP_CLK_EN;
 353              		.loc 1 291 0
 354 00f0 164A     		ldr	r2, .L5+44
 355 00f2 164B     		ldr	r3, .L5+44
 356 00f4 1B78     		ldrb	r3, [r3]
 357 00f6 DBB2     		uxtb	r3, r3
 358 00f8 43F00103 		orr	r3, r3, #1
 359 00fc DBB2     		uxtb	r3, r3
 360 00fe 1370     		strb	r3, [r2]
 292:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 293:.\Generated_Source\PSoC5/Volume_ADC.c ****     #if(Volume_ADC_IRQ_REMOVE == 0u)
 294:.\Generated_Source\PSoC5/Volume_ADC.c ****         /* Clear a pending interrupt */
 295:.\Generated_Source\PSoC5/Volume_ADC.c ****         CyIntClearPending(Volume_ADC_INTC_NUMBER);
 361              		.loc 1 295 0
 362 0100 134B     		ldr	r3, .L5+48
 363 0102 4FF00052 		mov	r2, #536870912
 364 0106 1A60     		str	r2, [r3]
 296:.\Generated_Source\PSoC5/Volume_ADC.c ****         /* Enable interrupt */
 297:.\Generated_Source\PSoC5/Volume_ADC.c ****         CyIntEnable(Volume_ADC_INTC_NUMBER);
 365              		.loc 1 297 0
 366 0108 124B     		ldr	r3, .L5+52
 367 010a 4FF00052 		mov	r2, #536870912
 368 010e 1A60     		str	r2, [r3]
 298:.\Generated_Source\PSoC5/Volume_ADC.c ****     #endif   /* End Volume_ADC_IRQ_REMOVE */
 299:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 300:.\Generated_Source\PSoC5/Volume_ADC.c ****     CyExitCriticalSection(enableInterrupts);
 369              		.loc 1 300 0
 370 0110 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 371 0112 1846     		mov	r0, r3
 372 0114 FFF7FEFF 		bl	CyExitCriticalSection
 301:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 302:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 373              		.loc 1 302 0
 374 0118 0837     		adds	r7, r7, #8
 375              		.cfi_def_cfa_offset 8
 376 011a BD46     		mov	sp, r7
 377              		.cfi_def_cfa_register 13
 378              		@ sp needed
 379 011c 80BD     		pop	{r7, pc}
 380              	.L6:
 381 011e 00BF     		.align	2
 382              	.L5:
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 13


 383 0120 00000000 		.word	Volume_ADC_Config
 384 0124 AA430040 		.word	1073759146
 385 0128 BA430040 		.word	1073759162
 386 012c F8460040 		.word	1073759992
 387 0130 F9460040 		.word	1073759993
 388 0134 91580040 		.word	1073764497
 389 0138 77580040 		.word	1073764471
 390 013c 82580040 		.word	1073764482
 391 0140 A1430040 		.word	1073759137
 392 0144 B1430040 		.word	1073759153
 393 0148 A2430040 		.word	1073759138
 394 014c B2430040 		.word	1073759154
 395 0150 80E200E0 		.word	-536812928
 396 0154 00E100E0 		.word	-536813312
 397              		.cfi_endproc
 398              	.LFE1:
 399              		.size	Volume_ADC_Enable, .-Volume_ADC_Enable
 400              		.section	.text.Volume_ADC_Start,"ax",%progbits
 401              		.align	2
 402              		.global	Volume_ADC_Start
 403              		.thumb
 404              		.thumb_func
 405              		.type	Volume_ADC_Start, %function
 406              	Volume_ADC_Start:
 407              	.LFB2:
 303:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 304:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 305:.\Generated_Source\PSoC5/Volume_ADC.c **** /*******************************************************************************
 306:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_Start
 307:.\Generated_Source\PSoC5/Volume_ADC.c **** ********************************************************************************
 308:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 309:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
 310:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Performs all required initialization for this component and enables
 311:.\Generated_Source\PSoC5/Volume_ADC.c **** *  the power. It configure all the register the first time it is called.
 312:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Subsequent calls of the Start function only enable the ADC and turn
 313:.\Generated_Source\PSoC5/Volume_ADC.c **** *  on the power. If multiple configurations are selected, it will
 314:.\Generated_Source\PSoC5/Volume_ADC.c **** *  configure the ADC for configuration 1 by default, unless the
 315:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Volume_ADC_SelectConfiguration( ) function has been called to change
 316:.\Generated_Source\PSoC5/Volume_ADC.c **** *  the default setting.
 317:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 318:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
 319:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
 320:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 321:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
 322:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
 323:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 324:.\Generated_Source\PSoC5/Volume_ADC.c **** * Global variables:
 325:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Volume_ADC_initVar:  Used to check the initial configuration,
 326:.\Generated_Source\PSoC5/Volume_ADC.c **** *  modified when this function is called for the first time.
 327:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 328:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
 329:.\Generated_Source\PSoC5/Volume_ADC.c **** void Volume_ADC_Start(void) 
 330:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 408              		.loc 1 330 0
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 0
 411              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 14


 412 0000 80B5     		push	{r7, lr}
 413              		.cfi_def_cfa_offset 8
 414              		.cfi_offset 7, -8
 415              		.cfi_offset 14, -4
 416 0002 00AF     		add	r7, sp, #0
 417              		.cfi_def_cfa_register 7
 331:.\Generated_Source\PSoC5/Volume_ADC.c ****     if(Volume_ADC_initVar == 0u)
 418              		.loc 1 331 0
 419 0004 084B     		ldr	r3, .L10
 420 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 421 0008 002B     		cmp	r3, #0
 422 000a 09D1     		bne	.L8
 332:.\Generated_Source\PSoC5/Volume_ADC.c ****     {
 333:.\Generated_Source\PSoC5/Volume_ADC.c ****         if(Volume_ADC_started == 0u)
 423              		.loc 1 333 0
 424 000c 074B     		ldr	r3, .L10+4
 425 000e 1B78     		ldrb	r3, [r3]
 426 0010 DBB2     		uxtb	r3, r3
 427 0012 002B     		cmp	r3, #0
 428 0014 01D1     		bne	.L9
 334:.\Generated_Source\PSoC5/Volume_ADC.c ****         {
 335:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_Init();
 429              		.loc 1 335 0
 430 0016 FFF7FEFF 		bl	Volume_ADC_Init
 431              	.L9:
 336:.\Generated_Source\PSoC5/Volume_ADC.c ****         }
 337:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_initVar = 1u;
 432              		.loc 1 337 0
 433 001a 034B     		ldr	r3, .L10
 434 001c 0122     		movs	r2, #1
 435 001e 1A70     		strb	r2, [r3]
 436              	.L8:
 338:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
 339:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 340:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Enable the ADC */
 341:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_Enable();
 437              		.loc 1 341 0
 438 0020 FFF7FEFF 		bl	Volume_ADC_Enable
 342:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 439              		.loc 1 342 0
 440 0024 80BD     		pop	{r7, pc}
 441              	.L11:
 442 0026 00BF     		.align	2
 443              	.L10:
 444 0028 00000000 		.word	Volume_ADC_initVar
 445 002c 00000000 		.word	Volume_ADC_started
 446              		.cfi_endproc
 447              	.LFE2:
 448              		.size	Volume_ADC_Start, .-Volume_ADC_Start
 449              		.section	.text.Volume_ADC_Stop,"ax",%progbits
 450              		.align	2
 451              		.global	Volume_ADC_Stop
 452              		.thumb
 453              		.thumb_func
 454              		.type	Volume_ADC_Stop, %function
 455              	Volume_ADC_Stop:
 456              	.LFB3:
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 15


 343:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 344:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 345:.\Generated_Source\PSoC5/Volume_ADC.c **** /*******************************************************************************
 346:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_Stop
 347:.\Generated_Source\PSoC5/Volume_ADC.c **** ********************************************************************************
 348:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 349:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
 350:.\Generated_Source\PSoC5/Volume_ADC.c **** *  This function stops and powers down the ADC component and the internal
 351:.\Generated_Source\PSoC5/Volume_ADC.c **** *  clock if the external clock is not selected. If an external clock is
 352:.\Generated_Source\PSoC5/Volume_ADC.c **** *  used, it is up to the designer to power down the external clock it
 353:.\Generated_Source\PSoC5/Volume_ADC.c **** *  required.
 354:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 355:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
 356:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
 357:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 358:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
 359:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
 360:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 361:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
 362:.\Generated_Source\PSoC5/Volume_ADC.c **** void Volume_ADC_Stop(void) 
 363:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 457              		.loc 1 363 0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 8
 460              		@ frame_needed = 1, uses_anonymous_args = 0
 461 0000 80B5     		push	{r7, lr}
 462              		.cfi_def_cfa_offset 8
 463              		.cfi_offset 7, -8
 464              		.cfi_offset 14, -4
 465 0002 82B0     		sub	sp, sp, #8
 466              		.cfi_def_cfa_offset 16
 467 0004 00AF     		add	r7, sp, #0
 468              		.cfi_def_cfa_register 7
 364:.\Generated_Source\PSoC5/Volume_ADC.c ****     uint8 enableInterrupts;
 365:.\Generated_Source\PSoC5/Volume_ADC.c ****     enableInterrupts = CyEnterCriticalSection();
 469              		.loc 1 365 0
 470 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 471 000a 0346     		mov	r3, r0
 472 000c FB71     		strb	r3, [r7, #7]
 366:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 367:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Stop conversions */
 368:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DEC_CR_REG &= (uint8)~Volume_ADC_DEC_START_CONV;
 473              		.loc 1 368 0
 474 000e 4D4A     		ldr	r2, .L13
 475 0010 4C4B     		ldr	r3, .L13
 476 0012 1B78     		ldrb	r3, [r3]
 477 0014 DBB2     		uxtb	r3, r3
 478 0016 23F00103 		bic	r3, r3, #1
 479 001a DBB2     		uxtb	r3, r3
 480 001c 1370     		strb	r3, [r2]
 369:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DEC_SR_REG |=  Volume_ADC_DEC_INTR_CLEAR;
 481              		.loc 1 369 0
 482 001e 4A4A     		ldr	r2, .L13+4
 483 0020 494B     		ldr	r3, .L13+4
 484 0022 1B78     		ldrb	r3, [r3]
 485 0024 DBB2     		uxtb	r3, r3
 486 0026 43F00403 		orr	r3, r3, #4
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 16


 487 002a DBB2     		uxtb	r3, r3
 488 002c 1370     		strb	r3, [r2]
 370:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 371:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Disable PRES, Disable power to VCMBUF0, REFBUF0 and REFBUF1,
 372:.\Generated_Source\PSoC5/Volume_ADC.c ****        enable PRES */
 373:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_RESET_CR4_REG |= Volume_ADC_IGNORE_PRESA1;
 489              		.loc 1 373 0
 490 002e 474A     		ldr	r2, .L13+8
 491 0030 464B     		ldr	r3, .L13+8
 492 0032 1B78     		ldrb	r3, [r3]
 493 0034 DBB2     		uxtb	r3, r3
 494 0036 43F00203 		orr	r3, r3, #2
 495 003a DBB2     		uxtb	r3, r3
 496 003c 1370     		strb	r3, [r2]
 374:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_RESET_CR5_REG |= Volume_ADC_IGNORE_PRESA2;
 497              		.loc 1 374 0
 498 003e 444A     		ldr	r2, .L13+12
 499 0040 434B     		ldr	r3, .L13+12
 500 0042 1B78     		ldrb	r3, [r3]
 501 0044 DBB2     		uxtb	r3, r3
 502 0046 43F00203 		orr	r3, r3, #2
 503 004a DBB2     		uxtb	r3, r3
 504 004c 1370     		strb	r3, [r2]
 375:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 376:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DSM_CR17_REG &= (uint8)~(Volume_ADC_DSM_EN_BUF_VREF | Volume_ADC_DSM_EN_BUF_VCM);
 505              		.loc 1 376 0
 506 004e 414A     		ldr	r2, .L13+16
 507 0050 404B     		ldr	r3, .L13+16
 508 0052 1B78     		ldrb	r3, [r3]
 509 0054 DBB2     		uxtb	r3, r3
 510 0056 23F00303 		bic	r3, r3, #3
 511 005a DBB2     		uxtb	r3, r3
 512 005c 1370     		strb	r3, [r2]
 377:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DSM_REF0_REG &= (uint8)~Volume_ADC_DSM_EN_BUF_VREF_INN;
 513              		.loc 1 377 0
 514 005e 3E4A     		ldr	r2, .L13+20
 515 0060 3D4B     		ldr	r3, .L13+20
 516 0062 1B78     		ldrb	r3, [r3]
 517 0064 DBB2     		uxtb	r3, r3
 518 0066 23F00803 		bic	r3, r3, #8
 519 006a DBB2     		uxtb	r3, r3
 520 006c 1370     		strb	r3, [r2]
 378:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 379:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Wait for 3 microseconds. */
 380:.\Generated_Source\PSoC5/Volume_ADC.c ****     CyDelayUs(Volume_ADC_PRES_DELAY_TIME);
 521              		.loc 1 380 0
 522 006e 0320     		movs	r0, #3
 523 0070 FFF7FEFF 		bl	CyDelayUs
 381:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 382:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Enable the press circuit */
 383:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_RESET_CR4_REG &= (uint8)~Volume_ADC_IGNORE_PRESA1;
 524              		.loc 1 383 0
 525 0074 354A     		ldr	r2, .L13+8
 526 0076 354B     		ldr	r3, .L13+8
 527 0078 1B78     		ldrb	r3, [r3]
 528 007a DBB2     		uxtb	r3, r3
 529 007c 23F00203 		bic	r3, r3, #2
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 17


 530 0080 DBB2     		uxtb	r3, r3
 531 0082 1370     		strb	r3, [r2]
 384:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_RESET_CR5_REG &= (uint8)~Volume_ADC_IGNORE_PRESA2;
 532              		.loc 1 384 0
 533 0084 324A     		ldr	r2, .L13+12
 534 0086 324B     		ldr	r3, .L13+12
 535 0088 1B78     		ldrb	r3, [r3]
 536 008a DBB2     		uxtb	r3, r3
 537 008c 23F00203 		bic	r3, r3, #2
 538 0090 DBB2     		uxtb	r3, r3
 539 0092 1370     		strb	r3, [r2]
 385:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 386:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Disable power to the ADC */
 387:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_PWRMGR_DSM_REG &= (uint8)~Volume_ADC_ACT_PWR_DSM_EN;
 540              		.loc 1 387 0
 541 0094 314A     		ldr	r2, .L13+24
 542 0096 314B     		ldr	r3, .L13+24
 543 0098 1B78     		ldrb	r3, [r3]
 544 009a DBB2     		uxtb	r3, r3
 545 009c 23F01003 		bic	r3, r3, #16
 546 00a0 DBB2     		uxtb	r3, r3
 547 00a2 1370     		strb	r3, [r2]
 388:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 389:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Disable power to Decimator block */
 390:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_PWRMGR_DEC_REG &= (uint8)~Volume_ADC_ACT_PWR_DEC_EN;
 548              		.loc 1 390 0
 549 00a4 2D4A     		ldr	r2, .L13+24
 550 00a6 2D4B     		ldr	r3, .L13+24
 551 00a8 1B78     		ldrb	r3, [r3]
 552 00aa DBB2     		uxtb	r3, r3
 553 00ac 23F00103 		bic	r3, r3, #1
 554 00b0 DBB2     		uxtb	r3, r3
 555 00b2 1370     		strb	r3, [r2]
 391:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 392:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Disable alternative active power to the ADC */
 393:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_STBY_PWRMGR_DEC_REG &= (uint8)~Volume_ADC_STBY_PWR_DEC_EN;
 556              		.loc 1 393 0
 557 00b4 2A4A     		ldr	r2, .L13+28
 558 00b6 2A4B     		ldr	r3, .L13+28
 559 00b8 1B78     		ldrb	r3, [r3]
 560 00ba DBB2     		uxtb	r3, r3
 561 00bc 23F00103 		bic	r3, r3, #1
 562 00c0 DBB2     		uxtb	r3, r3
 563 00c2 1370     		strb	r3, [r2]
 394:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_STBY_PWRMGR_DSM_REG &= (uint8)~Volume_ADC_STBY_PWR_DSM_EN;
 564              		.loc 1 394 0
 565 00c4 264A     		ldr	r2, .L13+28
 566 00c6 264B     		ldr	r3, .L13+28
 567 00c8 1B78     		ldrb	r3, [r3]
 568 00ca DBB2     		uxtb	r3, r3
 569 00cc 23F01003 		bic	r3, r3, #16
 570 00d0 DBB2     		uxtb	r3, r3
 571 00d2 1370     		strb	r3, [r2]
 395:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 396:.\Generated_Source\PSoC5/Volume_ADC.c ****    /* Disable negative pumps for DSM  */
 397:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_PUMP_CR1_REG &= (uint8)~(Volume_ADC_PUMP_CR1_CLKSEL | Volume_ADC_PUMP_CR1_FORCE );
 572              		.loc 1 397 0
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 18


 573 00d4 234A     		ldr	r2, .L13+32
 574 00d6 234B     		ldr	r3, .L13+32
 575 00d8 1B78     		ldrb	r3, [r3]
 576 00da DBB2     		uxtb	r3, r3
 577 00dc 23F00603 		bic	r3, r3, #6
 578 00e0 DBB2     		uxtb	r3, r3
 579 00e2 1370     		strb	r3, [r2]
 398:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 399:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* This is only valid if there is an internal clock */
 400:.\Generated_Source\PSoC5/Volume_ADC.c ****     #if(Volume_ADC_DEFAULT_INTERNAL_CLK)
 401:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_PWRMGR_CLK_REG &= (uint8)~Volume_ADC_ACT_PWR_CLK_EN;
 580              		.loc 1 401 0
 581 00e4 204A     		ldr	r2, .L13+36
 582 00e6 204B     		ldr	r3, .L13+36
 583 00e8 1B78     		ldrb	r3, [r3]
 584 00ea DBB2     		uxtb	r3, r3
 585 00ec 23F00103 		bic	r3, r3, #1
 586 00f0 DBB2     		uxtb	r3, r3
 587 00f2 1370     		strb	r3, [r2]
 402:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_STBY_PWRMGR_CLK_REG &= (uint8)~Volume_ADC_STBY_PWR_CLK_EN;
 588              		.loc 1 402 0
 589 00f4 1D4A     		ldr	r2, .L13+40
 590 00f6 1D4B     		ldr	r3, .L13+40
 591 00f8 1B78     		ldrb	r3, [r3]
 592 00fa DBB2     		uxtb	r3, r3
 593 00fc 23F00103 		bic	r3, r3, #1
 594 0100 DBB2     		uxtb	r3, r3
 595 0102 1370     		strb	r3, [r2]
 403:.\Generated_Source\PSoC5/Volume_ADC.c ****     #endif /* Volume_ADC_DEFAULT_INTERNAL_CLK */
 404:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 405:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Disable Modulator Chopping */
 406:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DSM_CR2_REG &= (uint8)~Volume_ADC_DSM_MOD_CHOP_EN;
 596              		.loc 1 406 0
 597 0104 1A4A     		ldr	r2, .L13+44
 598 0106 1A4B     		ldr	r3, .L13+44
 599 0108 1B78     		ldrb	r3, [r3]
 600 010a DBB2     		uxtb	r3, r3
 601 010c 23F00803 		bic	r3, r3, #8
 602 0110 DBB2     		uxtb	r3, r3
 603 0112 1370     		strb	r3, [r2]
 407:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Disable power to charge pump clock */
 408:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_PWRMGR_CHARGE_PUMP_CLK_REG &= (uint8)~Volume_ADC_ACT_PWR_CHARGE_PUMP_CLK_EN;
 604              		.loc 1 408 0
 605 0114 174A     		ldr	r2, .L13+48
 606 0116 174B     		ldr	r3, .L13+48
 607 0118 1B78     		ldrb	r3, [r3]
 608 011a DBB2     		uxtb	r3, r3
 609 011c 23F00103 		bic	r3, r3, #1
 610 0120 DBB2     		uxtb	r3, r3
 611 0122 1370     		strb	r3, [r2]
 409:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_STBY_PWRMGR_CHARGE_PUMP_CLK_REG &= (uint8)~Volume_ADC_STBY_PWR_CHARGE_PUMP_CLK_EN;
 612              		.loc 1 409 0
 613 0124 144A     		ldr	r2, .L13+52
 614 0126 144B     		ldr	r3, .L13+52
 615 0128 1B78     		ldrb	r3, [r3]
 616 012a DBB2     		uxtb	r3, r3
 617 012c 23F00103 		bic	r3, r3, #1
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 19


 618 0130 DBB2     		uxtb	r3, r3
 619 0132 1370     		strb	r3, [r2]
 410:.\Generated_Source\PSoC5/Volume_ADC.c ****     
 411:.\Generated_Source\PSoC5/Volume_ADC.c ****     CyExitCriticalSection(enableInterrupts);
 620              		.loc 1 411 0
 621 0134 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 622 0136 1846     		mov	r0, r3
 623 0138 FFF7FEFF 		bl	CyExitCriticalSection
 412:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 624              		.loc 1 412 0
 625 013c 0837     		adds	r7, r7, #8
 626              		.cfi_def_cfa_offset 8
 627 013e BD46     		mov	sp, r7
 628              		.cfi_def_cfa_register 13
 629              		@ sp needed
 630 0140 80BD     		pop	{r7, pc}
 631              	.L14:
 632 0142 00BF     		.align	2
 633              	.L13:
 634 0144 004E0040 		.word	1073761792
 635 0148 014E0040 		.word	1073761793
 636 014c F8460040 		.word	1073759992
 637 0150 F9460040 		.word	1073759993
 638 0154 91580040 		.word	1073764497
 639 0158 92580040 		.word	1073764498
 640 015c AA430040 		.word	1073759146
 641 0160 BA430040 		.word	1073759162
 642 0164 77580040 		.word	1073764471
 643 0168 A1430040 		.word	1073759137
 644 016c B1430040 		.word	1073759153
 645 0170 82580040 		.word	1073764482
 646 0174 A2430040 		.word	1073759138
 647 0178 B2430040 		.word	1073759154
 648              		.cfi_endproc
 649              	.LFE3:
 650              		.size	Volume_ADC_Stop, .-Volume_ADC_Stop
 651              		.section	.text.Volume_ADC_SetBufferGain,"ax",%progbits
 652              		.align	2
 653              		.global	Volume_ADC_SetBufferGain
 654              		.thumb
 655              		.thumb_func
 656              		.type	Volume_ADC_SetBufferGain, %function
 657              	Volume_ADC_SetBufferGain:
 658              	.LFB4:
 413:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 414:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 415:.\Generated_Source\PSoC5/Volume_ADC.c **** /*******************************************************************************
 416:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_SetBufferGain
 417:.\Generated_Source\PSoC5/Volume_ADC.c **** ********************************************************************************
 418:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 419:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
 420:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Sets input buffer gain.
 421:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 422:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
 423:.\Generated_Source\PSoC5/Volume_ADC.c **** *  gain:  Two bit value to select a gain of 1, 2, 4, or 8.
 424:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 425:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 20


 426:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
 427:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 428:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
 429:.\Generated_Source\PSoC5/Volume_ADC.c **** void Volume_ADC_SetBufferGain(uint8 gain) 
 430:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 659              		.loc 1 430 0
 660              		.cfi_startproc
 661              		@ args = 0, pretend = 0, frame = 16
 662              		@ frame_needed = 1, uses_anonymous_args = 0
 663              		@ link register save eliminated.
 664 0000 80B4     		push	{r7}
 665              		.cfi_def_cfa_offset 4
 666              		.cfi_offset 7, -4
 667 0002 85B0     		sub	sp, sp, #20
 668              		.cfi_def_cfa_offset 24
 669 0004 00AF     		add	r7, sp, #0
 670              		.cfi_def_cfa_register 7
 671 0006 0346     		mov	r3, r0
 672 0008 FB71     		strb	r3, [r7, #7]
 431:.\Generated_Source\PSoC5/Volume_ADC.c ****     uint8 tmpReg;
 432:.\Generated_Source\PSoC5/Volume_ADC.c ****     tmpReg = Volume_ADC_DSM_BUF1_REG & (uint8)~Volume_ADC_DSM_GAIN_MASK;
 673              		.loc 1 432 0
 674 000a 0B4B     		ldr	r3, .L16
 675 000c 1B78     		ldrb	r3, [r3]
 676 000e DBB2     		uxtb	r3, r3
 677 0010 23F00C03 		bic	r3, r3, #12
 678 0014 FB73     		strb	r3, [r7, #15]
 433:.\Generated_Source\PSoC5/Volume_ADC.c ****     tmpReg |= (uint8)(gain << Volume_ADC_DSM_GAIN_SHIFT) & Volume_ADC_DSM_GAIN_MASK;
 679              		.loc 1 433 0
 680 0016 FB79     		ldrb	r3, [r7, #7]
 681 0018 9B00     		lsls	r3, r3, #2
 682 001a DBB2     		uxtb	r3, r3
 683 001c 03F00C03 		and	r3, r3, #12
 684 0020 DAB2     		uxtb	r2, r3
 685 0022 FB7B     		ldrb	r3, [r7, #15]
 686 0024 1343     		orrs	r3, r3, r2
 687 0026 FB73     		strb	r3, [r7, #15]
 434:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DSM_BUF1_REG = tmpReg;
 688              		.loc 1 434 0
 689 0028 034A     		ldr	r2, .L16
 690 002a FB7B     		ldrb	r3, [r7, #15]
 691 002c 1370     		strb	r3, [r2]
 435:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 692              		.loc 1 435 0
 693 002e 1437     		adds	r7, r7, #20
 694              		.cfi_def_cfa_offset 4
 695 0030 BD46     		mov	sp, r7
 696              		.cfi_def_cfa_register 13
 697              		@ sp needed
 698 0032 5DF8047B 		ldr	r7, [sp], #4
 699              		.cfi_restore 7
 700              		.cfi_def_cfa_offset 0
 701 0036 7047     		bx	lr
 702              	.L17:
 703              		.align	2
 704              	.L16:
 705 0038 9B580040 		.word	1073764507
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 21


 706              		.cfi_endproc
 707              	.LFE4:
 708              		.size	Volume_ADC_SetBufferGain, .-Volume_ADC_SetBufferGain
 709              		.section	.text.Volume_ADC_SetCoherency,"ax",%progbits
 710              		.align	2
 711              		.global	Volume_ADC_SetCoherency
 712              		.thumb
 713              		.thumb_func
 714              		.type	Volume_ADC_SetCoherency, %function
 715              	Volume_ADC_SetCoherency:
 716              	.LFB5:
 436:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 437:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 438:.\Generated_Source\PSoC5/Volume_ADC.c **** /*******************************************************************************
 439:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_SetCoherency
 440:.\Generated_Source\PSoC5/Volume_ADC.c **** ********************************************************************************
 441:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 442:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
 443:.\Generated_Source\PSoC5/Volume_ADC.c **** *  This function allows the user to change which of the ADC's 3 word
 444:.\Generated_Source\PSoC5/Volume_ADC.c **** *  result will trigger a coherency unlock. The ADC's result will not be
 445:.\Generated_Source\PSoC5/Volume_ADC.c **** *  updated until the set byte is read either by the ADC or DMA. 
 446:.\Generated_Source\PSoC5/Volume_ADC.c **** *  By default the LSB is the coherency byte for right alignment data format. 
 447:.\Generated_Source\PSoC5/Volume_ADC.c **** *  The middle or high byte is set automatically depend on left alignment 
 448:.\Generated_Source\PSoC5/Volume_ADC.c **** *  configuration for DMA data transfer.
 449:.\Generated_Source\PSoC5/Volume_ADC.c **** *  If DMA or if a custom API requires different byte to be read the last,
 450:.\Generated_Source\PSoC5/Volume_ADC.c **** *  this API should be used to set the last byte of the ADC result that is read. 
 451:.\Generated_Source\PSoC5/Volume_ADC.c **** *  If a multibyte read is performed either by DMA or the ARM processor, the
 452:.\Generated_Source\PSoC5/Volume_ADC.c **** *  coherency can be set to any byte in the last word read.
 453:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 454:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
 455:.\Generated_Source\PSoC5/Volume_ADC.c **** *  coherency:  Two bit value to set the coherency bit.
 456:.\Generated_Source\PSoC5/Volume_ADC.c **** *           00-Coherency checking off
 457:.\Generated_Source\PSoC5/Volume_ADC.c **** *           01-low byte is key byte
 458:.\Generated_Source\PSoC5/Volume_ADC.c **** *           02-middle byte is the key byte
 459:.\Generated_Source\PSoC5/Volume_ADC.c **** *           03-high byte is the key byte
 460:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 461:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
 462:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
 463:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 464:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
 465:.\Generated_Source\PSoC5/Volume_ADC.c **** void Volume_ADC_SetCoherency(uint8 coherency) 
 466:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 717              		.loc 1 466 0
 718              		.cfi_startproc
 719              		@ args = 0, pretend = 0, frame = 16
 720              		@ frame_needed = 1, uses_anonymous_args = 0
 721              		@ link register save eliminated.
 722 0000 80B4     		push	{r7}
 723              		.cfi_def_cfa_offset 4
 724              		.cfi_offset 7, -4
 725 0002 85B0     		sub	sp, sp, #20
 726              		.cfi_def_cfa_offset 24
 727 0004 00AF     		add	r7, sp, #0
 728              		.cfi_def_cfa_register 7
 729 0006 0346     		mov	r3, r0
 730 0008 FB71     		strb	r3, [r7, #7]
 467:.\Generated_Source\PSoC5/Volume_ADC.c ****     uint8 tmpReg;
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 22


 468:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 469:.\Generated_Source\PSoC5/Volume_ADC.c ****     tmpReg = Volume_ADC_DEC_COHER_REG & (uint8)~Volume_ADC_DEC_SAMP_KEY_MASK;
 731              		.loc 1 469 0
 732 000a 0A4B     		ldr	r3, .L19
 733 000c 1B78     		ldrb	r3, [r3]
 734 000e DBB2     		uxtb	r3, r3
 735 0010 23F00303 		bic	r3, r3, #3
 736 0014 FB73     		strb	r3, [r7, #15]
 470:.\Generated_Source\PSoC5/Volume_ADC.c ****     tmpReg |= coherency & Volume_ADC_DEC_SAMP_KEY_MASK;
 737              		.loc 1 470 0
 738 0016 FB79     		ldrb	r3, [r7, #7]
 739 0018 03F00303 		and	r3, r3, #3
 740 001c DAB2     		uxtb	r2, r3
 741 001e FB7B     		ldrb	r3, [r7, #15]
 742 0020 1343     		orrs	r3, r3, r2
 743 0022 FB73     		strb	r3, [r7, #15]
 471:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DEC_COHER_REG = tmpReg;
 744              		.loc 1 471 0
 745 0024 034A     		ldr	r2, .L19
 746 0026 FB7B     		ldrb	r3, [r7, #15]
 747 0028 1370     		strb	r3, [r2]
 472:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 748              		.loc 1 472 0
 749 002a 1437     		adds	r7, r7, #20
 750              		.cfi_def_cfa_offset 4
 751 002c BD46     		mov	sp, r7
 752              		.cfi_def_cfa_register 13
 753              		@ sp needed
 754 002e 5DF8047B 		ldr	r7, [sp], #4
 755              		.cfi_restore 7
 756              		.cfi_def_cfa_offset 0
 757 0032 7047     		bx	lr
 758              	.L20:
 759              		.align	2
 760              	.L19:
 761 0034 144E0040 		.word	1073761812
 762              		.cfi_endproc
 763              	.LFE5:
 764              		.size	Volume_ADC_SetCoherency, .-Volume_ADC_SetCoherency
 765              		.global	__aeabi_ui2f
 766              		.global	__aeabi_fdiv
 767              		.global	__aeabi_fmul
 768              		.global	__aeabi_f2d
 769              		.global	__aeabi_dcmpgt
 770              		.global	__aeabi_f2uiz
 771              		.section	.text.Volume_ADC_SetGCOR,"ax",%progbits
 772              		.align	2
 773              		.global	Volume_ADC_SetGCOR
 774              		.thumb
 775              		.thumb_func
 776              		.type	Volume_ADC_SetGCOR, %function
 777              	Volume_ADC_SetGCOR:
 778              	.LFB6:
 473:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 474:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 475:.\Generated_Source\PSoC5/Volume_ADC.c **** /*******************************************************************************
 476:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_SetGCOR
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 23


 477:.\Generated_Source\PSoC5/Volume_ADC.c **** ********************************************************************************
 478:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 479:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
 480:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Calculates a new GCOR value and writes it into the GCOR register. 
 481:.\Generated_Source\PSoC5/Volume_ADC.c **** *  The GCOR value is a 16-bit value that represents a gain of 0 to 2. 
 482:.\Generated_Source\PSoC5/Volume_ADC.c **** *  The ADC result is multiplied by this value before it is placed in the ADC 
 483:.\Generated_Source\PSoC5/Volume_ADC.c **** *  output registers. The numerical format for the GCOR value is:
 484:.\Generated_Source\PSoC5/Volume_ADC.c **** *  0x0000 -> 0.000
 485:.\Generated_Source\PSoC5/Volume_ADC.c **** *  0x8000 -> 1.000
 486:.\Generated_Source\PSoC5/Volume_ADC.c **** *  0xFFFF -> 1.99997
 487:.\Generated_Source\PSoC5/Volume_ADC.c **** *  When executing the function, the old GCOR value is multiplied by
 488:.\Generated_Source\PSoC5/Volume_ADC.c **** *  gainAdjust and reloaded into the GCOR register.
 489:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 490:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
 491:.\Generated_Source\PSoC5/Volume_ADC.c **** *  gainAdjust:  floating point value to set GCOR registers.
 492:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 493:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
 494:.\Generated_Source\PSoC5/Volume_ADC.c **** *  uint8: 0 - if GCOR value is within the expected range.
 495:.\Generated_Source\PSoC5/Volume_ADC.c **** *         1 - the correction value is outside GCOR value range of
 496:.\Generated_Source\PSoC5/Volume_ADC.c **** *             0.00 to 1.9999.
 497:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 498:.\Generated_Source\PSoC5/Volume_ADC.c **** * Side Effects:  The GVAL register is set to the amount of valid bits in the
 499:.\Generated_Source\PSoC5/Volume_ADC.c **** *                GCOR  register minus one. If GVAL is 15 (0x0F), all 16 bits
 500:.\Generated_Source\PSoC5/Volume_ADC.c **** *                of the GCOR registers will be valid. If for example GVAL is
 501:.\Generated_Source\PSoC5/Volume_ADC.c **** *                11 (0x0B) only 12 bits will be valid. The least 4 bits will
 502:.\Generated_Source\PSoC5/Volume_ADC.c **** *                be lost when the GCOR value is shifted 4 places to the right.
 503:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 504:.\Generated_Source\PSoC5/Volume_ADC.c **** ******************************************************************************/
 505:.\Generated_Source\PSoC5/Volume_ADC.c **** uint8 Volume_ADC_SetGCOR(float32 gainAdjust) 
 506:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 779              		.loc 1 506 0
 780              		.cfi_startproc
 781              		@ args = 0, pretend = 0, frame = 16
 782              		@ frame_needed = 1, uses_anonymous_args = 0
 783 0000 80B5     		push	{r7, lr}
 784              		.cfi_def_cfa_offset 8
 785              		.cfi_offset 7, -8
 786              		.cfi_offset 14, -4
 787 0002 84B0     		sub	sp, sp, #16
 788              		.cfi_def_cfa_offset 24
 789 0004 00AF     		add	r7, sp, #0
 790              		.cfi_def_cfa_register 7
 791 0006 7860     		str	r0, [r7, #4]	@ float
 507:.\Generated_Source\PSoC5/Volume_ADC.c ****     uint16 tmpReg;
 508:.\Generated_Source\PSoC5/Volume_ADC.c ****     uint8 status;
 509:.\Generated_Source\PSoC5/Volume_ADC.c ****     float32 tmpValue;
 510:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 511:.\Generated_Source\PSoC5/Volume_ADC.c ****     tmpReg = Volume_ADC_gcor[Volume_ADC_Config - 1u].gcor;
 792              		.loc 1 511 0
 793 0008 274B     		ldr	r3, .L28+8
 794 000a 1B78     		ldrb	r3, [r3]
 795 000c DBB2     		uxtb	r3, r3
 796 000e 013B     		subs	r3, r3, #1
 797 0010 264A     		ldr	r2, .L28+12
 798 0012 32F82330 		ldrh	r3, [r2, r3, lsl #2]	@ movhi
 799 0016 BB81     		strh	r3, [r7, #12]	@ movhi
 512:.\Generated_Source\PSoC5/Volume_ADC.c ****     tmpValue = ((float32)tmpReg / (float32)Volume_ADC_IDEAL_GAIN_CONST);
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 24


 800              		.loc 1 512 0
 801 0018 BB89     		ldrh	r3, [r7, #12]
 802 001a 1846     		mov	r0, r3
 803 001c FFF7FEFF 		bl	__aeabi_ui2f
 804 0020 0346     		mov	r3, r0
 805 0022 1846     		mov	r0, r3
 806 0024 4FF08E41 		mov	r1, #1191182336
 807 0028 FFF7FEFF 		bl	__aeabi_fdiv
 808 002c 0346     		mov	r3, r0
 809 002e BB60     		str	r3, [r7, #8]	@ float
 513:.\Generated_Source\PSoC5/Volume_ADC.c ****     tmpValue = tmpValue * gainAdjust;
 810              		.loc 1 513 0
 811 0030 B868     		ldr	r0, [r7, #8]	@ float
 812 0032 7968     		ldr	r1, [r7, #4]	@ float
 813 0034 FFF7FEFF 		bl	__aeabi_fmul
 814 0038 0346     		mov	r3, r0
 815 003a BB60     		str	r3, [r7, #8]	@ float
 514:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 515:.\Generated_Source\PSoC5/Volume_ADC.c ****     if (tmpValue > 1.9999)
 816              		.loc 1 515 0
 817 003c B868     		ldr	r0, [r7, #8]	@ float
 818 003e FFF7FEFF 		bl	__aeabi_f2d
 819 0042 0246     		mov	r2, r0
 820 0044 0B46     		mov	r3, r1
 821 0046 1046     		mov	r0, r2
 822 0048 1946     		mov	r1, r3
 823 004a 15A3     		adr	r3, .L28
 824 004c D3E90023 		ldrd	r2, [r3]
 825 0050 FFF7FEFF 		bl	__aeabi_dcmpgt
 826 0054 0346     		mov	r3, r0
 827 0056 002B     		cmp	r3, #0
 828 0058 02D0     		beq	.L27
 516:.\Generated_Source\PSoC5/Volume_ADC.c ****     {
 517:.\Generated_Source\PSoC5/Volume_ADC.c ****         status = 1u;
 829              		.loc 1 517 0
 830 005a 0123     		movs	r3, #1
 831 005c FB73     		strb	r3, [r7, #15]
 832 005e 18E0     		b	.L24
 833              	.L27:
 518:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
 519:.\Generated_Source\PSoC5/Volume_ADC.c ****     else
 520:.\Generated_Source\PSoC5/Volume_ADC.c ****     {
 521:.\Generated_Source\PSoC5/Volume_ADC.c ****         tmpValue *= (float32)Volume_ADC_IDEAL_GAIN_CONST;
 834              		.loc 1 521 0
 835 0060 B868     		ldr	r0, [r7, #8]	@ float
 836 0062 4FF08E41 		mov	r1, #1191182336
 837 0066 FFF7FEFF 		bl	__aeabi_fmul
 838 006a 0346     		mov	r3, r0
 839 006c BB60     		str	r3, [r7, #8]	@ float
 522:.\Generated_Source\PSoC5/Volume_ADC.c **** 		tmpReg = (uint16)tmpValue;
 840              		.loc 1 522 0
 841 006e B868     		ldr	r0, [r7, #8]	@ float
 842 0070 FFF7FEFF 		bl	__aeabi_f2uiz
 843 0074 0346     		mov	r3, r0
 844 0076 BB81     		strh	r3, [r7, #12]	@ movhi
 523:.\Generated_Source\PSoC5/Volume_ADC.c ****         CY_SET_REG16(Volume_ADC_DEC_GCOR_16B_PTR, tmpReg);
 845              		.loc 1 523 0
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 25


 846 0078 0D4A     		ldr	r2, .L28+16
 847 007a BB89     		ldrh	r3, [r7, #12]	@ movhi
 848 007c 1380     		strh	r3, [r2]	@ movhi
 524:.\Generated_Source\PSoC5/Volume_ADC.c ****         /* Update gain array to be used by SelectConfiguration() API */
 525:.\Generated_Source\PSoC5/Volume_ADC.c ****        Volume_ADC_gcor[Volume_ADC_Config - 1u].gcor = tmpReg;
 849              		.loc 1 525 0
 850 007e 0A4B     		ldr	r3, .L28+8
 851 0080 1B78     		ldrb	r3, [r3]
 852 0082 DBB2     		uxtb	r3, r3
 853 0084 013B     		subs	r3, r3, #1
 854 0086 0949     		ldr	r1, .L28+12
 855 0088 BA89     		ldrh	r2, [r7, #12]	@ movhi
 856 008a 21F82320 		strh	r2, [r1, r3, lsl #2]	@ movhi
 526:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 527:.\Generated_Source\PSoC5/Volume_ADC.c ****         status = 0u;
 857              		.loc 1 527 0
 858 008e 0023     		movs	r3, #0
 859 0090 FB73     		strb	r3, [r7, #15]
 860              	.L24:
 528:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 529:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
 530:.\Generated_Source\PSoC5/Volume_ADC.c ****     return(status);
 861              		.loc 1 530 0
 862 0092 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 531:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 863              		.loc 1 531 0
 864 0094 1846     		mov	r0, r3
 865 0096 1037     		adds	r7, r7, #16
 866              		.cfi_def_cfa_offset 8
 867 0098 BD46     		mov	sp, r7
 868              		.cfi_def_cfa_register 13
 869              		@ sp needed
 870 009a 80BD     		pop	{r7, pc}
 871              	.L29:
 872 009c AFF30080 		.align	3
 873              	.L28:
 874 00a0 8F537424 		.word	611603343
 875 00a4 97FFFF3F 		.word	1073741719
 876 00a8 00000000 		.word	Volume_ADC_Config
 877 00ac 04000000 		.word	Volume_ADC_gcor
 878 00b0 0C4E0040 		.word	1073761804
 879              		.cfi_endproc
 880              	.LFE6:
 881              		.size	Volume_ADC_SetGCOR, .-Volume_ADC_SetGCOR
 882 00b4 AFF30080 		.section	.text.Volume_ADC_ReadGCOR,"ax",%progbits
 883              		.align	2
 884              		.global	Volume_ADC_ReadGCOR
 885              		.thumb
 886              		.thumb_func
 887              		.type	Volume_ADC_ReadGCOR, %function
 888              	Volume_ADC_ReadGCOR:
 889              	.LFB7:
 532:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 533:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 534:.\Generated_Source\PSoC5/Volume_ADC.c **** /******************************************************************************
 535:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_ReadGCOR
 536:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 26


 537:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 538:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
 539:.\Generated_Source\PSoC5/Volume_ADC.c **** *  This API returns the current GCOR register value, normalized based on the
 540:.\Generated_Source\PSoC5/Volume_ADC.c **** *  GVAL register settings.
 541:.\Generated_Source\PSoC5/Volume_ADC.c **** *  For example, if the GCOR value is 0x0812 and the GVAL register is set to 
 542:.\Generated_Source\PSoC5/Volume_ADC.c **** *  11 (0x0B) then the returned value will be shifted by for bits to the left.
 543:.\Generated_Source\PSoC5/Volume_ADC.c **** *  (Actual GCOR value = 0x0812, returned value = 0x8120)
 544:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 545:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
 546:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
 547:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 548:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
 549:.\Generated_Source\PSoC5/Volume_ADC.c **** *  uint16:  Normalized GCOR value.
 550:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 551:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
 552:.\Generated_Source\PSoC5/Volume_ADC.c **** uint16 Volume_ADC_ReadGCOR(void) 
 553:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 890              		.loc 1 553 0
 891              		.cfi_startproc
 892              		@ args = 0, pretend = 0, frame = 8
 893              		@ frame_needed = 1, uses_anonymous_args = 0
 894              		@ link register save eliminated.
 895 0000 80B4     		push	{r7}
 896              		.cfi_def_cfa_offset 4
 897              		.cfi_offset 7, -4
 898 0002 83B0     		sub	sp, sp, #12
 899              		.cfi_def_cfa_offset 16
 900 0004 00AF     		add	r7, sp, #0
 901              		.cfi_def_cfa_register 7
 554:.\Generated_Source\PSoC5/Volume_ADC.c ****     uint8 gValue;
 555:.\Generated_Source\PSoC5/Volume_ADC.c ****     uint16 gcorValue;
 556:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 557:.\Generated_Source\PSoC5/Volume_ADC.c ****     gValue = Volume_ADC_DEC_GVAL_REG;
 902              		.loc 1 557 0
 903 0006 0B4B     		ldr	r3, .L33
 904 0008 1B78     		ldrb	r3, [r3]
 905 000a 7B71     		strb	r3, [r7, #5]
 558:.\Generated_Source\PSoC5/Volume_ADC.c ****     gcorValue = CY_GET_REG16(Volume_ADC_DEC_GCOR_16B_PTR);
 906              		.loc 1 558 0
 907 000c 0A4B     		ldr	r3, .L33+4
 908 000e 1B88     		ldrh	r3, [r3]	@ movhi
 909 0010 FB80     		strh	r3, [r7, #6]	@ movhi
 559:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 560:.\Generated_Source\PSoC5/Volume_ADC.c ****     if (gValue < Volume_ADC_MAX_GVAL)
 910              		.loc 1 560 0
 911 0012 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 912 0014 0E2B     		cmp	r3, #14
 913 0016 05D8     		bhi	.L31
 561:.\Generated_Source\PSoC5/Volume_ADC.c ****     {
 562:.\Generated_Source\PSoC5/Volume_ADC.c ****         gcorValue <<= Volume_ADC_MAX_GVAL - gValue;
 914              		.loc 1 562 0
 915 0018 FB88     		ldrh	r3, [r7, #6]
 916 001a 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 917 001c C2F10F02 		rsb	r2, r2, #15
 918 0020 9340     		lsls	r3, r3, r2
 919 0022 FB80     		strh	r3, [r7, #6]	@ movhi
 920              	.L31:
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 27


 563:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
 564:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 565:.\Generated_Source\PSoC5/Volume_ADC.c ****     return gcorValue;
 921              		.loc 1 565 0
 922 0024 FB88     		ldrh	r3, [r7, #6]
 566:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 923              		.loc 1 566 0
 924 0026 1846     		mov	r0, r3
 925 0028 0C37     		adds	r7, r7, #12
 926              		.cfi_def_cfa_offset 4
 927 002a BD46     		mov	sp, r7
 928              		.cfi_def_cfa_register 13
 929              		@ sp needed
 930 002c 5DF8047B 		ldr	r7, [sp], #4
 931              		.cfi_restore 7
 932              		.cfi_def_cfa_offset 0
 933 0030 7047     		bx	lr
 934              	.L34:
 935 0032 00BF     		.align	2
 936              	.L33:
 937 0034 0E4E0040 		.word	1073761806
 938 0038 0C4E0040 		.word	1073761804
 939              		.cfi_endproc
 940              	.LFE7:
 941              		.size	Volume_ADC_ReadGCOR, .-Volume_ADC_ReadGCOR
 942              		.section	.text.Volume_ADC_StartConvert,"ax",%progbits
 943              		.align	2
 944              		.global	Volume_ADC_StartConvert
 945              		.thumb
 946              		.thumb_func
 947              		.type	Volume_ADC_StartConvert, %function
 948              	Volume_ADC_StartConvert:
 949              	.LFB8:
 567:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 568:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 569:.\Generated_Source\PSoC5/Volume_ADC.c **** /*******************************************************************************
 570:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_StartConvert
 571:.\Generated_Source\PSoC5/Volume_ADC.c **** ********************************************************************************
 572:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 573:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
 574:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Forces the ADC to initiate a conversion. If in the "Single Sample"
 575:.\Generated_Source\PSoC5/Volume_ADC.c **** *  mode, one conversion will be performed then the ADC will halt. If in
 576:.\Generated_Source\PSoC5/Volume_ADC.c **** *  one of the other three conversion modes, the ADC will run
 577:.\Generated_Source\PSoC5/Volume_ADC.c **** *  continuously until the ADC_Stop() or ADC_StopConvert() is called.
 578:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 579:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
 580:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
 581:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 582:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
 583:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
 584:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 585:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
 586:.\Generated_Source\PSoC5/Volume_ADC.c **** void Volume_ADC_StartConvert(void) 
 587:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 950              		.loc 1 587 0
 951              		.cfi_startproc
 952              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 28


 953              		@ frame_needed = 1, uses_anonymous_args = 0
 954              		@ link register save eliminated.
 955 0000 80B4     		push	{r7}
 956              		.cfi_def_cfa_offset 4
 957              		.cfi_offset 7, -4
 958 0002 00AF     		add	r7, sp, #0
 959              		.cfi_def_cfa_register 7
 588:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Start the conversion */
 589:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DEC_CR_REG |= Volume_ADC_DEC_START_CONV;
 960              		.loc 1 589 0
 961 0004 054A     		ldr	r2, .L36
 962 0006 054B     		ldr	r3, .L36
 963 0008 1B78     		ldrb	r3, [r3]
 964 000a DBB2     		uxtb	r3, r3
 965 000c 43F00103 		orr	r3, r3, #1
 966 0010 DBB2     		uxtb	r3, r3
 967 0012 1370     		strb	r3, [r2]
 590:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 968              		.loc 1 590 0
 969 0014 BD46     		mov	sp, r7
 970              		.cfi_def_cfa_register 13
 971              		@ sp needed
 972 0016 5DF8047B 		ldr	r7, [sp], #4
 973              		.cfi_restore 7
 974              		.cfi_def_cfa_offset 0
 975 001a 7047     		bx	lr
 976              	.L37:
 977              		.align	2
 978              	.L36:
 979 001c 004E0040 		.word	1073761792
 980              		.cfi_endproc
 981              	.LFE8:
 982              		.size	Volume_ADC_StartConvert, .-Volume_ADC_StartConvert
 983              		.section	.text.Volume_ADC_StopConvert,"ax",%progbits
 984              		.align	2
 985              		.global	Volume_ADC_StopConvert
 986              		.thumb
 987              		.thumb_func
 988              		.type	Volume_ADC_StopConvert, %function
 989              	Volume_ADC_StopConvert:
 990              	.LFB9:
 591:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 592:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 593:.\Generated_Source\PSoC5/Volume_ADC.c **** /*******************************************************************************
 594:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_StopConvert
 595:.\Generated_Source\PSoC5/Volume_ADC.c **** ********************************************************************************
 596:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 597:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
 598:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Forces the ADC to stop all conversions. If the ADC is in the middle of a
 599:.\Generated_Source\PSoC5/Volume_ADC.c **** *  conversion, the ADC will be reset and not provide a result for that partial
 600:.\Generated_Source\PSoC5/Volume_ADC.c **** *  conversion.
 601:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 602:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
 603:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
 604:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 605:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
 606:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 29


 607:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 608:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
 609:.\Generated_Source\PSoC5/Volume_ADC.c **** void Volume_ADC_StopConvert(void) 
 610:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 991              		.loc 1 610 0
 992              		.cfi_startproc
 993              		@ args = 0, pretend = 0, frame = 0
 994              		@ frame_needed = 1, uses_anonymous_args = 0
 995              		@ link register save eliminated.
 996 0000 80B4     		push	{r7}
 997              		.cfi_def_cfa_offset 4
 998              		.cfi_offset 7, -4
 999 0002 00AF     		add	r7, sp, #0
 1000              		.cfi_def_cfa_register 7
 611:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Stop all conversions */
 612:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DEC_CR_REG &= (uint8)~Volume_ADC_DEC_START_CONV;
 1001              		.loc 1 612 0
 1002 0004 054A     		ldr	r2, .L39
 1003 0006 054B     		ldr	r3, .L39
 1004 0008 1B78     		ldrb	r3, [r3]
 1005 000a DBB2     		uxtb	r3, r3
 1006 000c 23F00103 		bic	r3, r3, #1
 1007 0010 DBB2     		uxtb	r3, r3
 1008 0012 1370     		strb	r3, [r2]
 613:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 1009              		.loc 1 613 0
 1010 0014 BD46     		mov	sp, r7
 1011              		.cfi_def_cfa_register 13
 1012              		@ sp needed
 1013 0016 5DF8047B 		ldr	r7, [sp], #4
 1014              		.cfi_restore 7
 1015              		.cfi_def_cfa_offset 0
 1016 001a 7047     		bx	lr
 1017              	.L40:
 1018              		.align	2
 1019              	.L39:
 1020 001c 004E0040 		.word	1073761792
 1021              		.cfi_endproc
 1022              	.LFE9:
 1023              		.size	Volume_ADC_StopConvert, .-Volume_ADC_StopConvert
 1024              		.section	.text.Volume_ADC_IsEndConversion,"ax",%progbits
 1025              		.align	2
 1026              		.global	Volume_ADC_IsEndConversion
 1027              		.thumb
 1028              		.thumb_func
 1029              		.type	Volume_ADC_IsEndConversion, %function
 1030              	Volume_ADC_IsEndConversion:
 1031              	.LFB10:
 614:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 615:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 616:.\Generated_Source\PSoC5/Volume_ADC.c **** /*******************************************************************************
 617:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_IsEndConversion
 618:.\Generated_Source\PSoC5/Volume_ADC.c **** ********************************************************************************
 619:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 620:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
 621:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Checks the status that the most recently started conversion has completed.
 622:.\Generated_Source\PSoC5/Volume_ADC.c **** *  The status is cleared by any of ADC_GetResult8(), ADC_GetResult16() or 
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 30


 623:.\Generated_Source\PSoC5/Volume_ADC.c **** *  ADC_GetResult32() API.
 624:.\Generated_Source\PSoC5/Volume_ADC.c **** *  This function provides the programmer with two options. In one mode this 
 625:.\Generated_Source\PSoC5/Volume_ADC.c **** *  function immediately returns with the conversion status. In the other mode,
 626:.\Generated_Source\PSoC5/Volume_ADC.c **** *  the function does not return (blocking) until the conversion has completed.
 627:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 628:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
 629:.\Generated_Source\PSoC5/Volume_ADC.c **** *  retMode: Check conversion return mode. See the following table for options.
 630:.\Generated_Source\PSoC5/Volume_ADC.c **** *   Volume_ADC_RETURN_STATUS -   Immediately returns conversion result
 631:.\Generated_Source\PSoC5/Volume_ADC.c **** *                                      status.
 632:.\Generated_Source\PSoC5/Volume_ADC.c **** *   Volume_ADC_WAIT_FOR_RESULT - Does not return until ADC conversion
 633:.\Generated_Source\PSoC5/Volume_ADC.c **** *                                      is complete.
 634:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 635:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
 636:.\Generated_Source\PSoC5/Volume_ADC.c **** *  If a nonzero value is returned, the last conversion has completed.
 637:.\Generated_Source\PSoC5/Volume_ADC.c **** *  If the returned value is zero, the ADC is still calculating the last result.
 638:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 639:.\Generated_Source\PSoC5/Volume_ADC.c **** * Global variables:
 640:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Volume_ADC_convDone:  Used to check whether conversion is complete
 641:.\Generated_Source\PSoC5/Volume_ADC.c **** *  or not for single sample mode with resolution is above 16
 642:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 643:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
 644:.\Generated_Source\PSoC5/Volume_ADC.c **** uint8 Volume_ADC_IsEndConversion(uint8 retMode) 
 645:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 1032              		.loc 1 645 0
 1033              		.cfi_startproc
 1034              		@ args = 0, pretend = 0, frame = 16
 1035              		@ frame_needed = 1, uses_anonymous_args = 0
 1036              		@ link register save eliminated.
 1037 0000 80B4     		push	{r7}
 1038              		.cfi_def_cfa_offset 4
 1039              		.cfi_offset 7, -4
 1040 0002 85B0     		sub	sp, sp, #20
 1041              		.cfi_def_cfa_offset 24
 1042 0004 00AF     		add	r7, sp, #0
 1043              		.cfi_def_cfa_register 7
 1044 0006 0346     		mov	r3, r0
 1045 0008 FB71     		strb	r3, [r7, #7]
 1046              	.L45:
 646:.\Generated_Source\PSoC5/Volume_ADC.c ****     uint8 status;
 647:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 648:.\Generated_Source\PSoC5/Volume_ADC.c ****     do
 649:.\Generated_Source\PSoC5/Volume_ADC.c ****     {
 650:.\Generated_Source\PSoC5/Volume_ADC.c ****         /* Check for stop convert if conversion mode is Single Sample with
 651:.\Generated_Source\PSoC5/Volume_ADC.c ****         *   resolution above 16 bit
 652:.\Generated_Source\PSoC5/Volume_ADC.c ****         */
 653:.\Generated_Source\PSoC5/Volume_ADC.c ****         if(Volume_ADC_stopConversion != 0u)
 1047              		.loc 1 653 0
 1048 000a 0E4B     		ldr	r3, .L47
 1049 000c 1B78     		ldrb	r3, [r3]
 1050 000e DBB2     		uxtb	r3, r3
 1051 0010 002B     		cmp	r3, #0
 1052 0012 03D0     		beq	.L42
 654:.\Generated_Source\PSoC5/Volume_ADC.c ****         {
 655:.\Generated_Source\PSoC5/Volume_ADC.c ****             status = Volume_ADC_convDone;
 1053              		.loc 1 655 0
 1054 0014 0C4B     		ldr	r3, .L47+4
 1055 0016 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 31


 1056 0018 FB73     		strb	r3, [r7, #15]
 1057 001a 05E0     		b	.L43
 1058              	.L42:
 656:.\Generated_Source\PSoC5/Volume_ADC.c ****         }
 657:.\Generated_Source\PSoC5/Volume_ADC.c ****         else
 658:.\Generated_Source\PSoC5/Volume_ADC.c ****         {
 659:.\Generated_Source\PSoC5/Volume_ADC.c ****             status = Volume_ADC_DEC_SR_REG & Volume_ADC_DEC_CONV_DONE;
 1059              		.loc 1 659 0
 1060 001c 0B4B     		ldr	r3, .L47+8
 1061 001e 1B78     		ldrb	r3, [r3]
 1062 0020 DBB2     		uxtb	r3, r3
 1063 0022 03F00103 		and	r3, r3, #1
 1064 0026 FB73     		strb	r3, [r7, #15]
 1065              	.L43:
 660:.\Generated_Source\PSoC5/Volume_ADC.c ****         }
 661:.\Generated_Source\PSoC5/Volume_ADC.c ****     }while((status != Volume_ADC_DEC_CONV_DONE) && (retMode == Volume_ADC_WAIT_FOR_RESULT));
 1066              		.loc 1 661 0
 1067 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1068 002a 012B     		cmp	r3, #1
 1069 002c 02D0     		beq	.L44
 1070              		.loc 1 661 0 is_stmt 0 discriminator 1
 1071 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1072 0030 002B     		cmp	r3, #0
 1073 0032 EAD0     		beq	.L45
 1074              	.L44:
 662:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 663:.\Generated_Source\PSoC5/Volume_ADC.c ****     return(status);
 1075              		.loc 1 663 0 is_stmt 1
 1076 0034 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 664:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 1077              		.loc 1 664 0
 1078 0036 1846     		mov	r0, r3
 1079 0038 1437     		adds	r7, r7, #20
 1080              		.cfi_def_cfa_offset 4
 1081 003a BD46     		mov	sp, r7
 1082              		.cfi_def_cfa_register 13
 1083              		@ sp needed
 1084 003c 5DF8047B 		ldr	r7, [sp], #4
 1085              		.cfi_restore 7
 1086              		.cfi_def_cfa_offset 0
 1087 0040 7047     		bx	lr
 1088              	.L48:
 1089 0042 00BF     		.align	2
 1090              	.L47:
 1091 0044 00000000 		.word	Volume_ADC_stopConversion
 1092 0048 00000000 		.word	Volume_ADC_convDone
 1093 004c 014E0040 		.word	1073761793
 1094              		.cfi_endproc
 1095              	.LFE10:
 1096              		.size	Volume_ADC_IsEndConversion, .-Volume_ADC_IsEndConversion
 1097              		.section	.text.Volume_ADC_GetResult8,"ax",%progbits
 1098              		.align	2
 1099              		.global	Volume_ADC_GetResult8
 1100              		.thumb
 1101              		.thumb_func
 1102              		.type	Volume_ADC_GetResult8, %function
 1103              	Volume_ADC_GetResult8:
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 32


 1104              	.LFB11:
 665:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 666:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 667:.\Generated_Source\PSoC5/Volume_ADC.c **** /*******************************************************************************
 668:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_GetResult8
 669:.\Generated_Source\PSoC5/Volume_ADC.c **** ********************************************************************************
 670:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 671:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
 672:.\Generated_Source\PSoC5/Volume_ADC.c **** *  This function returns the result of an 8-bit conversion. If the
 673:.\Generated_Source\PSoC5/Volume_ADC.c **** *  resolution is set greater than 8-bits, the LSB of the result will be
 674:.\Generated_Source\PSoC5/Volume_ADC.c **** *  returned. When the ADC is configured for 8-bit single ended mode,
 675:.\Generated_Source\PSoC5/Volume_ADC.c **** *  the ADC_GetResult16() function should be used instead. This
 676:.\Generated_Source\PSoC5/Volume_ADC.c **** *  function returns only signed 8-bit values. The maximum positive
 677:.\Generated_Source\PSoC5/Volume_ADC.c **** *  signed 8-bit value is 127, but in singled ended 8-bit mode, the
 678:.\Generated_Source\PSoC5/Volume_ADC.c **** *  maximum positive value is 255.
 679:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 680:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
 681:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
 682:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 683:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
 684:.\Generated_Source\PSoC5/Volume_ADC.c **** *  int8: The LSB of the last ADC conversion.
 685:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 686:.\Generated_Source\PSoC5/Volume_ADC.c **** * Global variables:
 687:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Volume_ADC_convDone:  Cleared in single sample mode with resolution
 688:.\Generated_Source\PSoC5/Volume_ADC.c **** *                              above 16 bits
 689:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 690:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
 691:.\Generated_Source\PSoC5/Volume_ADC.c **** int8 Volume_ADC_GetResult8( void ) 
 692:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 1105              		.loc 1 692 0
 1106              		.cfi_startproc
 1107              		@ args = 0, pretend = 0, frame = 8
 1108              		@ frame_needed = 1, uses_anonymous_args = 0
 1109              		@ link register save eliminated.
 1110 0000 80B4     		push	{r7}
 1111              		.cfi_def_cfa_offset 4
 1112              		.cfi_offset 7, -4
 1113 0002 83B0     		sub	sp, sp, #12
 1114              		.cfi_def_cfa_offset 16
 1115 0004 00AF     		add	r7, sp, #0
 1116              		.cfi_def_cfa_register 7
 693:.\Generated_Source\PSoC5/Volume_ADC.c ****     int8 result;
 694:.\Generated_Source\PSoC5/Volume_ADC.c ****     uint8 coherency;
 695:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 696:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Read active coherency configuration */
 697:.\Generated_Source\PSoC5/Volume_ADC.c ****     coherency = Volume_ADC_DEC_COHER_REG & Volume_ADC_DEC_SAMP_KEY_MASK;
 1117              		.loc 1 697 0
 1118 0006 124B     		ldr	r3, .L54
 1119 0008 1B78     		ldrb	r3, [r3]
 1120 000a DBB2     		uxtb	r3, r3
 1121 000c 03F00303 		and	r3, r3, #3
 1122 0010 FB71     		strb	r3, [r7, #7]
 698:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 699:.\Generated_Source\PSoC5/Volume_ADC.c ****     result = (int8)Volume_ADC_DEC_SAMP_REG;
 1123              		.loc 1 699 0
 1124 0012 104B     		ldr	r3, .L54+4
 1125 0014 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 33


 1126 0016 DBB2     		uxtb	r3, r3
 1127 0018 BB71     		strb	r3, [r7, #6]
 700:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 701:.\Generated_Source\PSoC5/Volume_ADC.c ****     if(coherency == Volume_ADC_DEC_SAMP_KEY_MID)
 1128              		.loc 1 701 0
 1129 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1130 001c 022B     		cmp	r3, #2
 1131 001e 02D1     		bne	.L50
 702:.\Generated_Source\PSoC5/Volume_ADC.c ****     {   /* Dummy read of the middle byte to unlock the coherency */
 703:.\Generated_Source\PSoC5/Volume_ADC.c ****         (void)Volume_ADC_DEC_SAMPM_REG;
 1132              		.loc 1 703 0
 1133 0020 0D4B     		ldr	r3, .L54+8
 1134 0022 1B78     		ldrb	r3, [r3]
 1135 0024 04E0     		b	.L51
 1136              	.L50:
 704:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
 705:.\Generated_Source\PSoC5/Volume_ADC.c ****     else  if(coherency == Volume_ADC_DEC_SAMP_KEY_HIGH)
 1137              		.loc 1 705 0
 1138 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1139 0028 032B     		cmp	r3, #3
 1140 002a 01D1     		bne	.L51
 706:.\Generated_Source\PSoC5/Volume_ADC.c ****     {   /* Dummy read of the MSB byte to unlock the coherency */
 707:.\Generated_Source\PSoC5/Volume_ADC.c ****         (void)Volume_ADC_DEC_SAMPH_REG;
 1141              		.loc 1 707 0
 1142 002c 0B4B     		ldr	r3, .L54+12
 1143 002e 1B78     		ldrb	r3, [r3]
 1144              	.L51:
 708:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
 709:.\Generated_Source\PSoC5/Volume_ADC.c ****     else /*No action required for other coherency */
 710:.\Generated_Source\PSoC5/Volume_ADC.c ****     {
 711:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
 712:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Clear conversion complete status in Single Sample mode with resolution above 16 bit */
 713:.\Generated_Source\PSoC5/Volume_ADC.c ****     if(Volume_ADC_stopConversion != 0u)
 1145              		.loc 1 713 0
 1146 0030 0B4B     		ldr	r3, .L54+16
 1147 0032 1B78     		ldrb	r3, [r3]
 1148 0034 DBB2     		uxtb	r3, r3
 1149 0036 002B     		cmp	r3, #0
 1150 0038 02D0     		beq	.L52
 714:.\Generated_Source\PSoC5/Volume_ADC.c ****     {
 715:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_convDone = 0u;
 1151              		.loc 1 715 0
 1152 003a 0A4B     		ldr	r3, .L54+20
 1153 003c 0022     		movs	r2, #0
 1154 003e 1A70     		strb	r2, [r3]
 1155              	.L52:
 716:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
 717:.\Generated_Source\PSoC5/Volume_ADC.c ****     return (result);
 1156              		.loc 1 717 0
 1157 0040 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1158 0042 5BB2     		sxtb	r3, r3
 718:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 1159              		.loc 1 718 0
 1160 0044 1846     		mov	r0, r3
 1161 0046 0C37     		adds	r7, r7, #12
 1162              		.cfi_def_cfa_offset 4
 1163 0048 BD46     		mov	sp, r7
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 34


 1164              		.cfi_def_cfa_register 13
 1165              		@ sp needed
 1166 004a 5DF8047B 		ldr	r7, [sp], #4
 1167              		.cfi_restore 7
 1168              		.cfi_def_cfa_offset 0
 1169 004e 7047     		bx	lr
 1170              	.L55:
 1171              		.align	2
 1172              	.L54:
 1173 0050 144E0040 		.word	1073761812
 1174 0054 104E0040 		.word	1073761808
 1175 0058 114E0040 		.word	1073761809
 1176 005c 124E0040 		.word	1073761810
 1177 0060 00000000 		.word	Volume_ADC_stopConversion
 1178 0064 00000000 		.word	Volume_ADC_convDone
 1179              		.cfi_endproc
 1180              	.LFE11:
 1181              		.size	Volume_ADC_GetResult8, .-Volume_ADC_GetResult8
 1182              		.section	.text.Volume_ADC_GetResult16,"ax",%progbits
 1183              		.align	2
 1184              		.global	Volume_ADC_GetResult16
 1185              		.thumb
 1186              		.thumb_func
 1187              		.type	Volume_ADC_GetResult16, %function
 1188              	Volume_ADC_GetResult16:
 1189              	.LFB12:
 719:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 720:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 721:.\Generated_Source\PSoC5/Volume_ADC.c **** /*******************************************************************************
 722:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_GetResult16
 723:.\Generated_Source\PSoC5/Volume_ADC.c **** ********************************************************************************
 724:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 725:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
 726:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Returns a 16-bit result for a conversion with a result that has a
 727:.\Generated_Source\PSoC5/Volume_ADC.c **** *  resolution of 8 to 16 bits. If the resolution is set greater than 16-bits,
 728:.\Generated_Source\PSoC5/Volume_ADC.c **** *  it will return the 16 least significant bits of the result. When the ADC
 729:.\Generated_Source\PSoC5/Volume_ADC.c **** *  is configured for 16-bit single ended mode, the ADC_GetResult32()
 730:.\Generated_Source\PSoC5/Volume_ADC.c **** *  function should be used instead. This function returns only signed
 731:.\Generated_Source\PSoC5/Volume_ADC.c **** *  16-bit result, which allows a maximum positive value of 32767, not 65535.
 732:.\Generated_Source\PSoC5/Volume_ADC.c **** *  This function supports different coherency settings.
 733:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 734:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
 735:.\Generated_Source\PSoC5/Volume_ADC.c **** *   void
 736:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 737:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
 738:.\Generated_Source\PSoC5/Volume_ADC.c **** *  int16:  ADC result.
 739:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 740:.\Generated_Source\PSoC5/Volume_ADC.c **** * Global variables:
 741:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Volume_ADC_convDone:  Cleared in single sample mode with resolution
 742:.\Generated_Source\PSoC5/Volume_ADC.c **** *                              above 16 bits
 743:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 744:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
 745:.\Generated_Source\PSoC5/Volume_ADC.c **** int16 Volume_ADC_GetResult16(void) 
 746:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 1190              		.loc 1 746 0
 1191              		.cfi_startproc
 1192              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 35


 1193              		@ frame_needed = 1, uses_anonymous_args = 0
 1194              		@ link register save eliminated.
 1195 0000 80B4     		push	{r7}
 1196              		.cfi_def_cfa_offset 4
 1197              		.cfi_offset 7, -4
 1198 0002 83B0     		sub	sp, sp, #12
 1199              		.cfi_def_cfa_offset 16
 1200 0004 00AF     		add	r7, sp, #0
 1201              		.cfi_def_cfa_register 7
 747:.\Generated_Source\PSoC5/Volume_ADC.c ****     uint16 result;
 748:.\Generated_Source\PSoC5/Volume_ADC.c ****     uint8 coherency;
 749:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 750:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Read active coherency configuration */
 751:.\Generated_Source\PSoC5/Volume_ADC.c ****     coherency = Volume_ADC_DEC_COHER_REG & Volume_ADC_DEC_SAMP_KEY_MASK;
 1202              		.loc 1 751 0
 1203 0006 174B     		ldr	r3, .L61
 1204 0008 1B78     		ldrb	r3, [r3]
 1205 000a DBB2     		uxtb	r3, r3
 1206 000c 03F00303 		and	r3, r3, #3
 1207 0010 7B71     		strb	r3, [r7, #5]
 752:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 753:.\Generated_Source\PSoC5/Volume_ADC.c ****     if(coherency <= Volume_ADC_DEC_SAMP_KEY_LOW)
 1208              		.loc 1 753 0
 1209 0012 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 1210 0014 012B     		cmp	r3, #1
 1211 0016 03D8     		bhi	.L57
 754:.\Generated_Source\PSoC5/Volume_ADC.c ****     {   /*  Use default method to read result registers i.e. LSB byte read at the end*/
 755:.\Generated_Source\PSoC5/Volume_ADC.c ****         #if (CY_PSOC3)
 756:.\Generated_Source\PSoC5/Volume_ADC.c ****             result = Volume_ADC_DEC_SAMPM_REG;
 757:.\Generated_Source\PSoC5/Volume_ADC.c ****             result = (result << 8u) | Volume_ADC_DEC_SAMP_REG;
 758:.\Generated_Source\PSoC5/Volume_ADC.c ****         #else
 759:.\Generated_Source\PSoC5/Volume_ADC.c ****             result = (CY_GET_REG16(Volume_ADC_DEC_SAMP_16B_PTR));
 1212              		.loc 1 759 0
 1213 0018 134B     		ldr	r3, .L61+4
 1214 001a 1B88     		ldrh	r3, [r3]	@ movhi
 1215 001c FB80     		strh	r3, [r7, #6]	@ movhi
 1216 001e 11E0     		b	.L58
 1217              	.L57:
 760:.\Generated_Source\PSoC5/Volume_ADC.c ****         #endif /* CY_PSOC3 */
 761:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
 762:.\Generated_Source\PSoC5/Volume_ADC.c ****     else /* MID or HIGH */
 763:.\Generated_Source\PSoC5/Volume_ADC.c ****     {   /* Read middle byte at the end */
 764:.\Generated_Source\PSoC5/Volume_ADC.c ****         #if (CY_PSOC3)
 765:.\Generated_Source\PSoC5/Volume_ADC.c ****             result = (CY_GET_REG16(Volume_ADC_DEC_SAMP_16B_PTR));
 766:.\Generated_Source\PSoC5/Volume_ADC.c ****         #else
 767:.\Generated_Source\PSoC5/Volume_ADC.c ****             result = Volume_ADC_DEC_SAMP_REG;
 1218              		.loc 1 767 0
 1219 0020 114B     		ldr	r3, .L61+4
 1220 0022 1B78     		ldrb	r3, [r3]
 1221 0024 DBB2     		uxtb	r3, r3
 1222 0026 FB80     		strh	r3, [r7, #6]	@ movhi
 768:.\Generated_Source\PSoC5/Volume_ADC.c ****             result |=  (uint16)((uint16)Volume_ADC_DEC_SAMPM_REG << 8u);
 1223              		.loc 1 768 0
 1224 0028 104B     		ldr	r3, .L61+8
 1225 002a 1B78     		ldrb	r3, [r3]
 1226 002c DBB2     		uxtb	r3, r3
 1227 002e 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 36


 1228 0030 1B02     		lsls	r3, r3, #8
 1229 0032 9AB2     		uxth	r2, r3
 1230 0034 FB88     		ldrh	r3, [r7, #6]	@ movhi
 1231 0036 1343     		orrs	r3, r3, r2
 1232 0038 FB80     		strh	r3, [r7, #6]	@ movhi
 769:.\Generated_Source\PSoC5/Volume_ADC.c ****         #endif /* CY_PSOC3 */
 770:.\Generated_Source\PSoC5/Volume_ADC.c ****         if(coherency == Volume_ADC_DEC_SAMP_KEY_HIGH)
 1233              		.loc 1 770 0
 1234 003a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 1235 003c 032B     		cmp	r3, #3
 1236 003e 01D1     		bne	.L58
 771:.\Generated_Source\PSoC5/Volume_ADC.c ****         {   /* Dummy read of the MSB byte to unlock the coherency */
 772:.\Generated_Source\PSoC5/Volume_ADC.c ****             (void)Volume_ADC_DEC_SAMPH_REG;
 1237              		.loc 1 772 0
 1238 0040 0B4B     		ldr	r3, .L61+12
 1239 0042 1B78     		ldrb	r3, [r3]
 1240              	.L58:
 773:.\Generated_Source\PSoC5/Volume_ADC.c ****         }
 774:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
 775:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Clear conversion complete status in Single Sample mode with resolution above 16 bit */
 776:.\Generated_Source\PSoC5/Volume_ADC.c ****     if(Volume_ADC_stopConversion != 0u)
 1241              		.loc 1 776 0
 1242 0044 0B4B     		ldr	r3, .L61+16
 1243 0046 1B78     		ldrb	r3, [r3]
 1244 0048 DBB2     		uxtb	r3, r3
 1245 004a 002B     		cmp	r3, #0
 1246 004c 02D0     		beq	.L59
 777:.\Generated_Source\PSoC5/Volume_ADC.c ****     {
 778:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_convDone = 0u;
 1247              		.loc 1 778 0
 1248 004e 0A4B     		ldr	r3, .L61+20
 1249 0050 0022     		movs	r2, #0
 1250 0052 1A70     		strb	r2, [r3]
 1251              	.L59:
 779:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
 780:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 781:.\Generated_Source\PSoC5/Volume_ADC.c ****     return ((int16)result);
 1252              		.loc 1 781 0
 1253 0054 FB88     		ldrh	r3, [r7, #6]
 1254 0056 1BB2     		sxth	r3, r3
 782:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 1255              		.loc 1 782 0
 1256 0058 1846     		mov	r0, r3
 1257 005a 0C37     		adds	r7, r7, #12
 1258              		.cfi_def_cfa_offset 4
 1259 005c BD46     		mov	sp, r7
 1260              		.cfi_def_cfa_register 13
 1261              		@ sp needed
 1262 005e 5DF8047B 		ldr	r7, [sp], #4
 1263              		.cfi_restore 7
 1264              		.cfi_def_cfa_offset 0
 1265 0062 7047     		bx	lr
 1266              	.L62:
 1267              		.align	2
 1268              	.L61:
 1269 0064 144E0040 		.word	1073761812
 1270 0068 104E0040 		.word	1073761808
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 37


 1271 006c 114E0040 		.word	1073761809
 1272 0070 124E0040 		.word	1073761810
 1273 0074 00000000 		.word	Volume_ADC_stopConversion
 1274 0078 00000000 		.word	Volume_ADC_convDone
 1275              		.cfi_endproc
 1276              	.LFE12:
 1277              		.size	Volume_ADC_GetResult16, .-Volume_ADC_GetResult16
 1278              		.section	.text.Volume_ADC_GetResult32,"ax",%progbits
 1279              		.align	2
 1280              		.global	Volume_ADC_GetResult32
 1281              		.thumb
 1282              		.thumb_func
 1283              		.type	Volume_ADC_GetResult32, %function
 1284              	Volume_ADC_GetResult32:
 1285              	.LFB13:
 783:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 784:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 785:.\Generated_Source\PSoC5/Volume_ADC.c **** /*******************************************************************************
 786:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_GetResult32
 787:.\Generated_Source\PSoC5/Volume_ADC.c **** ********************************************************************************
 788:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 789:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
 790:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Returns a 32-bit result for a conversion with a result that has a
 791:.\Generated_Source\PSoC5/Volume_ADC.c **** *  resolution of 8 to 20 bits.
 792:.\Generated_Source\PSoC5/Volume_ADC.c **** *  This function supports different coherency settings.
 793:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 794:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
 795:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
 796:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 797:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
 798:.\Generated_Source\PSoC5/Volume_ADC.c **** *  int32: Result of the last ADC conversion.
 799:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 800:.\Generated_Source\PSoC5/Volume_ADC.c **** * Global variables:
 801:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Volume_ADC_convDone:  Cleared in single sample mode with resolution
 802:.\Generated_Source\PSoC5/Volume_ADC.c **** *                              above 16 bits
 803:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 804:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
 805:.\Generated_Source\PSoC5/Volume_ADC.c **** int32 Volume_ADC_GetResult32(void) 
 806:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 1286              		.loc 1 806 0
 1287              		.cfi_startproc
 1288              		@ args = 0, pretend = 0, frame = 8
 1289              		@ frame_needed = 1, uses_anonymous_args = 0
 1290              		@ link register save eliminated.
 1291 0000 80B4     		push	{r7}
 1292              		.cfi_def_cfa_offset 4
 1293              		.cfi_offset 7, -4
 1294 0002 83B0     		sub	sp, sp, #12
 1295              		.cfi_def_cfa_offset 16
 1296 0004 00AF     		add	r7, sp, #0
 1297              		.cfi_def_cfa_register 7
 807:.\Generated_Source\PSoC5/Volume_ADC.c ****     uint32 result;
 808:.\Generated_Source\PSoC5/Volume_ADC.c ****     uint8 coherency;
 809:.\Generated_Source\PSoC5/Volume_ADC.c ****     #if (CY_PSOC3)
 810:.\Generated_Source\PSoC5/Volume_ADC.c **** 	    uint16 tmp;
 811:.\Generated_Source\PSoC5/Volume_ADC.c ****     #endif /* CY_PSOC3 */
 812:.\Generated_Source\PSoC5/Volume_ADC.c **** 
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 38


 813:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Read active coherency configuration */
 814:.\Generated_Source\PSoC5/Volume_ADC.c ****     coherency = Volume_ADC_DEC_COHER_REG & Volume_ADC_DEC_SAMP_KEY_MASK;
 1298              		.loc 1 814 0
 1299 0006 224B     		ldr	r3, .L69
 1300 0008 1B78     		ldrb	r3, [r3]
 1301 000a DBB2     		uxtb	r3, r3
 1302 000c 03F00303 		and	r3, r3, #3
 1303 0010 FB70     		strb	r3, [r7, #3]
 815:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 816:.\Generated_Source\PSoC5/Volume_ADC.c ****     if(coherency <= Volume_ADC_DEC_SAMP_KEY_LOW)
 1304              		.loc 1 816 0
 1305 0012 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1306 0014 012B     		cmp	r3, #1
 1307 0016 0BD8     		bhi	.L64
 817:.\Generated_Source\PSoC5/Volume_ADC.c ****     {   /*  Use default method to read result registers i.e. LSB byte read at the end*/
 818:.\Generated_Source\PSoC5/Volume_ADC.c ****         #if (CY_PSOC3)
 819:.\Generated_Source\PSoC5/Volume_ADC.c ****             result = Volume_ADC_DEC_SAMPH_REG;
 820:.\Generated_Source\PSoC5/Volume_ADC.c ****             if((result & 0x80u) != 0u)
 821:.\Generated_Source\PSoC5/Volume_ADC.c ****             {   /* Sign extend */
 822:.\Generated_Source\PSoC5/Volume_ADC.c ****                 result |= 0xFF00u;
 823:.\Generated_Source\PSoC5/Volume_ADC.c ****             }
 824:.\Generated_Source\PSoC5/Volume_ADC.c ****             result = (result << 8u) | Volume_ADC_DEC_SAMPM_REG;
 825:.\Generated_Source\PSoC5/Volume_ADC.c ****             result = (result << 8u) | Volume_ADC_DEC_SAMP_REG;
 826:.\Generated_Source\PSoC5/Volume_ADC.c ****         #else
 827:.\Generated_Source\PSoC5/Volume_ADC.c ****             result = CY_GET_REG16(Volume_ADC_DEC_SAMPH_16B_PTR);
 1308              		.loc 1 827 0
 1309 0018 1E4B     		ldr	r3, .L69+4
 1310 001a 1B88     		ldrh	r3, [r3]	@ movhi
 1311 001c 9BB2     		uxth	r3, r3
 1312 001e 7B60     		str	r3, [r7, #4]
 828:.\Generated_Source\PSoC5/Volume_ADC.c ****             result = (result << 16u) | (CY_GET_REG16(Volume_ADC_DEC_SAMP_16B_PTR));
 1313              		.loc 1 828 0
 1314 0020 7B68     		ldr	r3, [r7, #4]
 1315 0022 1B04     		lsls	r3, r3, #16
 1316 0024 1C4A     		ldr	r2, .L69+8
 1317 0026 1288     		ldrh	r2, [r2]	@ movhi
 1318 0028 92B2     		uxth	r2, r2
 1319 002a 1343     		orrs	r3, r3, r2
 1320 002c 7B60     		str	r3, [r7, #4]
 1321 002e 20E0     		b	.L65
 1322              	.L64:
 829:.\Generated_Source\PSoC5/Volume_ADC.c ****         #endif /* CY_PSOC3 */
 830:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
 831:.\Generated_Source\PSoC5/Volume_ADC.c ****     else if(coherency == Volume_ADC_DEC_SAMP_KEY_MID)
 1323              		.loc 1 831 0
 1324 0030 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1325 0032 022B     		cmp	r3, #2
 1326 0034 12D1     		bne	.L66
 832:.\Generated_Source\PSoC5/Volume_ADC.c ****     {   /* Read middle byte at the end */
 833:.\Generated_Source\PSoC5/Volume_ADC.c ****         #if (CY_PSOC3)
 834:.\Generated_Source\PSoC5/Volume_ADC.c ****             result = Volume_ADC_DEC_SAMPH_REG;
 835:.\Generated_Source\PSoC5/Volume_ADC.c ****             if((result & 0x80u) != 0u)
 836:.\Generated_Source\PSoC5/Volume_ADC.c ****             {   /* Sign extend */
 837:.\Generated_Source\PSoC5/Volume_ADC.c ****                 result |= 0xFF00u;
 838:.\Generated_Source\PSoC5/Volume_ADC.c ****             }
 839:.\Generated_Source\PSoC5/Volume_ADC.c ****             result = (result << 16u) | (CY_GET_REG16(Volume_ADC_DEC_SAMP_16B_PTR));
 840:.\Generated_Source\PSoC5/Volume_ADC.c ****         #else
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 39


 841:.\Generated_Source\PSoC5/Volume_ADC.c ****             result = CY_GET_REG16(Volume_ADC_DEC_SAMPH_16B_PTR);
 1327              		.loc 1 841 0
 1328 0036 174B     		ldr	r3, .L69+4
 1329 0038 1B88     		ldrh	r3, [r3]	@ movhi
 1330 003a 9BB2     		uxth	r3, r3
 1331 003c 7B60     		str	r3, [r7, #4]
 842:.\Generated_Source\PSoC5/Volume_ADC.c ****             result = (result << 16u) | Volume_ADC_DEC_SAMP_REG;
 1332              		.loc 1 842 0
 1333 003e 7B68     		ldr	r3, [r7, #4]
 1334 0040 1B04     		lsls	r3, r3, #16
 1335 0042 154A     		ldr	r2, .L69+8
 1336 0044 1278     		ldrb	r2, [r2]
 1337 0046 D2B2     		uxtb	r2, r2
 1338 0048 1343     		orrs	r3, r3, r2
 1339 004a 7B60     		str	r3, [r7, #4]
 843:.\Generated_Source\PSoC5/Volume_ADC.c ****             result |=  (uint32)((uint32)Volume_ADC_DEC_SAMPM_REG << 8u);
 1340              		.loc 1 843 0
 1341 004c 134B     		ldr	r3, .L69+12
 1342 004e 1B78     		ldrb	r3, [r3]
 1343 0050 DBB2     		uxtb	r3, r3
 1344 0052 1B02     		lsls	r3, r3, #8
 1345 0054 7A68     		ldr	r2, [r7, #4]
 1346 0056 1343     		orrs	r3, r3, r2
 1347 0058 7B60     		str	r3, [r7, #4]
 1348 005a 0AE0     		b	.L65
 1349              	.L66:
 844:.\Generated_Source\PSoC5/Volume_ADC.c ****         #endif /* CY_PSOC3 */
 845:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
 846:.\Generated_Source\PSoC5/Volume_ADC.c ****     else /*Volume_ADC_DEC_SAMP_KEY_HIGH */
 847:.\Generated_Source\PSoC5/Volume_ADC.c ****     {
 848:.\Generated_Source\PSoC5/Volume_ADC.c ****         /* Read MSB byte at the end */
 849:.\Generated_Source\PSoC5/Volume_ADC.c ****         #if (CY_PSOC3)
 850:.\Generated_Source\PSoC5/Volume_ADC.c ****             result = CY_GET_REG16(Volume_ADC_DEC_SAMP_16B_PTR);
 851:.\Generated_Source\PSoC5/Volume_ADC.c **** 			tmp = Volume_ADC_DEC_SAMPH_REG;
 852:.\Generated_Source\PSoC5/Volume_ADC.c ****             if((tmp & 0x80u) != 0u)
 853:.\Generated_Source\PSoC5/Volume_ADC.c ****             {   /* Sign extend */
 854:.\Generated_Source\PSoC5/Volume_ADC.c ****                 tmp |= 0xFF00u;
 855:.\Generated_Source\PSoC5/Volume_ADC.c ****             }
 856:.\Generated_Source\PSoC5/Volume_ADC.c ****             result |= (uint32)tmp << 16u;
 857:.\Generated_Source\PSoC5/Volume_ADC.c ****         #else
 858:.\Generated_Source\PSoC5/Volume_ADC.c ****             result = CY_GET_REG16(Volume_ADC_DEC_SAMP_16B_PTR);
 1350              		.loc 1 858 0
 1351 005c 0E4B     		ldr	r3, .L69+8
 1352 005e 1B88     		ldrh	r3, [r3]	@ movhi
 1353 0060 9BB2     		uxth	r3, r3
 1354 0062 7B60     		str	r3, [r7, #4]
 859:.\Generated_Source\PSoC5/Volume_ADC.c ****             result |= (uint32)((uint32)CY_GET_REG16(Volume_ADC_DEC_SAMPH_16B_PTR) << 16u);
 1355              		.loc 1 859 0
 1356 0064 0B4B     		ldr	r3, .L69+4
 1357 0066 1B88     		ldrh	r3, [r3]	@ movhi
 1358 0068 9BB2     		uxth	r3, r3
 1359 006a 1B04     		lsls	r3, r3, #16
 1360 006c 7A68     		ldr	r2, [r7, #4]
 1361 006e 1343     		orrs	r3, r3, r2
 1362 0070 7B60     		str	r3, [r7, #4]
 1363              	.L65:
 860:.\Generated_Source\PSoC5/Volume_ADC.c ****         #endif /* CY_PSOC3 */
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 40


 861:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
 862:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Clear conversion complete status in Single Sample mode with resolution above 16 bit */
 863:.\Generated_Source\PSoC5/Volume_ADC.c ****     if(Volume_ADC_stopConversion != 0u)
 1364              		.loc 1 863 0
 1365 0072 0B4B     		ldr	r3, .L69+16
 1366 0074 1B78     		ldrb	r3, [r3]
 1367 0076 DBB2     		uxtb	r3, r3
 1368 0078 002B     		cmp	r3, #0
 1369 007a 02D0     		beq	.L67
 864:.\Generated_Source\PSoC5/Volume_ADC.c ****     {
 865:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_convDone = 0u;
 1370              		.loc 1 865 0
 1371 007c 094B     		ldr	r3, .L69+20
 1372 007e 0022     		movs	r2, #0
 1373 0080 1A70     		strb	r2, [r3]
 1374              	.L67:
 866:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
 867:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 868:.\Generated_Source\PSoC5/Volume_ADC.c ****     return ((int32)result);
 1375              		.loc 1 868 0
 1376 0082 7B68     		ldr	r3, [r7, #4]
 869:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 1377              		.loc 1 869 0
 1378 0084 1846     		mov	r0, r3
 1379 0086 0C37     		adds	r7, r7, #12
 1380              		.cfi_def_cfa_offset 4
 1381 0088 BD46     		mov	sp, r7
 1382              		.cfi_def_cfa_register 13
 1383              		@ sp needed
 1384 008a 5DF8047B 		ldr	r7, [sp], #4
 1385              		.cfi_restore 7
 1386              		.cfi_def_cfa_offset 0
 1387 008e 7047     		bx	lr
 1388              	.L70:
 1389              		.align	2
 1390              	.L69:
 1391 0090 144E0040 		.word	1073761812
 1392 0094 124E0040 		.word	1073761810
 1393 0098 104E0040 		.word	1073761808
 1394 009c 114E0040 		.word	1073761809
 1395 00a0 00000000 		.word	Volume_ADC_stopConversion
 1396 00a4 00000000 		.word	Volume_ADC_convDone
 1397              		.cfi_endproc
 1398              	.LFE13:
 1399              		.size	Volume_ADC_GetResult32, .-Volume_ADC_GetResult32
 1400              		.section	.text.Volume_ADC_SetOffset,"ax",%progbits
 1401              		.align	2
 1402              		.global	Volume_ADC_SetOffset
 1403              		.thumb
 1404              		.thumb_func
 1405              		.type	Volume_ADC_SetOffset, %function
 1406              	Volume_ADC_SetOffset:
 1407              	.LFB14:
 870:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 871:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 872:.\Generated_Source\PSoC5/Volume_ADC.c **** /*******************************************************************************
 873:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_SetOffset
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 41


 874:.\Generated_Source\PSoC5/Volume_ADC.c **** ********************************************************************************
 875:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 876:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
 877:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Sets the ADC offset which is used by the functions ADC_CountsTo_uVolts, 
 878:.\Generated_Source\PSoC5/Volume_ADC.c **** *  ADC_CountsTo_mVolts, and ADC_CountsTo_Volts to subtract the offset from the 
 879:.\Generated_Source\PSoC5/Volume_ADC.c **** *  given reading before calculating the voltage conversion.
 880:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 881:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
 882:.\Generated_Source\PSoC5/Volume_ADC.c **** *  int32:  This value is a measured value when the inputs are shorted or 
 883:.\Generated_Source\PSoC5/Volume_ADC.c **** *          connected to the same input voltage.
 884:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 885:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
 886:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
 887:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 888:.\Generated_Source\PSoC5/Volume_ADC.c **** * Global variables:
 889:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Volume_ADC_Offset:  Modified to set the user provided offset. This
 890:.\Generated_Source\PSoC5/Volume_ADC.c **** *  variable is used for offset calibration purpose.
 891:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 892:.\Generated_Source\PSoC5/Volume_ADC.c **** * Side Effects:
 893:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Affects the Volume_ADC_CountsTo_Volts,
 894:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Volume_ADC_CountsTo_mVolts, Volume_ADC_CountsTo_uVolts functions
 895:.\Generated_Source\PSoC5/Volume_ADC.c **** *  by subtracting the given offset.
 896:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 897:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
 898:.\Generated_Source\PSoC5/Volume_ADC.c **** void Volume_ADC_SetOffset(int32 offset) 
 899:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 1408              		.loc 1 899 0
 1409              		.cfi_startproc
 1410              		@ args = 0, pretend = 0, frame = 8
 1411              		@ frame_needed = 1, uses_anonymous_args = 0
 1412              		@ link register save eliminated.
 1413 0000 80B4     		push	{r7}
 1414              		.cfi_def_cfa_offset 4
 1415              		.cfi_offset 7, -4
 1416 0002 83B0     		sub	sp, sp, #12
 1417              		.cfi_def_cfa_offset 16
 1418 0004 00AF     		add	r7, sp, #0
 1419              		.cfi_def_cfa_register 7
 1420 0006 7860     		str	r0, [r7, #4]
 900:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 901:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_Offset = offset;
 1421              		.loc 1 901 0
 1422 0008 034A     		ldr	r2, .L72
 1423 000a 7B68     		ldr	r3, [r7, #4]
 1424 000c 1360     		str	r3, [r2]
 902:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 1425              		.loc 1 902 0
 1426 000e 0C37     		adds	r7, r7, #12
 1427              		.cfi_def_cfa_offset 4
 1428 0010 BD46     		mov	sp, r7
 1429              		.cfi_def_cfa_register 13
 1430              		@ sp needed
 1431 0012 5DF8047B 		ldr	r7, [sp], #4
 1432              		.cfi_restore 7
 1433              		.cfi_def_cfa_offset 0
 1434 0016 7047     		bx	lr
 1435              	.L73:
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 42


 1436              		.align	2
 1437              	.L72:
 1438 0018 00000000 		.word	Volume_ADC_Offset
 1439              		.cfi_endproc
 1440              	.LFE14:
 1441              		.size	Volume_ADC_SetOffset, .-Volume_ADC_SetOffset
 1442              		.section	.text.Volume_ADC_SetGain,"ax",%progbits
 1443              		.align	2
 1444              		.global	Volume_ADC_SetGain
 1445              		.thumb
 1446              		.thumb_func
 1447              		.type	Volume_ADC_SetGain, %function
 1448              	Volume_ADC_SetGain:
 1449              	.LFB15:
 903:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 904:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 905:.\Generated_Source\PSoC5/Volume_ADC.c **** /*******************************************************************************
 906:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_SetGain
 907:.\Generated_Source\PSoC5/Volume_ADC.c **** ********************************************************************************
 908:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 909:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
 910:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Sets the ADC gain in counts per volt for the voltage conversion
 911:.\Generated_Source\PSoC5/Volume_ADC.c **** *  functions below. This value is set by default by the reference and
 912:.\Generated_Source\PSoC5/Volume_ADC.c **** *  input range settings. It should only be used to further calibrate the
 913:.\Generated_Source\PSoC5/Volume_ADC.c **** *  ADC with a known input or if an external reference is used. This
 914:.\Generated_Source\PSoC5/Volume_ADC.c **** *  function may also be used to calibrate an entire signal chain, not
 915:.\Generated_Source\PSoC5/Volume_ADC.c **** *  just the ADC.
 916:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 917:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
 918:.\Generated_Source\PSoC5/Volume_ADC.c **** *  int32: ADC gain in counts per volt.
 919:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 920:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
 921:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
 922:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 923:.\Generated_Source\PSoC5/Volume_ADC.c **** * Global variables:
 924:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Volume_ADC_CountsPerVolt:  modified to set the ADC gain in counts
 925:.\Generated_Source\PSoC5/Volume_ADC.c **** *   per volt.
 926:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 927:.\Generated_Source\PSoC5/Volume_ADC.c **** * Side Effects:
 928:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Affects the Volume_ADC_CountsTo_Volts,
 929:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Volume_ADC_CountsTo_mVolts, Volume_ADC_CountsTo_uVolts functions
 930:.\Generated_Source\PSoC5/Volume_ADC.c **** *  supplying the correct conversion between ADC counts and voltage.
 931:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 932:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
 933:.\Generated_Source\PSoC5/Volume_ADC.c **** void Volume_ADC_SetGain(int32 adcGain) 
 934:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 1450              		.loc 1 934 0
 1451              		.cfi_startproc
 1452              		@ args = 0, pretend = 0, frame = 8
 1453              		@ frame_needed = 1, uses_anonymous_args = 0
 1454              		@ link register save eliminated.
 1455 0000 80B4     		push	{r7}
 1456              		.cfi_def_cfa_offset 4
 1457              		.cfi_offset 7, -4
 1458 0002 83B0     		sub	sp, sp, #12
 1459              		.cfi_def_cfa_offset 16
 1460 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 43


 1461              		.cfi_def_cfa_register 7
 1462 0006 7860     		str	r0, [r7, #4]
 935:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_CountsPerVolt = adcGain;
 1463              		.loc 1 935 0
 1464 0008 034A     		ldr	r2, .L75
 1465 000a 7B68     		ldr	r3, [r7, #4]
 1466 000c 1360     		str	r3, [r2]
 936:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 1467              		.loc 1 936 0
 1468 000e 0C37     		adds	r7, r7, #12
 1469              		.cfi_def_cfa_offset 4
 1470 0010 BD46     		mov	sp, r7
 1471              		.cfi_def_cfa_register 13
 1472              		@ sp needed
 1473 0012 5DF8047B 		ldr	r7, [sp], #4
 1474              		.cfi_restore 7
 1475              		.cfi_def_cfa_offset 0
 1476 0016 7047     		bx	lr
 1477              	.L76:
 1478              		.align	2
 1479              	.L75:
 1480 0018 00000000 		.word	Volume_ADC_CountsPerVolt
 1481              		.cfi_endproc
 1482              	.LFE15:
 1483              		.size	Volume_ADC_SetGain, .-Volume_ADC_SetGain
 1484              		.section	.text.Volume_ADC_CountsTo_mVolts,"ax",%progbits
 1485              		.align	2
 1486              		.global	Volume_ADC_CountsTo_mVolts
 1487              		.thumb
 1488              		.thumb_func
 1489              		.type	Volume_ADC_CountsTo_mVolts, %function
 1490              	Volume_ADC_CountsTo_mVolts:
 1491              	.LFB16:
 937:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 938:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 939:.\Generated_Source\PSoC5/Volume_ADC.c **** /*******************************************************************************
 940:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_CountsTo_mVolts
 941:.\Generated_Source\PSoC5/Volume_ADC.c **** ********************************************************************************
 942:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 943:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
 944:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Converts the ADC counts output to mVolts as a 16-bit integer. For
 945:.\Generated_Source\PSoC5/Volume_ADC.c **** *  example, if the ADC measured 0.534 volts, the return value would
 946:.\Generated_Source\PSoC5/Volume_ADC.c **** *  be 534 mVolts.
 947:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 948:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
 949:.\Generated_Source\PSoC5/Volume_ADC.c **** *  int32: adcCounts Result from the ADC conversion.
 950:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 951:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
 952:.\Generated_Source\PSoC5/Volume_ADC.c **** *  int16:  Result in mVolts
 953:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 954:.\Generated_Source\PSoC5/Volume_ADC.c **** * Global variables:
 955:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Volume_ADC_CountsPerVolt:  used to convert ADC counts to mVolts.
 956:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Volume_ADC_Offset:  Used as the offset while converting ADC counts
 957:.\Generated_Source\PSoC5/Volume_ADC.c **** *   to mVolts.
 958:.\Generated_Source\PSoC5/Volume_ADC.c **** *
 959:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
 960:.\Generated_Source\PSoC5/Volume_ADC.c **** int16 Volume_ADC_CountsTo_mVolts(int32 adcCounts) 
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 44


 961:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 1492              		.loc 1 961 0
 1493              		.cfi_startproc
 1494              		@ args = 0, pretend = 0, frame = 16
 1495              		@ frame_needed = 1, uses_anonymous_args = 0
 1496              		@ link register save eliminated.
 1497 0000 80B4     		push	{r7}
 1498              		.cfi_def_cfa_offset 4
 1499              		.cfi_offset 7, -4
 1500 0002 85B0     		sub	sp, sp, #20
 1501              		.cfi_def_cfa_offset 24
 1502 0004 00AF     		add	r7, sp, #0
 1503              		.cfi_def_cfa_register 7
 1504 0006 7860     		str	r0, [r7, #4]
 962:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 963:.\Generated_Source\PSoC5/Volume_ADC.c ****     int16 mVolts;
 964:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 965:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Convert adcCounts to the right align if left option selected */
 966:.\Generated_Source\PSoC5/Volume_ADC.c ****     #if(Volume_ADC_CFG1_DEC_DIV != 0)
 967:.\Generated_Source\PSoC5/Volume_ADC.c ****         if(Volume_ADC_Config == Volume_ADC_CFG1)
 968:.\Generated_Source\PSoC5/Volume_ADC.c ****         {
 969:.\Generated_Source\PSoC5/Volume_ADC.c ****             adcCounts /= Volume_ADC_CFG1_DEC_DIV;
 970:.\Generated_Source\PSoC5/Volume_ADC.c ****         }
 971:.\Generated_Source\PSoC5/Volume_ADC.c ****     #endif /* Volume_ADC_CFG1_DEC_DIV */
 972:.\Generated_Source\PSoC5/Volume_ADC.c ****     #if((Volume_ADC_CFG2_DEC_DIV != 0) && (Volume_ADC_DEFAULT_NUM_CONFIGS > 1))
 973:.\Generated_Source\PSoC5/Volume_ADC.c ****         if(Volume_ADC_Config == Volume_ADC_CFG2)
 974:.\Generated_Source\PSoC5/Volume_ADC.c ****         {
 975:.\Generated_Source\PSoC5/Volume_ADC.c ****             adcCounts /= Volume_ADC_CFG2_DEC_DIV;
 976:.\Generated_Source\PSoC5/Volume_ADC.c ****         }
 977:.\Generated_Source\PSoC5/Volume_ADC.c ****     #endif /* Volume_ADC_CFG2_DEC_DIV */
 978:.\Generated_Source\PSoC5/Volume_ADC.c ****     #if((Volume_ADC_CFG3_DEC_DIV != 0) && (Volume_ADC_DEFAULT_NUM_CONFIGS > 2))
 979:.\Generated_Source\PSoC5/Volume_ADC.c ****         if(Volume_ADC_Config == Volume_ADC_CFG3)
 980:.\Generated_Source\PSoC5/Volume_ADC.c ****         {
 981:.\Generated_Source\PSoC5/Volume_ADC.c ****             adcCounts /= Volume_ADC_CFG3_DEC_DIV;
 982:.\Generated_Source\PSoC5/Volume_ADC.c ****         }
 983:.\Generated_Source\PSoC5/Volume_ADC.c ****     #endif /* Volume_ADC_CFG2_DEC_DIV */
 984:.\Generated_Source\PSoC5/Volume_ADC.c ****     #if((Volume_ADC_CFG4_DEC_DIV != 0) && (Volume_ADC_DEFAULT_NUM_CONFIGS > 3))
 985:.\Generated_Source\PSoC5/Volume_ADC.c ****         if(Volume_ADC_Config == Volume_ADC_CFG4)
 986:.\Generated_Source\PSoC5/Volume_ADC.c ****         {
 987:.\Generated_Source\PSoC5/Volume_ADC.c ****             adcCounts /= Volume_ADC_CFG4_DEC_DIV;
 988:.\Generated_Source\PSoC5/Volume_ADC.c ****         }
 989:.\Generated_Source\PSoC5/Volume_ADC.c ****     #endif /* Volume_ADC_CFG2_DEC_DIV */
 990:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 991:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Subtract ADC offset */
 992:.\Generated_Source\PSoC5/Volume_ADC.c ****     adcCounts -= Volume_ADC_Offset;
 1505              		.loc 1 992 0
 1506 0008 0B4B     		ldr	r3, .L79
 1507 000a 1B68     		ldr	r3, [r3]
 1508 000c 7A68     		ldr	r2, [r7, #4]
 1509 000e D31A     		subs	r3, r2, r3
 1510 0010 7B60     		str	r3, [r7, #4]
 993:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 994:.\Generated_Source\PSoC5/Volume_ADC.c ****     mVolts = (int16)(( adcCounts * Volume_ADC_1MV_COUNTS ) / Volume_ADC_CountsPerVolt) ;
 1511              		.loc 1 994 0
 1512 0012 7B68     		ldr	r3, [r7, #4]
 1513 0014 4FF47A72 		mov	r2, #1000
 1514 0018 02FB03F2 		mul	r2, r2, r3
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 45


 1515 001c 074B     		ldr	r3, .L79+4
 1516 001e 1B68     		ldr	r3, [r3]
 1517 0020 92FBF3F3 		sdiv	r3, r2, r3
 1518 0024 FB81     		strh	r3, [r7, #14]	@ movhi
 995:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 996:.\Generated_Source\PSoC5/Volume_ADC.c ****     return(mVolts);
 1519              		.loc 1 996 0
 1520 0026 FB89     		ldrh	r3, [r7, #14]
 1521 0028 1BB2     		sxth	r3, r3
 997:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 1522              		.loc 1 997 0
 1523 002a 1846     		mov	r0, r3
 1524 002c 1437     		adds	r7, r7, #20
 1525              		.cfi_def_cfa_offset 4
 1526 002e BD46     		mov	sp, r7
 1527              		.cfi_def_cfa_register 13
 1528              		@ sp needed
 1529 0030 5DF8047B 		ldr	r7, [sp], #4
 1530              		.cfi_restore 7
 1531              		.cfi_def_cfa_offset 0
 1532 0034 7047     		bx	lr
 1533              	.L80:
 1534 0036 00BF     		.align	2
 1535              	.L79:
 1536 0038 00000000 		.word	Volume_ADC_Offset
 1537 003c 00000000 		.word	Volume_ADC_CountsPerVolt
 1538              		.cfi_endproc
 1539              	.LFE16:
 1540              		.size	Volume_ADC_CountsTo_mVolts, .-Volume_ADC_CountsTo_mVolts
 1541              		.global	__aeabi_i2f
 1542              		.section	.text.Volume_ADC_CountsTo_Volts,"ax",%progbits
 1543              		.align	2
 1544              		.global	Volume_ADC_CountsTo_Volts
 1545              		.thumb
 1546              		.thumb_func
 1547              		.type	Volume_ADC_CountsTo_Volts, %function
 1548              	Volume_ADC_CountsTo_Volts:
 1549              	.LFB17:
 998:.\Generated_Source\PSoC5/Volume_ADC.c **** 
 999:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1000:.\Generated_Source\PSoC5/Volume_ADC.c **** /*******************************************************************************
1001:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_CountsTo_Volts
1002:.\Generated_Source\PSoC5/Volume_ADC.c **** ********************************************************************************
1003:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1004:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
1005:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Converts the ADC output to Volts as a floating point number. For
1006:.\Generated_Source\PSoC5/Volume_ADC.c **** *  example, if the ADC measure a voltage of 1.2345 Volts, the
1007:.\Generated_Source\PSoC5/Volume_ADC.c **** *  returned result would be +1.2345 Volts.
1008:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1009:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
1010:.\Generated_Source\PSoC5/Volume_ADC.c **** *  int32 adcCounts:  Result from the ADC conversion.
1011:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1012:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
1013:.\Generated_Source\PSoC5/Volume_ADC.c **** *  float32: Result in Volts
1014:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1015:.\Generated_Source\PSoC5/Volume_ADC.c **** * Global variables:
1016:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Volume_ADC_CountsPerVolt:  used to convert to Volts.
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 46


1017:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Volume_ADC_Offset:  Used as the offset while converting ADC counts
1018:.\Generated_Source\PSoC5/Volume_ADC.c **** *   to Volts.
1019:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1020:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
1021:.\Generated_Source\PSoC5/Volume_ADC.c **** float32 Volume_ADC_CountsTo_Volts(int32 adcCounts) 
1022:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 1550              		.loc 1 1022 0
 1551              		.cfi_startproc
 1552              		@ args = 0, pretend = 0, frame = 16
 1553              		@ frame_needed = 1, uses_anonymous_args = 0
 1554 0000 90B5     		push	{r4, r7, lr}
 1555              		.cfi_def_cfa_offset 12
 1556              		.cfi_offset 4, -12
 1557              		.cfi_offset 7, -8
 1558              		.cfi_offset 14, -4
 1559 0002 85B0     		sub	sp, sp, #20
 1560              		.cfi_def_cfa_offset 32
 1561 0004 00AF     		add	r7, sp, #0
 1562              		.cfi_def_cfa_register 7
 1563 0006 7860     		str	r0, [r7, #4]
1023:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1024:.\Generated_Source\PSoC5/Volume_ADC.c ****     float32 Volts;
1025:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1026:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Convert adcCounts to the right align if left option selected */
1027:.\Generated_Source\PSoC5/Volume_ADC.c ****     #if(Volume_ADC_CFG1_DEC_DIV != 0)
1028:.\Generated_Source\PSoC5/Volume_ADC.c ****         if(Volume_ADC_Config == Volume_ADC_CFG1)
1029:.\Generated_Source\PSoC5/Volume_ADC.c ****         {
1030:.\Generated_Source\PSoC5/Volume_ADC.c ****             adcCounts /= Volume_ADC_CFG1_DEC_DIV;
1031:.\Generated_Source\PSoC5/Volume_ADC.c ****         }
1032:.\Generated_Source\PSoC5/Volume_ADC.c ****     #endif /* Volume_ADC_CFG1_DEC_DIV */
1033:.\Generated_Source\PSoC5/Volume_ADC.c ****     #if((Volume_ADC_CFG2_DEC_DIV != 0) && (Volume_ADC_DEFAULT_NUM_CONFIGS > 1))
1034:.\Generated_Source\PSoC5/Volume_ADC.c ****         if(Volume_ADC_Config == Volume_ADC_CFG2)
1035:.\Generated_Source\PSoC5/Volume_ADC.c ****         {
1036:.\Generated_Source\PSoC5/Volume_ADC.c ****             adcCounts /= Volume_ADC_CFG2_DEC_DIV;
1037:.\Generated_Source\PSoC5/Volume_ADC.c ****         }
1038:.\Generated_Source\PSoC5/Volume_ADC.c ****     #endif /* Volume_ADC_CFG2_DEC_DIV */
1039:.\Generated_Source\PSoC5/Volume_ADC.c ****     #if((Volume_ADC_CFG3_DEC_DIV != 0) && (Volume_ADC_DEFAULT_NUM_CONFIGS > 2))
1040:.\Generated_Source\PSoC5/Volume_ADC.c ****         if(Volume_ADC_Config == Volume_ADC_CFG3)
1041:.\Generated_Source\PSoC5/Volume_ADC.c ****         {
1042:.\Generated_Source\PSoC5/Volume_ADC.c ****             adcCounts /= Volume_ADC_CFG3_DEC_DIV;
1043:.\Generated_Source\PSoC5/Volume_ADC.c ****         }
1044:.\Generated_Source\PSoC5/Volume_ADC.c ****     #endif /* Volume_ADC_CFG2_DEC_DIV */
1045:.\Generated_Source\PSoC5/Volume_ADC.c ****     #if((Volume_ADC_CFG4_DEC_DIV != 0) && (Volume_ADC_DEFAULT_NUM_CONFIGS > 3))
1046:.\Generated_Source\PSoC5/Volume_ADC.c ****         if(Volume_ADC_Config == Volume_ADC_CFG4)
1047:.\Generated_Source\PSoC5/Volume_ADC.c ****         {
1048:.\Generated_Source\PSoC5/Volume_ADC.c ****             adcCounts /= Volume_ADC_CFG4_DEC_DIV;
1049:.\Generated_Source\PSoC5/Volume_ADC.c ****         }
1050:.\Generated_Source\PSoC5/Volume_ADC.c ****     #endif /* Volume_ADC_CFG2_DEC_DIV */
1051:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1052:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Subtract ADC offset */
1053:.\Generated_Source\PSoC5/Volume_ADC.c ****     adcCounts -= Volume_ADC_Offset;
 1564              		.loc 1 1053 0
 1565 0008 0C4B     		ldr	r3, .L83
 1566 000a 1B68     		ldr	r3, [r3]
 1567 000c 7A68     		ldr	r2, [r7, #4]
 1568 000e D31A     		subs	r3, r2, r3
 1569 0010 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 47


1054:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1055:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volts = (float32)adcCounts / (float32)Volume_ADC_CountsPerVolt;
 1570              		.loc 1 1055 0
 1571 0012 7868     		ldr	r0, [r7, #4]
 1572 0014 FFF7FEFF 		bl	__aeabi_i2f
 1573 0018 0446     		mov	r4, r0
 1574 001a 094B     		ldr	r3, .L83+4
 1575 001c 1B68     		ldr	r3, [r3]
 1576 001e 1846     		mov	r0, r3
 1577 0020 FFF7FEFF 		bl	__aeabi_i2f
 1578 0024 0346     		mov	r3, r0
 1579 0026 2046     		mov	r0, r4
 1580 0028 1946     		mov	r1, r3
 1581 002a FFF7FEFF 		bl	__aeabi_fdiv
 1582 002e 0346     		mov	r3, r0
 1583 0030 FB60     		str	r3, [r7, #12]	@ float
1056:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1057:.\Generated_Source\PSoC5/Volume_ADC.c ****     return( Volts );
 1584              		.loc 1 1057 0
 1585 0032 FB68     		ldr	r3, [r7, #12]	@ float
1058:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 1586              		.loc 1 1058 0
 1587 0034 1846     		mov	r0, r3
 1588 0036 1437     		adds	r7, r7, #20
 1589              		.cfi_def_cfa_offset 12
 1590 0038 BD46     		mov	sp, r7
 1591              		.cfi_def_cfa_register 13
 1592              		@ sp needed
 1593 003a 90BD     		pop	{r4, r7, pc}
 1594              	.L84:
 1595              		.align	2
 1596              	.L83:
 1597 003c 00000000 		.word	Volume_ADC_Offset
 1598 0040 00000000 		.word	Volume_ADC_CountsPerVolt
 1599              		.cfi_endproc
 1600              	.LFE17:
 1601              		.size	Volume_ADC_CountsTo_Volts, .-Volume_ADC_CountsTo_Volts
 1602              		.section	.text.Volume_ADC_CountsTo_uVolts,"ax",%progbits
 1603              		.align	2
 1604              		.global	Volume_ADC_CountsTo_uVolts
 1605              		.thumb
 1606              		.thumb_func
 1607              		.type	Volume_ADC_CountsTo_uVolts, %function
 1608              	Volume_ADC_CountsTo_uVolts:
 1609              	.LFB18:
1059:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1060:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1061:.\Generated_Source\PSoC5/Volume_ADC.c **** /*******************************************************************************
1062:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_CountsTo_uVolts
1063:.\Generated_Source\PSoC5/Volume_ADC.c **** ********************************************************************************
1064:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1065:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
1066:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Converts the ADC output to uVolts as a 32-bit integer. For example,
1067:.\Generated_Source\PSoC5/Volume_ADC.c **** *  if the ADC measured -0.02345 Volts, the return value would be -23450 uVolts.
1068:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1069:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
1070:.\Generated_Source\PSoC5/Volume_ADC.c **** *  int32 adcCounts: Result from the ADC conversion.
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 48


1071:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1072:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
1073:.\Generated_Source\PSoC5/Volume_ADC.c **** *  int32:  Result in uVolts
1074:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1075:.\Generated_Source\PSoC5/Volume_ADC.c **** * Global variables:
1076:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Volume_ADC_CountsPerVolt:  used to convert ADC counts to mVolts.
1077:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Volume_ADC_Offset:  Used as the offset while converting ADC counts
1078:.\Generated_Source\PSoC5/Volume_ADC.c **** *   to mVolts.
1079:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1080:.\Generated_Source\PSoC5/Volume_ADC.c **** * Theory:
1081:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Care must be taken to not exceed the maximum value for a 31 bit signed
1082:.\Generated_Source\PSoC5/Volume_ADC.c **** *  number in the conversion to uVolts and at the same time not lose resolution.
1083:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1084:.\Generated_Source\PSoC5/Volume_ADC.c **** *  uVolts = ((A * adcCounts) / ((int32)Volume_ADC_CountsPerVolt / B));
1085:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1086:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
1087:.\Generated_Source\PSoC5/Volume_ADC.c **** int32 Volume_ADC_CountsTo_uVolts(int32 adcCounts) 
1088:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 1610              		.loc 1 1088 0
 1611              		.cfi_startproc
 1612              		@ args = 0, pretend = 0, frame = 24
 1613              		@ frame_needed = 1, uses_anonymous_args = 0
 1614              		@ link register save eliminated.
 1615 0000 80B4     		push	{r7}
 1616              		.cfi_def_cfa_offset 4
 1617              		.cfi_offset 7, -4
 1618 0002 87B0     		sub	sp, sp, #28
 1619              		.cfi_def_cfa_offset 32
 1620 0004 00AF     		add	r7, sp, #0
 1621              		.cfi_def_cfa_register 7
 1622 0006 7860     		str	r0, [r7, #4]
1089:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1090:.\Generated_Source\PSoC5/Volume_ADC.c ****     int32 uVolts;
1091:.\Generated_Source\PSoC5/Volume_ADC.c ****     int32 coefA;
1092:.\Generated_Source\PSoC5/Volume_ADC.c ****     int32 coefB;
1093:.\Generated_Source\PSoC5/Volume_ADC.c ****     uint8 resolution;
1094:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1095:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Set the resolution based on the configuration */
1096:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Convert adcCounts to the right align if left option selected */
1097:.\Generated_Source\PSoC5/Volume_ADC.c ****     if (Volume_ADC_Config == Volume_ADC_CFG1)
 1623              		.loc 1 1097 0
 1624 0008 264B     		ldr	r3, .L96
 1625 000a 1B78     		ldrb	r3, [r3]
 1626 000c DBB2     		uxtb	r3, r3
 1627 000e 012B     		cmp	r3, #1
 1628 0010 02D1     		bne	.L86
1098:.\Generated_Source\PSoC5/Volume_ADC.c ****     {
1099:.\Generated_Source\PSoC5/Volume_ADC.c ****         resolution = Volume_ADC_CFG1_RESOLUTION;
 1629              		.loc 1 1099 0
 1630 0012 0C23     		movs	r3, #12
 1631 0014 FB73     		strb	r3, [r7, #15]
 1632 0016 11E0     		b	.L87
 1633              	.L86:
1100:.\Generated_Source\PSoC5/Volume_ADC.c ****         #if(Volume_ADC_CFG1_DEC_DIV != 0)
1101:.\Generated_Source\PSoC5/Volume_ADC.c ****             adcCounts /= Volume_ADC_CFG1_DEC_DIV;
1102:.\Generated_Source\PSoC5/Volume_ADC.c ****         #endif /* Volume_ADC_CFG1_DEC_DIV */
1103:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 49


1104:.\Generated_Source\PSoC5/Volume_ADC.c ****     else if (Volume_ADC_Config == Volume_ADC_CFG2)
 1634              		.loc 1 1104 0
 1635 0018 224B     		ldr	r3, .L96
 1636 001a 1B78     		ldrb	r3, [r3]
 1637 001c DBB2     		uxtb	r3, r3
 1638 001e 022B     		cmp	r3, #2
 1639 0020 02D1     		bne	.L88
1105:.\Generated_Source\PSoC5/Volume_ADC.c ****     {
1106:.\Generated_Source\PSoC5/Volume_ADC.c ****         resolution = Volume_ADC_CFG2_RESOLUTION;
 1640              		.loc 1 1106 0
 1641 0022 1023     		movs	r3, #16
 1642 0024 FB73     		strb	r3, [r7, #15]
 1643 0026 09E0     		b	.L87
 1644              	.L88:
1107:.\Generated_Source\PSoC5/Volume_ADC.c ****         #if(Volume_ADC_CFG2_DEC_DIV != 0)
1108:.\Generated_Source\PSoC5/Volume_ADC.c ****             adcCounts /= Volume_ADC_CFG2_DEC_DIV;
1109:.\Generated_Source\PSoC5/Volume_ADC.c ****         #endif /* Volume_ADC_CFG2_DEC_DIV */
1110:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
1111:.\Generated_Source\PSoC5/Volume_ADC.c ****     else if (Volume_ADC_Config == Volume_ADC_CFG3)
 1645              		.loc 1 1111 0
 1646 0028 1E4B     		ldr	r3, .L96
 1647 002a 1B78     		ldrb	r3, [r3]
 1648 002c DBB2     		uxtb	r3, r3
 1649 002e 032B     		cmp	r3, #3
 1650 0030 02D1     		bne	.L89
1112:.\Generated_Source\PSoC5/Volume_ADC.c ****     {
1113:.\Generated_Source\PSoC5/Volume_ADC.c ****         resolution = Volume_ADC_CFG3_RESOLUTION;
 1651              		.loc 1 1113 0
 1652 0032 1023     		movs	r3, #16
 1653 0034 FB73     		strb	r3, [r7, #15]
 1654 0036 01E0     		b	.L87
 1655              	.L89:
1114:.\Generated_Source\PSoC5/Volume_ADC.c ****         #if(Volume_ADC_CFG3_DEC_DIV != 0)
1115:.\Generated_Source\PSoC5/Volume_ADC.c ****             adcCounts /= Volume_ADC_CFG3_DEC_DIV;
1116:.\Generated_Source\PSoC5/Volume_ADC.c ****         #endif /* Volume_ADC_CFG3_DEC_DIV */
1117:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
1118:.\Generated_Source\PSoC5/Volume_ADC.c ****     else
1119:.\Generated_Source\PSoC5/Volume_ADC.c ****     {
1120:.\Generated_Source\PSoC5/Volume_ADC.c ****         resolution = Volume_ADC_CFG4_RESOLUTION;
 1656              		.loc 1 1120 0
 1657 0038 1023     		movs	r3, #16
 1658 003a FB73     		strb	r3, [r7, #15]
 1659              	.L87:
1121:.\Generated_Source\PSoC5/Volume_ADC.c ****         #if(Volume_ADC_CFG4_DEC_DIV != 0)
1122:.\Generated_Source\PSoC5/Volume_ADC.c ****             adcCounts /= Volume_ADC_CFG4_DEC_DIV;
1123:.\Generated_Source\PSoC5/Volume_ADC.c ****         #endif /* Volume_ADC_CFG4_DEC_DIV */
1124:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
1125:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1126:.\Generated_Source\PSoC5/Volume_ADC.c ****     switch (resolution)
 1660              		.loc 1 1126 0
 1661 003c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1662 003e 0C2B     		cmp	r3, #12
 1663 0040 02D0     		beq	.L91
 1664 0042 102B     		cmp	r3, #16
 1665 0044 05D0     		beq	.L92
 1666 0046 0AE0     		b	.L95
 1667              	.L91:
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 50


1127:.\Generated_Source\PSoC5/Volume_ADC.c ****     {
1128:.\Generated_Source\PSoC5/Volume_ADC.c ****         #if( (Volume_ADC_CFG1_RESOLUTION == Volume_ADC__BITS_12) || \
1129:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG2_RESOLUTION == Volume_ADC__BITS_12) || \
1130:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG3_RESOLUTION == Volume_ADC__BITS_12) || \
1131:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG4_RESOLUTION == Volume_ADC__BITS_12) )
1132:.\Generated_Source\PSoC5/Volume_ADC.c ****             case (uint8)Volume_ADC__BITS_12:
1133:.\Generated_Source\PSoC5/Volume_ADC.c ****                 coefA = Volume_ADC_1UV_COUNTS / Volume_ADC_DIVISOR_2;
 1668              		.loc 1 1133 0
 1669 0048 174B     		ldr	r3, .L96+4
 1670 004a 7B61     		str	r3, [r7, #20]
1134:.\Generated_Source\PSoC5/Volume_ADC.c ****                 coefB = Volume_ADC_DIVISOR_2;
 1671              		.loc 1 1134 0
 1672 004c 0223     		movs	r3, #2
 1673 004e 3B61     		str	r3, [r7, #16]
1135:.\Generated_Source\PSoC5/Volume_ADC.c ****                 break;
 1674              		.loc 1 1135 0
 1675 0050 0AE0     		b	.L93
 1676              	.L92:
1136:.\Generated_Source\PSoC5/Volume_ADC.c ****         #endif /* Volume_ADC__BITS_12 */    
1137:.\Generated_Source\PSoC5/Volume_ADC.c ****         #if( (Volume_ADC_CFG1_RESOLUTION == Volume_ADC__BITS_13) || \
1138:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG2_RESOLUTION == Volume_ADC__BITS_13) || \
1139:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG3_RESOLUTION == Volume_ADC__BITS_13) || \
1140:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG4_RESOLUTION == Volume_ADC__BITS_13) )
1141:.\Generated_Source\PSoC5/Volume_ADC.c ****             case (uint8)Volume_ADC__BITS_13:
1142:.\Generated_Source\PSoC5/Volume_ADC.c ****                 coefA = Volume_ADC_1UV_COUNTS / Volume_ADC_DIVISOR_4;
1143:.\Generated_Source\PSoC5/Volume_ADC.c ****                 coefB = Volume_ADC_DIVISOR_4;
1144:.\Generated_Source\PSoC5/Volume_ADC.c ****                 break;
1145:.\Generated_Source\PSoC5/Volume_ADC.c ****         #endif /* Volume_ADC__BITS_13 */    
1146:.\Generated_Source\PSoC5/Volume_ADC.c ****         #if( (Volume_ADC_CFG1_RESOLUTION == Volume_ADC__BITS_14) || \
1147:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG2_RESOLUTION == Volume_ADC__BITS_14) || \
1148:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG3_RESOLUTION == Volume_ADC__BITS_14) || \
1149:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG4_RESOLUTION == Volume_ADC__BITS_14) )
1150:.\Generated_Source\PSoC5/Volume_ADC.c ****             case (uint8)Volume_ADC__BITS_14:
1151:.\Generated_Source\PSoC5/Volume_ADC.c ****                 coefA = Volume_ADC_1UV_COUNTS / Volume_ADC_DIVISOR_8;
1152:.\Generated_Source\PSoC5/Volume_ADC.c ****                 coefB = Volume_ADC_DIVISOR_8;
1153:.\Generated_Source\PSoC5/Volume_ADC.c ****                 break;
1154:.\Generated_Source\PSoC5/Volume_ADC.c ****         #endif /* Volume_ADC__BITS_14 */    
1155:.\Generated_Source\PSoC5/Volume_ADC.c ****         #if( (Volume_ADC_CFG1_RESOLUTION == Volume_ADC__BITS_15) || \
1156:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG2_RESOLUTION == Volume_ADC__BITS_15) || \
1157:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG3_RESOLUTION == Volume_ADC__BITS_15) || \
1158:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG4_RESOLUTION == Volume_ADC__BITS_15) )
1159:.\Generated_Source\PSoC5/Volume_ADC.c ****             case (uint8)Volume_ADC__BITS_15:
1160:.\Generated_Source\PSoC5/Volume_ADC.c ****                 coefA = Volume_ADC_1UV_COUNTS / Volume_ADC_DIVISOR_16;
1161:.\Generated_Source\PSoC5/Volume_ADC.c ****                 coefB = Volume_ADC_DIVISOR_16;
1162:.\Generated_Source\PSoC5/Volume_ADC.c ****                 break;
1163:.\Generated_Source\PSoC5/Volume_ADC.c ****         #endif /* Volume_ADC__BITS_15 */    
1164:.\Generated_Source\PSoC5/Volume_ADC.c ****         #if( (Volume_ADC_CFG1_RESOLUTION == Volume_ADC__BITS_16) || \
1165:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG2_RESOLUTION == Volume_ADC__BITS_16) || \
1166:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG3_RESOLUTION == Volume_ADC__BITS_16) || \
1167:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG4_RESOLUTION == Volume_ADC__BITS_16) )
1168:.\Generated_Source\PSoC5/Volume_ADC.c ****             case (uint8)Volume_ADC__BITS_16:
1169:.\Generated_Source\PSoC5/Volume_ADC.c ****                 coefA = Volume_ADC_1UV_COUNTS / Volume_ADC_DIVISOR_32;
 1677              		.loc 1 1169 0
 1678 0052 47F61223 		movw	r3, #31250
 1679 0056 7B61     		str	r3, [r7, #20]
1170:.\Generated_Source\PSoC5/Volume_ADC.c ****                 coefB = Volume_ADC_DIVISOR_32;
 1680              		.loc 1 1170 0
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 51


 1681 0058 2023     		movs	r3, #32
 1682 005a 3B61     		str	r3, [r7, #16]
1171:.\Generated_Source\PSoC5/Volume_ADC.c ****                 break;
 1683              		.loc 1 1171 0
 1684 005c 04E0     		b	.L93
 1685              	.L95:
1172:.\Generated_Source\PSoC5/Volume_ADC.c ****         #endif /* Volume_ADC__BITS_16 */    
1173:.\Generated_Source\PSoC5/Volume_ADC.c ****         #if( (Volume_ADC_CFG1_RESOLUTION == Volume_ADC__BITS_17) || \
1174:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG2_RESOLUTION == Volume_ADC__BITS_17) || \
1175:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG3_RESOLUTION == Volume_ADC__BITS_17) || \
1176:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG4_RESOLUTION == Volume_ADC__BITS_17) )
1177:.\Generated_Source\PSoC5/Volume_ADC.c ****             case (uint8)Volume_ADC__BITS_17:
1178:.\Generated_Source\PSoC5/Volume_ADC.c ****                 coefA = Volume_ADC_1UV_COUNTS / Volume_ADC_DIVISOR_64;
1179:.\Generated_Source\PSoC5/Volume_ADC.c ****                 coefB = Volume_ADC_DIVISOR_64;
1180:.\Generated_Source\PSoC5/Volume_ADC.c ****                 break;
1181:.\Generated_Source\PSoC5/Volume_ADC.c ****         #endif /* Volume_ADC__BITS_17 */    
1182:.\Generated_Source\PSoC5/Volume_ADC.c ****         #if( (Volume_ADC_CFG1_RESOLUTION == Volume_ADC__BITS_18) || \
1183:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG2_RESOLUTION == Volume_ADC__BITS_18) || \
1184:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG3_RESOLUTION == Volume_ADC__BITS_18) || \
1185:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG4_RESOLUTION == Volume_ADC__BITS_18) )
1186:.\Generated_Source\PSoC5/Volume_ADC.c ****             case (uint8)Volume_ADC__BITS_18:
1187:.\Generated_Source\PSoC5/Volume_ADC.c ****                 coefA = Volume_ADC_1UV_COUNTS / Volume_ADC_DIVISOR_125;
1188:.\Generated_Source\PSoC5/Volume_ADC.c ****                 coefB = Volume_ADC_DIVISOR_125;
1189:.\Generated_Source\PSoC5/Volume_ADC.c ****                 break;
1190:.\Generated_Source\PSoC5/Volume_ADC.c ****         #endif /* Volume_ADC__BITS_18 */    
1191:.\Generated_Source\PSoC5/Volume_ADC.c ****         #if( (Volume_ADC_CFG1_RESOLUTION == Volume_ADC__BITS_19) || \
1192:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG2_RESOLUTION == Volume_ADC__BITS_19) || \
1193:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG3_RESOLUTION == Volume_ADC__BITS_19) || \
1194:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG4_RESOLUTION == Volume_ADC__BITS_19) )
1195:.\Generated_Source\PSoC5/Volume_ADC.c ****             case (uint8)Volume_ADC__BITS_19:
1196:.\Generated_Source\PSoC5/Volume_ADC.c ****                 coefA = Volume_ADC_1UV_COUNTS / Volume_ADC_DIVISOR_250;
1197:.\Generated_Source\PSoC5/Volume_ADC.c ****                 coefB = Volume_ADC_DIVISOR_250;
1198:.\Generated_Source\PSoC5/Volume_ADC.c ****                 break;
1199:.\Generated_Source\PSoC5/Volume_ADC.c ****         #endif /* Volume_ADC__BITS_19 */    
1200:.\Generated_Source\PSoC5/Volume_ADC.c ****         #if( (Volume_ADC_CFG1_RESOLUTION == Volume_ADC__BITS_20) || \
1201:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG2_RESOLUTION == Volume_ADC__BITS_20) || \
1202:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG3_RESOLUTION == Volume_ADC__BITS_20) || \
1203:.\Generated_Source\PSoC5/Volume_ADC.c ****              (Volume_ADC_CFG4_RESOLUTION == Volume_ADC__BITS_20) )
1204:.\Generated_Source\PSoC5/Volume_ADC.c ****             case (uint8)Volume_ADC__BITS_20:
1205:.\Generated_Source\PSoC5/Volume_ADC.c ****                 coefA = Volume_ADC_1UV_COUNTS / Volume_ADC_DIVISOR_500;
1206:.\Generated_Source\PSoC5/Volume_ADC.c ****                 coefB = Volume_ADC_DIVISOR_500;
1207:.\Generated_Source\PSoC5/Volume_ADC.c ****                 break;
1208:.\Generated_Source\PSoC5/Volume_ADC.c ****         #endif /* Volume_ADC__BITS_20 */    
1209:.\Generated_Source\PSoC5/Volume_ADC.c ****         default:    /* resolution < 12 */
1210:.\Generated_Source\PSoC5/Volume_ADC.c ****             /* 11 bits ADC + 2^20(1048576) = 31 bits */
1211:.\Generated_Source\PSoC5/Volume_ADC.c ****             coefA = Volume_ADC_1UV_COUNTS;
 1686              		.loc 1 1211 0
 1687 005e 134B     		ldr	r3, .L96+8
 1688 0060 7B61     		str	r3, [r7, #20]
1212:.\Generated_Source\PSoC5/Volume_ADC.c ****             coefB = Volume_ADC_DIVISOR_1;
 1689              		.loc 1 1212 0
 1690 0062 0123     		movs	r3, #1
 1691 0064 3B61     		str	r3, [r7, #16]
1213:.\Generated_Source\PSoC5/Volume_ADC.c ****             break;
 1692              		.loc 1 1213 0
 1693 0066 00BF     		nop
 1694              	.L93:
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 52


1214:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
1215:.\Generated_Source\PSoC5/Volume_ADC.c ****     coefB = Volume_ADC_CountsPerVolt / coefB;
 1695              		.loc 1 1215 0
 1696 0068 114B     		ldr	r3, .L96+12
 1697 006a 1A68     		ldr	r2, [r3]
 1698 006c 3B69     		ldr	r3, [r7, #16]
 1699 006e 92FBF3F3 		sdiv	r3, r2, r3
 1700 0072 3B61     		str	r3, [r7, #16]
1216:.\Generated_Source\PSoC5/Volume_ADC.c ****     uVolts = ((coefA * adcCounts) / coefB) - ((coefA * Volume_ADC_Offset) / coefB);
 1701              		.loc 1 1216 0
 1702 0074 7B69     		ldr	r3, [r7, #20]
 1703 0076 7A68     		ldr	r2, [r7, #4]
 1704 0078 02FB03F2 		mul	r2, r2, r3
 1705 007c 3B69     		ldr	r3, [r7, #16]
 1706 007e 92FBF3F2 		sdiv	r2, r2, r3
 1707 0082 0C4B     		ldr	r3, .L96+16
 1708 0084 1B68     		ldr	r3, [r3]
 1709 0086 7969     		ldr	r1, [r7, #20]
 1710 0088 01FB03F1 		mul	r1, r1, r3
 1711 008c 3B69     		ldr	r3, [r7, #16]
 1712 008e 91FBF3F3 		sdiv	r3, r1, r3
 1713 0092 D31A     		subs	r3, r2, r3
 1714 0094 BB60     		str	r3, [r7, #8]
1217:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1218:.\Generated_Source\PSoC5/Volume_ADC.c ****     return( uVolts );
 1715              		.loc 1 1218 0
 1716 0096 BB68     		ldr	r3, [r7, #8]
1219:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 1717              		.loc 1 1219 0
 1718 0098 1846     		mov	r0, r3
 1719 009a 1C37     		adds	r7, r7, #28
 1720              		.cfi_def_cfa_offset 4
 1721 009c BD46     		mov	sp, r7
 1722              		.cfi_def_cfa_register 13
 1723              		@ sp needed
 1724 009e 5DF8047B 		ldr	r7, [sp], #4
 1725              		.cfi_restore 7
 1726              		.cfi_def_cfa_offset 0
 1727 00a2 7047     		bx	lr
 1728              	.L97:
 1729              		.align	2
 1730              	.L96:
 1731 00a4 00000000 		.word	Volume_ADC_Config
 1732 00a8 20A10700 		.word	500000
 1733 00ac 40420F00 		.word	1000000
 1734 00b0 00000000 		.word	Volume_ADC_CountsPerVolt
 1735 00b4 00000000 		.word	Volume_ADC_Offset
 1736              		.cfi_endproc
 1737              	.LFE18:
 1738              		.size	Volume_ADC_CountsTo_uVolts, .-Volume_ADC_CountsTo_uVolts
 1739              		.section	.text.Volume_ADC_InitConfig,"ax",%progbits
 1740              		.align	2
 1741              		.thumb
 1742              		.thumb_func
 1743              		.type	Volume_ADC_InitConfig, %function
 1744              	Volume_ADC_InitConfig:
 1745              	.LFB19:
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 53


1220:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1221:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1222:.\Generated_Source\PSoC5/Volume_ADC.c **** /*******************************************************************************
1223:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_InitConfig(uint8 config)
1224:.\Generated_Source\PSoC5/Volume_ADC.c **** ********************************************************************************
1225:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1226:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
1227:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Initializes all registers based on customizer settings
1228:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1229:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
1230:.\Generated_Source\PSoC5/Volume_ADC.c **** *   void
1231:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1232:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
1233:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
1234:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1235:.\Generated_Source\PSoC5/Volume_ADC.c **** * Global variables:
1236:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Volume_ADC_CountsPerVolt:  Used to set the default counts per volt.
1237:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1238:.\Generated_Source\PSoC5/Volume_ADC.c **** * Side Effects: Rewrites the coherency set by Volume_ADC_SetCoherency()
1239:.\Generated_Source\PSoC5/Volume_ADC.c **** *   API to the default value.
1240:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1241:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
1242:.\Generated_Source\PSoC5/Volume_ADC.c **** static void Volume_ADC_InitConfig(uint8 config) 
1243:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 1746              		.loc 1 1243 0
 1747              		.cfi_startproc
 1748              		@ args = 0, pretend = 0, frame = 8
 1749              		@ frame_needed = 1, uses_anonymous_args = 0
 1750 0000 80B5     		push	{r7, lr}
 1751              		.cfi_def_cfa_offset 8
 1752              		.cfi_offset 7, -8
 1753              		.cfi_offset 14, -4
 1754 0002 82B0     		sub	sp, sp, #8
 1755              		.cfi_def_cfa_offset 16
 1756 0004 00AF     		add	r7, sp, #0
 1757              		.cfi_def_cfa_register 7
 1758 0006 0346     		mov	r3, r0
 1759 0008 FB71     		strb	r3, [r7, #7]
1244:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_stopConversion = 0u;
 1760              		.loc 1 1244 0
 1761 000a 364B     		ldr	r3, .L100
 1762 000c 0022     		movs	r2, #0
 1763 000e 1A70     		strb	r2, [r3]
1245:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1246:.\Generated_Source\PSoC5/Volume_ADC.c ****     if (config == 1u)
 1764              		.loc 1 1246 0
 1765 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1766 0012 012B     		cmp	r3, #1
 1767 0014 63D1     		bne	.L98
1247:.\Generated_Source\PSoC5/Volume_ADC.c ****     {
1248:.\Generated_Source\PSoC5/Volume_ADC.c ****         /* Default Config */
1249:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DEC_CR_REG      = Volume_ADC_CFG1_DEC_CR;
 1768              		.loc 1 1249 0
 1769 0016 344B     		ldr	r3, .L100+4
 1770 0018 3222     		movs	r2, #50
 1771 001a 1A70     		strb	r2, [r3]
1250:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DEC_SHIFT1_REG  = Volume_ADC_CFG1_DEC_SHIFT1;
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 54


 1772              		.loc 1 1250 0
 1773 001c 334B     		ldr	r3, .L100+8
 1774 001e 0622     		movs	r2, #6
 1775 0020 1A70     		strb	r2, [r3]
1251:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DEC_SHIFT2_REG  = Volume_ADC_CFG1_DEC_SHIFT2;
 1776              		.loc 1 1251 0
 1777 0022 334B     		ldr	r3, .L100+12
 1778 0024 0922     		movs	r2, #9
 1779 0026 1A70     		strb	r2, [r3]
1252:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DEC_DR2_REG     = Volume_ADC_CFG1_DEC_DR2;
 1780              		.loc 1 1252 0
 1781 0028 324B     		ldr	r3, .L100+16
 1782 002a 0022     		movs	r2, #0
 1783 002c 1A70     		strb	r2, [r3]
1253:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DEC_DR2H_REG    = Volume_ADC_CFG1_DEC_DR2H;
 1784              		.loc 1 1253 0
 1785 002e 324B     		ldr	r3, .L100+20
 1786 0030 0022     		movs	r2, #0
 1787 0032 1A70     		strb	r2, [r3]
1254:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DEC_DR1_REG     = Volume_ADC_CFG1_DEC_DR1;
 1788              		.loc 1 1254 0
 1789 0034 314B     		ldr	r3, .L100+24
 1790 0036 1F22     		movs	r2, #31
 1791 0038 1A70     		strb	r2, [r3]
1255:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DEC_OCOR_REG    = Volume_ADC_CFG1_DEC_OCOR;
 1792              		.loc 1 1255 0
 1793 003a 314B     		ldr	r3, .L100+28
 1794 003c 0022     		movs	r2, #0
 1795 003e 1A70     		strb	r2, [r3]
1256:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DEC_OCORM_REG   = Volume_ADC_CFG1_DEC_OCORM;
 1796              		.loc 1 1256 0
 1797 0040 304B     		ldr	r3, .L100+32
 1798 0042 0022     		movs	r2, #0
 1799 0044 1A70     		strb	r2, [r3]
1257:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DEC_OCORH_REG   = Volume_ADC_CFG1_DEC_OCORH;
 1800              		.loc 1 1257 0
 1801 0046 304B     		ldr	r3, .L100+36
 1802 0048 0022     		movs	r2, #0
 1803 004a 1A70     		strb	r2, [r3]
1258:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DEC_COHER_REG   = Volume_ADC_CFG1_DEC_COHER;
 1804              		.loc 1 1258 0
 1805 004c 2F4B     		ldr	r3, .L100+40
 1806 004e 0122     		movs	r2, #1
 1807 0050 1A70     		strb	r2, [r3]
1259:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1260:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DSM_CR4_REG     = Volume_ADC_CFG1_DSM_CR4;
 1808              		.loc 1 1260 0
 1809 0052 2F4B     		ldr	r3, .L100+44
 1810 0054 1422     		movs	r2, #20
 1811 0056 1A70     		strb	r2, [r3]
1261:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DSM_CR5_REG     = Volume_ADC_CFG1_DSM_CR5;
 1812              		.loc 1 1261 0
 1813 0058 2E4B     		ldr	r3, .L100+48
 1814 005a 0922     		movs	r2, #9
 1815 005c 1A70     		strb	r2, [r3]
1262:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DSM_CR6_REG     = Volume_ADC_CFG1_DSM_CR6;
 1816              		.loc 1 1262 0
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 55


 1817 005e 2E4B     		ldr	r3, .L100+52
 1818 0060 0A22     		movs	r2, #10
 1819 0062 1A70     		strb	r2, [r3]
1263:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DSM_CR7_REG     = Volume_ADC_CFG1_DSM_CR7;
 1820              		.loc 1 1263 0
 1821 0064 2D4B     		ldr	r3, .L100+56
 1822 0066 0022     		movs	r2, #0
 1823 0068 1A70     		strb	r2, [r3]
1264:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DSM_CR10_REG    = Volume_ADC_CFG1_DSM_CR10;
 1824              		.loc 1 1264 0
 1825 006a 2D4B     		ldr	r3, .L100+60
 1826 006c 1122     		movs	r2, #17
 1827 006e 1A70     		strb	r2, [r3]
1265:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DSM_CR11_REG    = Volume_ADC_CFG1_DSM_CR11;
 1828              		.loc 1 1265 0
 1829 0070 2C4B     		ldr	r3, .L100+64
 1830 0072 1222     		movs	r2, #18
 1831 0074 1A70     		strb	r2, [r3]
1266:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DSM_CR12_REG    = Volume_ADC_CFG1_DSM_CR12;
 1832              		.loc 1 1266 0
 1833 0076 2C4B     		ldr	r3, .L100+68
 1834 0078 0122     		movs	r2, #1
 1835 007a 1A70     		strb	r2, [r3]
1267:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DSM_CR14_REG    = Volume_ADC_CFG1_DSM_CR14;
 1836              		.loc 1 1267 0
 1837 007c 2B4B     		ldr	r3, .L100+72
 1838 007e 0122     		movs	r2, #1
 1839 0080 1A70     		strb	r2, [r3]
1268:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DSM_CR15_REG    = Volume_ADC_CFG1_DSM_CR15;
 1840              		.loc 1 1268 0
 1841 0082 2B4B     		ldr	r3, .L100+76
 1842 0084 1122     		movs	r2, #17
 1843 0086 1A70     		strb	r2, [r3]
1269:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DSM_CR16_REG    = Volume_ADC_CFG1_DSM_CR16;
 1844              		.loc 1 1269 0
 1845 0088 2A4B     		ldr	r3, .L100+80
 1846 008a 1922     		movs	r2, #25
 1847 008c 1A70     		strb	r2, [r3]
1270:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DSM_CR17_REG    = Volume_ADC_CFG1_DSM_CR17;
 1848              		.loc 1 1270 0
 1849 008e 2A4B     		ldr	r3, .L100+84
 1850 0090 9722     		movs	r2, #151
 1851 0092 1A70     		strb	r2, [r3]
1271:.\Generated_Source\PSoC5/Volume_ADC.c ****         /* Set DSM_REF0_REG by disabling and enabling the PRESS circuit */
1272:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_SetDSMRef0Reg(Volume_ADC_CFG1_DSM_REF0);
 1852              		.loc 1 1272 0
 1853 0094 4420     		movs	r0, #68
 1854 0096 FFF7FEFF 		bl	Volume_ADC_SetDSMRef0Reg
1273:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DSM_REF2_REG    = Volume_ADC_CFG1_DSM_REF2;
 1855              		.loc 1 1273 0
 1856 009a 284B     		ldr	r3, .L100+88
 1857 009c 5822     		movs	r2, #88
 1858 009e 1A70     		strb	r2, [r3]
1274:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DSM_REF3_REG    = Volume_ADC_CFG1_DSM_REF3;
 1859              		.loc 1 1274 0
 1860 00a0 274B     		ldr	r3, .L100+92
 1861 00a2 0022     		movs	r2, #0
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 56


 1862 00a4 1A70     		strb	r2, [r3]
1275:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1276:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DSM_BUF0_REG    = Volume_ADC_CFG1_DSM_BUF0;
 1863              		.loc 1 1276 0
 1864 00a6 274B     		ldr	r3, .L100+96
 1865 00a8 0522     		movs	r2, #5
 1866 00aa 1A70     		strb	r2, [r3]
1277:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DSM_BUF1_REG    = Volume_ADC_CFG1_DSM_BUF1;
 1867              		.loc 1 1277 0
 1868 00ac 264B     		ldr	r3, .L100+100
 1869 00ae 0122     		movs	r2, #1
 1870 00b0 1A70     		strb	r2, [r3]
1278:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DSM_BUF2_REG    = Volume_ADC_CFG1_DSM_BUF2;
 1871              		.loc 1 1278 0
 1872 00b2 264B     		ldr	r3, .L100+104
 1873 00b4 0022     		movs	r2, #0
 1874 00b6 1A70     		strb	r2, [r3]
1279:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DSM_BUF3_REG    = Volume_ADC_CFG1_DSM_BUF3;
 1875              		.loc 1 1279 0
 1876 00b8 254B     		ldr	r3, .L100+108
 1877 00ba 0A22     		movs	r2, #10
 1878 00bc 1A70     		strb	r2, [r3]
1280:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1281:.\Generated_Source\PSoC5/Volume_ADC.c ****         /* To select either Vssa or Vref to -ve input of DSM depending on
1282:.\Generated_Source\PSoC5/Volume_ADC.c ****         *  the input  range selected.
1283:.\Generated_Source\PSoC5/Volume_ADC.c ****         */
1284:.\Generated_Source\PSoC5/Volume_ADC.c ****         #if(Volume_ADC_DEFAULT_INPUT_MODE)
1285:.\Generated_Source\PSoC5/Volume_ADC.c ****             #if (Volume_ADC_CFG1_INPUT_RANGE == Volume_ADC_IR_VSSA_TO_2VREF)
1286:.\Generated_Source\PSoC5/Volume_ADC.c ****                 Volume_ADC_AMux_Select(1u);
1287:.\Generated_Source\PSoC5/Volume_ADC.c ****             #else
1288:.\Generated_Source\PSoC5/Volume_ADC.c ****                 Volume_ADC_AMux_Select(0u);
1289:.\Generated_Source\PSoC5/Volume_ADC.c ****             #endif /* Volume_ADC_IR_VSSA_TO_2VREF) */
1290:.\Generated_Source\PSoC5/Volume_ADC.c ****         #endif /* Volume_ADC_DEFAULT_INPUT_MODE */
1291:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1292:.\Generated_Source\PSoC5/Volume_ADC.c ****         /* Set the Conversion stop if resolution is above 16 bit and conversion
1293:.\Generated_Source\PSoC5/Volume_ADC.c ****         *   mode is Single sample
1294:.\Generated_Source\PSoC5/Volume_ADC.c ****         */
1295:.\Generated_Source\PSoC5/Volume_ADC.c ****         #if(Volume_ADC_CFG1_RESOLUTION > 16 && \
1296:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_CFG1_CONV_MODE == Volume_ADC_MODE_SINGLE_SAMPLE)
1297:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_stopConversion = 1u;
1298:.\Generated_Source\PSoC5/Volume_ADC.c ****         #endif /* Single sample with resolution above 16 bits. */
1299:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1300:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_CountsPerVolt = (int32)Volume_ADC_CFG1_COUNTS_PER_VOLT;
 1879              		.loc 1 1300 0
 1880 00be 254B     		ldr	r3, .L100+112
 1881 00c0 4FF4FA62 		mov	r2, #2000
 1882 00c4 1A60     		str	r2, [r3]
1301:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1302:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_Ext_CP_Clk_SetDividerRegister(Volume_ADC_CFG1_CP_CLK_DIVIDER, 1u);
 1883              		.loc 1 1302 0
 1884 00c6 0320     		movs	r0, #3
 1885 00c8 0121     		movs	r1, #1
 1886 00ca FFF7FEFF 		bl	Volume_ADC_Ext_CP_Clk_SetDividerRegister
1303:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1304:.\Generated_Source\PSoC5/Volume_ADC.c ****         /* This is only valid if there is an internal clock */
1305:.\Generated_Source\PSoC5/Volume_ADC.c ****         #if(Volume_ADC_DEFAULT_INTERNAL_CLK)
1306:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_theACLK_SetDividerRegister(Volume_ADC_CFG1_ADC_CLK_DIVIDER, 1u);
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 57


 1887              		.loc 1 1306 0
 1888 00ce 0F20     		movs	r0, #15
 1889 00d0 0121     		movs	r1, #1
 1890 00d2 FFF7FEFF 		bl	Volume_ADC_theACLK_SetDividerRegister
1307:.\Generated_Source\PSoC5/Volume_ADC.c ****         #endif /* Volume_ADC_DEFAULT_INTERNAL_CLK */
1308:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1309:.\Generated_Source\PSoC5/Volume_ADC.c ****         #if(Volume_ADC_IRQ_REMOVE == 0u)
1310:.\Generated_Source\PSoC5/Volume_ADC.c ****             /* Set interrupt vector */
1311:.\Generated_Source\PSoC5/Volume_ADC.c ****             (void)CyIntSetVector(Volume_ADC_INTC_NUMBER, &Volume_ADC_ISR1);
 1891              		.loc 1 1311 0
 1892 00d6 1D20     		movs	r0, #29
 1893 00d8 1F49     		ldr	r1, .L100+116
 1894 00da FFF7FEFF 		bl	CyIntSetVector
 1895              	.L98:
1312:.\Generated_Source\PSoC5/Volume_ADC.c ****         #endif   /* End Volume_ADC_IRQ_REMOVE */
1313:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
1314:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1315:.\Generated_Source\PSoC5/Volume_ADC.c ****     #if(Volume_ADC_DEFAULT_NUM_CONFIGS > 1)
1316:.\Generated_Source\PSoC5/Volume_ADC.c ****         if(config == 2u)
1317:.\Generated_Source\PSoC5/Volume_ADC.c ****         {
1318:.\Generated_Source\PSoC5/Volume_ADC.c ****             /* Second Config */
1319:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_CR_REG      = Volume_ADC_CFG2_DEC_CR;
1320:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_SHIFT1_REG  = Volume_ADC_CFG2_DEC_SHIFT1;
1321:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_SHIFT2_REG  = Volume_ADC_CFG2_DEC_SHIFT2;
1322:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_DR2_REG     = Volume_ADC_CFG2_DEC_DR2;
1323:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_DR2H_REG    = Volume_ADC_CFG2_DEC_DR2H;
1324:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_DR1_REG     = Volume_ADC_CFG2_DEC_DR1;
1325:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_OCOR_REG    = Volume_ADC_CFG2_DEC_OCOR;
1326:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_OCORM_REG   = Volume_ADC_CFG2_DEC_OCORM;
1327:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_OCORH_REG   = Volume_ADC_CFG2_DEC_OCORH;
1328:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_COHER_REG   = Volume_ADC_CFG2_DEC_COHER;
1329:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1330:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR4_REG     = Volume_ADC_CFG2_DSM_CR4;
1331:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR5_REG     = Volume_ADC_CFG2_DSM_CR5;
1332:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR6_REG     = Volume_ADC_CFG2_DSM_CR6;
1333:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR7_REG     = Volume_ADC_CFG2_DSM_CR7;
1334:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR10_REG    = Volume_ADC_CFG2_DSM_CR10;
1335:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR11_REG    = Volume_ADC_CFG2_DSM_CR11;
1336:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR12_REG    = Volume_ADC_CFG2_DSM_CR12;
1337:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR14_REG    = Volume_ADC_CFG2_DSM_CR14;
1338:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR15_REG    = Volume_ADC_CFG2_DSM_CR15;
1339:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR16_REG    = Volume_ADC_CFG2_DSM_CR16;
1340:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR17_REG    = Volume_ADC_CFG2_DSM_CR17;
1341:.\Generated_Source\PSoC5/Volume_ADC.c ****             /* Set DSM_REF0_REG by disabling and enabling the PRESS cirucit */
1342:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_SetDSMRef0Reg(Volume_ADC_CFG2_DSM_REF0);
1343:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_REF2_REG    = Volume_ADC_CFG2_DSM_REF2;
1344:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_REF3_REG    = Volume_ADC_CFG2_DSM_REF3;
1345:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1346:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_BUF0_REG    = Volume_ADC_CFG2_DSM_BUF0;
1347:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_BUF1_REG    = Volume_ADC_CFG2_DSM_BUF1;
1348:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_BUF2_REG    = Volume_ADC_CFG2_DSM_BUF2;
1349:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_BUF3_REG    = Volume_ADC_CFG2_DSM_BUF3;
1350:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1351:.\Generated_Source\PSoC5/Volume_ADC.c ****             /* To select either Vssa or Vref to -ve input of DSM depending on
1352:.\Generated_Source\PSoC5/Volume_ADC.c ****             *  the input range selected.
1353:.\Generated_Source\PSoC5/Volume_ADC.c ****             */
1354:.\Generated_Source\PSoC5/Volume_ADC.c **** 
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 58


1355:.\Generated_Source\PSoC5/Volume_ADC.c ****             #if(Volume_ADC_DEFAULT_INPUT_MODE)
1356:.\Generated_Source\PSoC5/Volume_ADC.c ****                 #if (Volume_ADC_CFG2_INPUT_RANGE == Volume_ADC_IR_VSSA_TO_2VREF)
1357:.\Generated_Source\PSoC5/Volume_ADC.c ****                     Volume_ADC_AMux_Select(1u);
1358:.\Generated_Source\PSoC5/Volume_ADC.c ****                 #else
1359:.\Generated_Source\PSoC5/Volume_ADC.c ****                     Volume_ADC_AMux_Select(0u);
1360:.\Generated_Source\PSoC5/Volume_ADC.c ****                 #endif /* Volume_ADC_IR_VSSA_TO_2VREF) */
1361:.\Generated_Source\PSoC5/Volume_ADC.c ****             #endif /* Volume_ADC_DEFAULT_INPUT_MODE */
1362:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1363:.\Generated_Source\PSoC5/Volume_ADC.c ****             /* Set the Conversion stop if resolution is above 16 bit and
1364:.\Generated_Source\PSoC5/Volume_ADC.c ****             *   conversion mode is Single sample
1365:.\Generated_Source\PSoC5/Volume_ADC.c ****             */
1366:.\Generated_Source\PSoC5/Volume_ADC.c ****             #if(Volume_ADC_CFG2_RESOLUTION > 16 && \
1367:.\Generated_Source\PSoC5/Volume_ADC.c ****                 Volume_ADC_CFG2_CONV_MODE == Volume_ADC_MODE_SINGLE_SAMPLE)
1368:.\Generated_Source\PSoC5/Volume_ADC.c ****                 Volume_ADC_stopConversion = 1u;
1369:.\Generated_Source\PSoC5/Volume_ADC.c ****             #endif /* Single sample with resolution above 16 bits. */
1370:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1371:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_CountsPerVolt = (int32)Volume_ADC_CFG2_COUNTS_PER_VOLT;
1372:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1373:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_Ext_CP_Clk_SetDividerRegister(Volume_ADC_CFG2_CP_CLK_DIVIDER, 1u);
1374:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1375:.\Generated_Source\PSoC5/Volume_ADC.c ****             /* This is only valid if there is an internal clock */
1376:.\Generated_Source\PSoC5/Volume_ADC.c ****             #if(Volume_ADC_DEFAULT_INTERNAL_CLK)
1377:.\Generated_Source\PSoC5/Volume_ADC.c ****                 Volume_ADC_theACLK_SetDividerRegister(Volume_ADC_CFG2_ADC_CLK_DIVIDER, 1u);
1378:.\Generated_Source\PSoC5/Volume_ADC.c ****             #endif /* Volume_ADC_DEFAULT_INTERNAL_CLK */
1379:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1380:.\Generated_Source\PSoC5/Volume_ADC.c ****             #if(Volume_ADC_IRQ_REMOVE == 0u)
1381:.\Generated_Source\PSoC5/Volume_ADC.c ****                 /* Set interrupt vector */
1382:.\Generated_Source\PSoC5/Volume_ADC.c ****                 (void)CyIntSetVector(Volume_ADC_INTC_NUMBER, &Volume_ADC_ISR2);
1383:.\Generated_Source\PSoC5/Volume_ADC.c ****             #endif   /* End Volume_ADC_IRQ_REMOVE */
1384:.\Generated_Source\PSoC5/Volume_ADC.c ****         }
1385:.\Generated_Source\PSoC5/Volume_ADC.c ****     #endif /* Volume_ADC_DEFAULT_NUM_CONFIGS > 1 */
1386:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1387:.\Generated_Source\PSoC5/Volume_ADC.c ****     #if(Volume_ADC_DEFAULT_NUM_CONFIGS > 2)
1388:.\Generated_Source\PSoC5/Volume_ADC.c ****         if(config == 3u)
1389:.\Generated_Source\PSoC5/Volume_ADC.c ****         {
1390:.\Generated_Source\PSoC5/Volume_ADC.c ****             /* Third Config */
1391:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_CR_REG      = Volume_ADC_CFG3_DEC_CR;
1392:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_SHIFT1_REG  = Volume_ADC_CFG3_DEC_SHIFT1;
1393:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_SHIFT2_REG  = Volume_ADC_CFG3_DEC_SHIFT2;
1394:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_DR2_REG     = Volume_ADC_CFG3_DEC_DR2;
1395:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_DR2H_REG    = Volume_ADC_CFG3_DEC_DR2H;
1396:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_DR1_REG     = Volume_ADC_CFG3_DEC_DR1;
1397:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_OCOR_REG    = Volume_ADC_CFG3_DEC_OCOR;
1398:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_OCORM_REG   = Volume_ADC_CFG3_DEC_OCORM;
1399:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_OCORH_REG   = Volume_ADC_CFG3_DEC_OCORH;
1400:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_COHER_REG   = Volume_ADC_CFG3_DEC_COHER;
1401:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1402:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR4_REG     = Volume_ADC_CFG3_DSM_CR4;
1403:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR5_REG     = Volume_ADC_CFG3_DSM_CR5;
1404:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR6_REG     = Volume_ADC_CFG3_DSM_CR6;
1405:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR7_REG     = Volume_ADC_CFG3_DSM_CR7;
1406:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR10_REG    = Volume_ADC_CFG3_DSM_CR10;
1407:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR11_REG    = Volume_ADC_CFG3_DSM_CR11;
1408:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR12_REG    = Volume_ADC_CFG3_DSM_CR12;
1409:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR14_REG    = Volume_ADC_CFG3_DSM_CR14;
1410:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR15_REG    = Volume_ADC_CFG3_DSM_CR15;
1411:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR16_REG    = Volume_ADC_CFG3_DSM_CR16;
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 59


1412:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR17_REG    = Volume_ADC_CFG3_DSM_CR17;
1413:.\Generated_Source\PSoC5/Volume_ADC.c ****             /* Set DSM_REF0_REG by disabling and enabling the PRESS circuit */
1414:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_SetDSMRef0Reg(Volume_ADC_CFG3_DSM_REF0);
1415:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_REF2_REG    = Volume_ADC_CFG3_DSM_REF2;
1416:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_REF3_REG    = Volume_ADC_CFG3_DSM_REF3;
1417:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1418:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_BUF0_REG    = Volume_ADC_CFG3_DSM_BUF0;
1419:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_BUF1_REG    = Volume_ADC_CFG3_DSM_BUF1;
1420:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_BUF2_REG    = Volume_ADC_CFG3_DSM_BUF2;
1421:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_BUF3_REG    = Volume_ADC_CFG3_DSM_BUF3;
1422:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1423:.\Generated_Source\PSoC5/Volume_ADC.c ****             /* To select either Vssa or Vref to -ve input of DSM depending on
1424:.\Generated_Source\PSoC5/Volume_ADC.c ****             *  the input range selected.
1425:.\Generated_Source\PSoC5/Volume_ADC.c ****             */
1426:.\Generated_Source\PSoC5/Volume_ADC.c ****             #if(Volume_ADC_DEFAULT_INPUT_MODE)
1427:.\Generated_Source\PSoC5/Volume_ADC.c ****                 #if (Volume_ADC_CFG3_INPUT_RANGE == Volume_ADC_IR_VSSA_TO_2VREF)
1428:.\Generated_Source\PSoC5/Volume_ADC.c ****                     Volume_ADC_AMux_Select(1u);
1429:.\Generated_Source\PSoC5/Volume_ADC.c ****                 #else
1430:.\Generated_Source\PSoC5/Volume_ADC.c ****                     Volume_ADC_AMux_Select(0u);
1431:.\Generated_Source\PSoC5/Volume_ADC.c ****                 #endif /* Volume_ADC_IR_VSSA_TO_2VREF) */
1432:.\Generated_Source\PSoC5/Volume_ADC.c ****             #endif /* Volume_ADC_DEFAULT_INPUT_MODE */
1433:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1434:.\Generated_Source\PSoC5/Volume_ADC.c ****             /* Set the Conversion stop if resolution is above 16 bit and
1435:.\Generated_Source\PSoC5/Volume_ADC.c ****                conversion  mode is Single sample */
1436:.\Generated_Source\PSoC5/Volume_ADC.c ****             #if(Volume_ADC_CFG3_RESOLUTION > 16 && \
1437:.\Generated_Source\PSoC5/Volume_ADC.c ****                 Volume_ADC_CFG3_CONV_MODE == Volume_ADC_MODE_SINGLE_SAMPLE)
1438:.\Generated_Source\PSoC5/Volume_ADC.c ****                 Volume_ADC_stopConversion = 1u;
1439:.\Generated_Source\PSoC5/Volume_ADC.c ****             #endif /* Single sample with resolution above 16 bits */
1440:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1441:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_CountsPerVolt = (int32)Volume_ADC_CFG3_COUNTS_PER_VOLT;
1442:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1443:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_Ext_CP_Clk_SetDividerRegister(Volume_ADC_CFG3_CP_CLK_DIVIDER, 1u);
1444:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1445:.\Generated_Source\PSoC5/Volume_ADC.c ****             /* This is only valid if there is an internal clock */
1446:.\Generated_Source\PSoC5/Volume_ADC.c ****             #if(Volume_ADC_DEFAULT_INTERNAL_CLK)
1447:.\Generated_Source\PSoC5/Volume_ADC.c ****                 Volume_ADC_theACLK_SetDividerRegister(Volume_ADC_CFG3_ADC_CLK_DIVIDER, 1u);
1448:.\Generated_Source\PSoC5/Volume_ADC.c ****             #endif /* Volume_ADC_DEFAULT_INTERNAL_CLK */
1449:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1450:.\Generated_Source\PSoC5/Volume_ADC.c ****             #if(Volume_ADC_IRQ_REMOVE == 0u)
1451:.\Generated_Source\PSoC5/Volume_ADC.c ****                 /* Set interrupt vector */
1452:.\Generated_Source\PSoC5/Volume_ADC.c ****                 (void)CyIntSetVector(Volume_ADC_INTC_NUMBER, &Volume_ADC_ISR3);
1453:.\Generated_Source\PSoC5/Volume_ADC.c ****             #endif   /* End Volume_ADC_IRQ_REMOVE */
1454:.\Generated_Source\PSoC5/Volume_ADC.c ****         }
1455:.\Generated_Source\PSoC5/Volume_ADC.c ****     #endif /* Volume_ADC_DEFAULT_NUM_CONFIGS > 2 */
1456:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1457:.\Generated_Source\PSoC5/Volume_ADC.c ****     #if(Volume_ADC_DEFAULT_NUM_CONFIGS > 3)
1458:.\Generated_Source\PSoC5/Volume_ADC.c ****         if (config == 4u)
1459:.\Generated_Source\PSoC5/Volume_ADC.c ****         {
1460:.\Generated_Source\PSoC5/Volume_ADC.c ****             /* Fourth Config */
1461:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_CR_REG      = Volume_ADC_CFG4_DEC_CR;
1462:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_SHIFT1_REG  = Volume_ADC_CFG4_DEC_SHIFT1;
1463:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_SHIFT2_REG  = Volume_ADC_CFG4_DEC_SHIFT2;
1464:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_DR2_REG     = Volume_ADC_CFG4_DEC_DR2;
1465:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_DR2H_REG    = Volume_ADC_CFG4_DEC_DR2H;
1466:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_DR1_REG     = Volume_ADC_CFG4_DEC_DR1;
1467:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_OCOR_REG    = Volume_ADC_CFG4_DEC_OCOR;
1468:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_OCORM_REG   = Volume_ADC_CFG4_DEC_OCORM;
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 60


1469:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_OCORH_REG   = Volume_ADC_CFG4_DEC_OCORH;
1470:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DEC_COHER_REG   = Volume_ADC_CFG4_DEC_COHER;
1471:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1472:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR4_REG     = Volume_ADC_CFG4_DSM_CR4;
1473:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR5_REG     = Volume_ADC_CFG4_DSM_CR5;
1474:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR6_REG     = Volume_ADC_CFG4_DSM_CR6;
1475:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR7_REG     = Volume_ADC_CFG4_DSM_CR7;
1476:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR10_REG    = Volume_ADC_CFG4_DSM_CR10;
1477:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR11_REG    = Volume_ADC_CFG4_DSM_CR11;
1478:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR12_REG    = Volume_ADC_CFG4_DSM_CR12;
1479:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR14_REG    = Volume_ADC_CFG4_DSM_CR14;
1480:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR15_REG    = Volume_ADC_CFG4_DSM_CR15;
1481:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR16_REG    = Volume_ADC_CFG4_DSM_CR16;
1482:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_CR17_REG    = Volume_ADC_CFG4_DSM_CR17;
1483:.\Generated_Source\PSoC5/Volume_ADC.c ****             /* Set DSM_REF0_REG by disabling and enabling the PRESS circuit */
1484:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_SetDSMRef0Reg(Volume_ADC_CFG4_DSM_REF0);
1485:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_REF2_REG    = Volume_ADC_CFG4_DSM_REF2;
1486:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_REF3_REG    = Volume_ADC_CFG4_DSM_REF3;
1487:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1488:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_BUF0_REG    = Volume_ADC_CFG4_DSM_BUF0;
1489:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_BUF1_REG    = Volume_ADC_CFG4_DSM_BUF1;
1490:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_BUF2_REG    = Volume_ADC_CFG4_DSM_BUF2;
1491:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_DSM_BUF3_REG    = Volume_ADC_CFG4_DSM_BUF3;
1492:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1493:.\Generated_Source\PSoC5/Volume_ADC.c ****             /* To select either Vssa or Vref to -ve input of DSM depending on
1494:.\Generated_Source\PSoC5/Volume_ADC.c ****             *  the input range selected.
1495:.\Generated_Source\PSoC5/Volume_ADC.c ****             */
1496:.\Generated_Source\PSoC5/Volume_ADC.c ****             #if(Volume_ADC_DEFAULT_INPUT_MODE)
1497:.\Generated_Source\PSoC5/Volume_ADC.c ****                 #if (Volume_ADC_CFG4_INPUT_RANGE == Volume_ADC_IR_VSSA_TO_2VREF)
1498:.\Generated_Source\PSoC5/Volume_ADC.c ****                     Volume_ADC_AMux_Select(1u);
1499:.\Generated_Source\PSoC5/Volume_ADC.c ****                 #else
1500:.\Generated_Source\PSoC5/Volume_ADC.c ****                     Volume_ADC_AMux_Select(0u);
1501:.\Generated_Source\PSoC5/Volume_ADC.c ****                 #endif /* Volume_ADC_IR_VSSA_TO_2VREF) */
1502:.\Generated_Source\PSoC5/Volume_ADC.c ****             #endif /* Volume_ADC_DEFAULT_INPUT_MODE */
1503:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1504:.\Generated_Source\PSoC5/Volume_ADC.c ****             /* Set the Conversion stop if resolution is above 16 bit and
1505:.\Generated_Source\PSoC5/Volume_ADC.c ****                conversion mode is Single sample */
1506:.\Generated_Source\PSoC5/Volume_ADC.c ****             #if(Volume_ADC_CFG4_RESOLUTION > 16 && \
1507:.\Generated_Source\PSoC5/Volume_ADC.c ****                 Volume_ADC_CFG4_CONV_MODE == Volume_ADC_MODE_SINGLE_SAMPLE)
1508:.\Generated_Source\PSoC5/Volume_ADC.c ****                 Volume_ADC_stopConversion = 1u;
1509:.\Generated_Source\PSoC5/Volume_ADC.c ****             #endif /* Single sample with resolution above 16 bits */
1510:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1511:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_CountsPerVolt = (int32)Volume_ADC_CFG4_COUNTS_PER_VOLT;
1512:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1513:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_Ext_CP_Clk_SetDividerRegister(Volume_ADC_CFG4_CP_CLK_DIVIDER, 1u);
1514:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1515:.\Generated_Source\PSoC5/Volume_ADC.c ****             /* This is only valid if there is an internal clock */
1516:.\Generated_Source\PSoC5/Volume_ADC.c ****             #if(Volume_ADC_DEFAULT_INTERNAL_CLK)
1517:.\Generated_Source\PSoC5/Volume_ADC.c ****                 Volume_ADC_theACLK_SetDividerRegister(Volume_ADC_CFG4_ADC_CLK_DIVIDER, 1u);
1518:.\Generated_Source\PSoC5/Volume_ADC.c ****             #endif /* Volume_ADC_DEFAULT_INTERNAL_CLK */
1519:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1520:.\Generated_Source\PSoC5/Volume_ADC.c ****             #if(Volume_ADC_IRQ_REMOVE == 0u)
1521:.\Generated_Source\PSoC5/Volume_ADC.c ****                 /* Set interrupt vector */
1522:.\Generated_Source\PSoC5/Volume_ADC.c ****                 (void)CyIntSetVector(Volume_ADC_INTC_NUMBER, &Volume_ADC_ISR4);
1523:.\Generated_Source\PSoC5/Volume_ADC.c ****             #endif   /* End Volume_ADC_IRQ_REMOVE */
1524:.\Generated_Source\PSoC5/Volume_ADC.c ****         }
1525:.\Generated_Source\PSoC5/Volume_ADC.c ****     #endif /* Volume_ADC_DEFAULT_NUM_CONFIGS > 3 */
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 61


1526:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 1896              		.loc 1 1526 0
 1897 00de 0837     		adds	r7, r7, #8
 1898              		.cfi_def_cfa_offset 8
 1899 00e0 BD46     		mov	sp, r7
 1900              		.cfi_def_cfa_register 13
 1901              		@ sp needed
 1902 00e2 80BD     		pop	{r7, pc}
 1903              	.L101:
 1904              		.align	2
 1905              	.L100:
 1906 00e4 00000000 		.word	Volume_ADC_stopConversion
 1907 00e8 004E0040 		.word	1073761792
 1908 00ec 024E0040 		.word	1073761794
 1909 00f0 034E0040 		.word	1073761795
 1910 00f4 044E0040 		.word	1073761796
 1911 00f8 054E0040 		.word	1073761797
 1912 00fc 064E0040 		.word	1073761798
 1913 0100 084E0040 		.word	1073761800
 1914 0104 094E0040 		.word	1073761801
 1915 0108 0A4E0040 		.word	1073761802
 1916 010c 144E0040 		.word	1073761812
 1917 0110 84580040 		.word	1073764484
 1918 0114 85580040 		.word	1073764485
 1919 0118 86580040 		.word	1073764486
 1920 011c 87580040 		.word	1073764487
 1921 0120 8A580040 		.word	1073764490
 1922 0124 8B580040 		.word	1073764491
 1923 0128 8C580040 		.word	1073764492
 1924 012c 8E580040 		.word	1073764494
 1925 0130 8F580040 		.word	1073764495
 1926 0134 90580040 		.word	1073764496
 1927 0138 91580040 		.word	1073764497
 1928 013c 94580040 		.word	1073764500
 1929 0140 95580040 		.word	1073764501
 1930 0144 9A580040 		.word	1073764506
 1931 0148 9B580040 		.word	1073764507
 1932 014c 9C580040 		.word	1073764508
 1933 0150 9D580040 		.word	1073764509
 1934 0154 00000000 		.word	Volume_ADC_CountsPerVolt
 1935 0158 00000000 		.word	Volume_ADC_ISR1
 1936              		.cfi_endproc
 1937              	.LFE19:
 1938              		.size	Volume_ADC_InitConfig, .-Volume_ADC_InitConfig
 1939              		.section	.text.Volume_ADC_SelectConfiguration,"ax",%progbits
 1940              		.align	2
 1941              		.global	Volume_ADC_SelectConfiguration
 1942              		.thumb
 1943              		.thumb_func
 1944              		.type	Volume_ADC_SelectConfiguration, %function
 1945              	Volume_ADC_SelectConfiguration:
 1946              	.LFB20:
1527:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1528:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1529:.\Generated_Source\PSoC5/Volume_ADC.c **** /*******************************************************************************
1530:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_SelectCofiguration
1531:.\Generated_Source\PSoC5/Volume_ADC.c **** ********************************************************************************
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 62


1532:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1533:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
1534:.\Generated_Source\PSoC5/Volume_ADC.c **** *  Sets one of up to four ADC configurations. Before setting the new
1535:.\Generated_Source\PSoC5/Volume_ADC.c **** *  configuration, the ADC is stopped and powered down. After setting
1536:.\Generated_Source\PSoC5/Volume_ADC.c **** *  the new configuration, the ADC can be powered and conversion
1537:.\Generated_Source\PSoC5/Volume_ADC.c **** *  can be restarted depending up on the value of second parameter
1538:.\Generated_Source\PSoC5/Volume_ADC.c **** *  restart. If the value of this parameter is 1, then ADC will be
1539:.\Generated_Source\PSoC5/Volume_ADC.c **** *  restarted. If this value is zero, then user must call Volume_ADC_Start
1540:.\Generated_Source\PSoC5/Volume_ADC.c **** *  and Volume_ADC_StartConvert() to restart the conversion.
1541:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1542:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
1543:.\Generated_Source\PSoC5/Volume_ADC.c **** *  config:  configuration user wants to select.
1544:.\Generated_Source\PSoC5/Volume_ADC.c **** *           Valid range: 1..4
1545:.\Generated_Source\PSoC5/Volume_ADC.c **** *  restart:  Restart option. 1 means start the ADC and restart the conversion.
1546:.\Generated_Source\PSoC5/Volume_ADC.c **** *                            0 means do not start the ADC and conversion.
1547:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1548:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
1549:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
1550:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1551:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
1552:.\Generated_Source\PSoC5/Volume_ADC.c **** void Volume_ADC_SelectConfiguration(uint8 config, uint8 restart)
1553:.\Generated_Source\PSoC5/Volume_ADC.c ****                                               
1554:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 1947              		.loc 1 1554 0
 1948              		.cfi_startproc
 1949              		@ args = 0, pretend = 0, frame = 8
 1950              		@ frame_needed = 1, uses_anonymous_args = 0
 1951 0000 80B5     		push	{r7, lr}
 1952              		.cfi_def_cfa_offset 8
 1953              		.cfi_offset 7, -8
 1954              		.cfi_offset 14, -4
 1955 0002 82B0     		sub	sp, sp, #8
 1956              		.cfi_def_cfa_offset 16
 1957 0004 00AF     		add	r7, sp, #0
 1958              		.cfi_def_cfa_register 7
 1959 0006 0346     		mov	r3, r0
 1960 0008 0A46     		mov	r2, r1
 1961 000a FB71     		strb	r3, [r7, #7]
 1962 000c 1346     		mov	r3, r2
 1963 000e BB71     		strb	r3, [r7, #6]
1555:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Check whether the configuration number is valid or not */
1556:.\Generated_Source\PSoC5/Volume_ADC.c ****     if((config > 0u) && (config <= Volume_ADC_DEFAULT_NUM_CONFIGS))
 1964              		.loc 1 1556 0
 1965 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1966 0012 002B     		cmp	r3, #0
 1967 0014 2AD0     		beq	.L103
 1968              		.loc 1 1556 0 is_stmt 0 discriminator 1
 1969 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1970 0018 012B     		cmp	r3, #1
 1971 001a 27D8     		bhi	.L103
1557:.\Generated_Source\PSoC5/Volume_ADC.c ****     {
1558:.\Generated_Source\PSoC5/Volume_ADC.c ****         /* Set the flag to ensure Start() API doesn't override the 
1559:.\Generated_Source\PSoC5/Volume_ADC.c **** 		*  selected configuration
1560:.\Generated_Source\PSoC5/Volume_ADC.c **** 		*/
1561:.\Generated_Source\PSoC5/Volume_ADC.c ****         if(Volume_ADC_initVar == 0u)
 1972              		.loc 1 1561 0 is_stmt 1
 1973 001c 164B     		ldr	r3, .L107
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 63


 1974 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1975 0020 002B     		cmp	r3, #0
 1976 0022 02D1     		bne	.L104
1562:.\Generated_Source\PSoC5/Volume_ADC.c ****         {
1563:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_started = 1u;
 1977              		.loc 1 1563 0
 1978 0024 154B     		ldr	r3, .L107+4
 1979 0026 0122     		movs	r2, #1
 1980 0028 1A70     		strb	r2, [r3]
 1981              	.L104:
1564:.\Generated_Source\PSoC5/Volume_ADC.c ****         }
1565:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1566:.\Generated_Source\PSoC5/Volume_ADC.c ****         /* Update the config flag */
1567:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_Config = config;
 1982              		.loc 1 1567 0
 1983 002a 154A     		ldr	r2, .L107+8
 1984 002c FB79     		ldrb	r3, [r7, #7]
 1985 002e 1370     		strb	r3, [r2]
1568:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1569:.\Generated_Source\PSoC5/Volume_ADC.c ****         /* Stop the ADC  */
1570:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_Stop();
 1986              		.loc 1 1570 0
 1987 0030 FFF7FEFF 		bl	Volume_ADC_Stop
1571:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1572:.\Generated_Source\PSoC5/Volume_ADC.c ****         /* Set the  ADC registers based on the configuration */
1573:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_InitConfig(config);
 1988              		.loc 1 1573 0
 1989 0034 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1990 0036 1846     		mov	r0, r3
 1991 0038 FFF7FEFF 		bl	Volume_ADC_InitConfig
1574:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1575:.\Generated_Source\PSoC5/Volume_ADC.c ****         /* Compensate the gain */
1576:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_DEC_GVAL_REG = Volume_ADC_gcor[config - 1u].gval;
 1992              		.loc 1 1576 0
 1993 003c 114A     		ldr	r2, .L107+12
 1994 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1995 0040 013B     		subs	r3, r3, #1
 1996 0042 1149     		ldr	r1, .L107+16
 1997 0044 9B00     		lsls	r3, r3, #2
 1998 0046 0B44     		add	r3, r3, r1
 1999 0048 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2000 004a 1370     		strb	r3, [r2]
1577:.\Generated_Source\PSoC5/Volume_ADC.c ****         CY_SET_REG16(Volume_ADC_DEC_GCOR_16B_PTR, Volume_ADC_gcor[config - 1u].gcor);
 2001              		.loc 1 1577 0
 2002 004c 0F4A     		ldr	r2, .L107+20
 2003 004e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2004 0050 013B     		subs	r3, r3, #1
 2005 0052 0D49     		ldr	r1, .L107+16
 2006 0054 31F82330 		ldrh	r3, [r1, r3, lsl #2]
 2007 0058 1380     		strh	r3, [r2]	@ movhi
1578:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1579:.\Generated_Source\PSoC5/Volume_ADC.c ****         if(restart == 1u)
 2008              		.loc 1 1579 0
 2009 005a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2010 005c 012B     		cmp	r3, #1
 2011 005e 04D1     		bne	.L105
1580:.\Generated_Source\PSoC5/Volume_ADC.c ****         {
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 64


1581:.\Generated_Source\PSoC5/Volume_ADC.c ****             /* Restart the ADC */
1582:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_Start();
 2012              		.loc 1 1582 0
 2013 0060 FFF7FEFF 		bl	Volume_ADC_Start
1583:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1584:.\Generated_Source\PSoC5/Volume_ADC.c ****             /* Restart the ADC conversion */
1585:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_StartConvert();
 2014              		.loc 1 1585 0
 2015 0064 FFF7FEFF 		bl	Volume_ADC_StartConvert
1579:.\Generated_Source\PSoC5/Volume_ADC.c ****         {
 2016              		.loc 1 1579 0
 2017 0068 03E0     		b	.L102
 2018              	.L105:
 2019 006a 02E0     		b	.L102
 2020              	.L103:
1586:.\Generated_Source\PSoC5/Volume_ADC.c ****         }
1587:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
1588:.\Generated_Source\PSoC5/Volume_ADC.c ****     else
1589:.\Generated_Source\PSoC5/Volume_ADC.c ****     {
1590:.\Generated_Source\PSoC5/Volume_ADC.c ****         /* Halt CPU in debug mode if config is out of valid range */
1591:.\Generated_Source\PSoC5/Volume_ADC.c ****         CYASSERT(0u != 0u);
 2021              		.loc 1 1591 0 discriminator 1
 2022 006c 0020     		movs	r0, #0
 2023 006e FFF7FEFF 		bl	CyHalt
 2024              	.L102:
1592:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
1593:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 2025              		.loc 1 1593 0
 2026 0072 0837     		adds	r7, r7, #8
 2027              		.cfi_def_cfa_offset 8
 2028 0074 BD46     		mov	sp, r7
 2029              		.cfi_def_cfa_register 13
 2030              		@ sp needed
 2031 0076 80BD     		pop	{r7, pc}
 2032              	.L108:
 2033              		.align	2
 2034              	.L107:
 2035 0078 00000000 		.word	Volume_ADC_initVar
 2036 007c 00000000 		.word	Volume_ADC_started
 2037 0080 00000000 		.word	Volume_ADC_Config
 2038 0084 0E4E0040 		.word	1073761806
 2039 0088 04000000 		.word	Volume_ADC_gcor
 2040 008c 0C4E0040 		.word	1073761804
 2041              		.cfi_endproc
 2042              	.LFE20:
 2043              		.size	Volume_ADC_SelectConfiguration, .-Volume_ADC_SelectConfiguration
 2044              		.section	.text.Volume_ADC_GainCompensation,"ax",%progbits
 2045              		.align	2
 2046              		.thumb
 2047              		.thumb_func
 2048              		.type	Volume_ADC_GainCompensation, %function
 2049              	Volume_ADC_GainCompensation:
 2050              	.LFB21:
1594:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1595:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1596:.\Generated_Source\PSoC5/Volume_ADC.c **** /*******************************************************************************
1597:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_GainCompensation
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 65


1598:.\Generated_Source\PSoC5/Volume_ADC.c **** ********************************************************************************
1599:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1600:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
1601:.\Generated_Source\PSoC5/Volume_ADC.c **** *  This API calculates the trim value and then store this to gcor structure.
1602:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1603:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
1604:.\Generated_Source\PSoC5/Volume_ADC.c **** *  inputRange:  input range for which trim value is to be calculated.
1605:.\Generated_Source\PSoC5/Volume_ADC.c **** *  IdealDecGain:  Ideal Decimator gain for the selected resolution and
1606:.\Generated_Source\PSoC5/Volume_ADC.c **** *                 conversion  mode.
1607:.\Generated_Source\PSoC5/Volume_ADC.c **** *  IdealOddDecGain:  Ideal odd decimation gain for the selected resolution and
1608:.\Generated_Source\PSoC5/Volume_ADC.c ****                      conversion mode.
1609:.\Generated_Source\PSoC5/Volume_ADC.c **** *  resolution:  Resolution to select the proper flash location for trim value.
1610:.\Generated_Source\PSoC5/Volume_ADC.c **** *  config:      Specifies the configuration number
1611:.\Generated_Source\PSoC5/Volume_ADC.c **** *               Valid range: 1..4
1612:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1613:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
1614:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
1615:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1616:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
1617:.\Generated_Source\PSoC5/Volume_ADC.c **** static void Volume_ADC_GainCompensation(uint8 inputRange, uint16 idealDecGain, uint16 idealOddDecGa
1618:.\Generated_Source\PSoC5/Volume_ADC.c ****                               uint8 resolution, uint8 config) 
1619:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 2051              		.loc 1 1619 0
 2052              		.cfi_startproc
 2053              		@ args = 4, pretend = 0, frame = 24
 2054              		@ frame_needed = 1, uses_anonymous_args = 0
 2055 0000 90B5     		push	{r4, r7, lr}
 2056              		.cfi_def_cfa_offset 12
 2057              		.cfi_offset 4, -12
 2058              		.cfi_offset 7, -8
 2059              		.cfi_offset 14, -4
 2060 0002 87B0     		sub	sp, sp, #28
 2061              		.cfi_def_cfa_offset 40
 2062 0004 00AF     		add	r7, sp, #0
 2063              		.cfi_def_cfa_register 7
 2064 0006 0446     		mov	r4, r0
 2065 0008 0846     		mov	r0, r1
 2066 000a 1146     		mov	r1, r2
 2067 000c 1A46     		mov	r2, r3
 2068 000e 2346     		mov	r3, r4
 2069 0010 FB71     		strb	r3, [r7, #7]
 2070 0012 0346     		mov	r3, r0	@ movhi
 2071 0014 BB80     		strh	r3, [r7, #4]	@ movhi
 2072 0016 0B46     		mov	r3, r1	@ movhi
 2073 0018 7B80     		strh	r3, [r7, #2]	@ movhi
 2074 001a 1346     		mov	r3, r2
 2075 001c BB71     		strb	r3, [r7, #6]
1620:.\Generated_Source\PSoC5/Volume_ADC.c ****     int8 flash;
1621:.\Generated_Source\PSoC5/Volume_ADC.c **** 	int32 normalised;
1622:.\Generated_Source\PSoC5/Volume_ADC.c **** 	uint16 gcorValue;
1623:.\Generated_Source\PSoC5/Volume_ADC.c ****     uint32 gcorTmp;
1624:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1625:.\Generated_Source\PSoC5/Volume_ADC.c ****     if((config > 0u) && (config <= Volume_ADC_DEFAULT_NUM_CONFIGS))
 2076              		.loc 1 1625 0
 2077 001e 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 2078 0022 002B     		cmp	r3, #0
 2079 0024 00F08A80 		beq	.L110
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 66


 2080              		.loc 1 1625 0 is_stmt 0 discriminator 1
 2081 0028 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 2082 002c 012B     		cmp	r3, #1
 2083 002e 00F28580 		bhi	.L110
1626:.\Generated_Source\PSoC5/Volume_ADC.c ****     {
1627:.\Generated_Source\PSoC5/Volume_ADC.c ****         switch(inputRange)
 2084              		.loc 1 1627 0 is_stmt 1
 2085 0032 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2086 0034 013B     		subs	r3, r3, #1
 2087 0036 092B     		cmp	r3, #9
 2088 0038 4AD8     		bhi	.L111
 2089 003a 01A2     		adr	r2, .L113
 2090 003c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2091              		.p2align 2
 2092              	.L113:
 2093 0040 69000000 		.word	.L112+1
 2094 0044 D1000000 		.word	.L111+1
 2095 0048 D1000000 		.word	.L111+1
 2096 004c 69000000 		.word	.L112+1
 2097 0050 D1000000 		.word	.L111+1
 2098 0054 D1000000 		.word	.L111+1
 2099 0058 83000000 		.word	.L114+1
 2100 005c 9D000000 		.word	.L115+1
 2101 0060 D1000000 		.word	.L111+1
 2102 0064 B7000000 		.word	.L116+1
 2103              		.p2align 1
 2104              	.L112:
1628:.\Generated_Source\PSoC5/Volume_ADC.c ****         {
1629:.\Generated_Source\PSoC5/Volume_ADC.c ****             case Volume_ADC_IR_VNEG_VREF_DIFF:
1630:.\Generated_Source\PSoC5/Volume_ADC.c ****             case Volume_ADC_IR_VSSA_TO_2VREF:
1631:.\Generated_Source\PSoC5/Volume_ADC.c ****                 /* Normalize the flash Value */
1632:.\Generated_Source\PSoC5/Volume_ADC.c ****                 if(resolution > 15u)
 2105              		.loc 1 1632 0
 2106 0068 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2107 006a 0F2B     		cmp	r3, #15
 2108 006c 04D9     		bls	.L117
1633:.\Generated_Source\PSoC5/Volume_ADC.c ****                 {
1634:.\Generated_Source\PSoC5/Volume_ADC.c ****                     flash = Volume_ADC_DEC_TRIM_VREF_DIFF_16_20;
 2109              		.loc 1 1634 0
 2110 006e 364B     		ldr	r3, .L129
 2111 0070 1B78     		ldrb	r3, [r3]
 2112 0072 DBB2     		uxtb	r3, r3
 2113 0074 FB75     		strb	r3, [r7, #23]
1635:.\Generated_Source\PSoC5/Volume_ADC.c ****                 }
1636:.\Generated_Source\PSoC5/Volume_ADC.c ****                 else
1637:.\Generated_Source\PSoC5/Volume_ADC.c ****                 {
1638:.\Generated_Source\PSoC5/Volume_ADC.c ****                     flash = Volume_ADC_DEC_TRIM_VREF_DIFF_8_15;
1639:.\Generated_Source\PSoC5/Volume_ADC.c ****                 }
1640:.\Generated_Source\PSoC5/Volume_ADC.c ****                 break;
 2114              		.loc 1 1640 0
 2115 0076 2EE0     		b	.L119
 2116              	.L117:
1638:.\Generated_Source\PSoC5/Volume_ADC.c ****                 }
 2117              		.loc 1 1638 0
 2118 0078 344B     		ldr	r3, .L129+4
 2119 007a 1B78     		ldrb	r3, [r3]
 2120 007c DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 67


 2121 007e FB75     		strb	r3, [r7, #23]
 2122              		.loc 1 1640 0
 2123 0080 29E0     		b	.L119
 2124              	.L114:
1641:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1642:.\Generated_Source\PSoC5/Volume_ADC.c ****             case Volume_ADC_IR_VNEG_VREF_2_DIFF:
1643:.\Generated_Source\PSoC5/Volume_ADC.c ****                 /* Normalize the flash Value */
1644:.\Generated_Source\PSoC5/Volume_ADC.c ****                 if(resolution > 15u)
 2125              		.loc 1 1644 0
 2126 0082 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2127 0084 0F2B     		cmp	r3, #15
 2128 0086 04D9     		bls	.L120
1645:.\Generated_Source\PSoC5/Volume_ADC.c ****                 {
1646:.\Generated_Source\PSoC5/Volume_ADC.c ****                     flash = Volume_ADC_DEC_TRIM_VREF_2_DIFF_16_20;
 2129              		.loc 1 1646 0
 2130 0088 314B     		ldr	r3, .L129+8
 2131 008a 1B78     		ldrb	r3, [r3]
 2132 008c DBB2     		uxtb	r3, r3
 2133 008e FB75     		strb	r3, [r7, #23]
1647:.\Generated_Source\PSoC5/Volume_ADC.c ****                 }
1648:.\Generated_Source\PSoC5/Volume_ADC.c ****                 else
1649:.\Generated_Source\PSoC5/Volume_ADC.c ****                 {
1650:.\Generated_Source\PSoC5/Volume_ADC.c ****                     flash = Volume_ADC_DEC_TRIM_VREF_2_DIFF_8_15;
1651:.\Generated_Source\PSoC5/Volume_ADC.c ****                 }
1652:.\Generated_Source\PSoC5/Volume_ADC.c ****                 break;
 2134              		.loc 1 1652 0
 2135 0090 21E0     		b	.L119
 2136              	.L120:
1650:.\Generated_Source\PSoC5/Volume_ADC.c ****                 }
 2137              		.loc 1 1650 0
 2138 0092 304B     		ldr	r3, .L129+12
 2139 0094 1B78     		ldrb	r3, [r3]
 2140 0096 DBB2     		uxtb	r3, r3
 2141 0098 FB75     		strb	r3, [r7, #23]
 2142              		.loc 1 1652 0
 2143 009a 1CE0     		b	.L119
 2144              	.L115:
1653:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1654:.\Generated_Source\PSoC5/Volume_ADC.c ****             case Volume_ADC_IR_VNEG_VREF_4_DIFF:
1655:.\Generated_Source\PSoC5/Volume_ADC.c ****                 /* Normalize the flash Value */
1656:.\Generated_Source\PSoC5/Volume_ADC.c ****                 if(resolution > 15u)
 2145              		.loc 1 1656 0
 2146 009c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2147 009e 0F2B     		cmp	r3, #15
 2148 00a0 04D9     		bls	.L122
1657:.\Generated_Source\PSoC5/Volume_ADC.c ****                 {
1658:.\Generated_Source\PSoC5/Volume_ADC.c ****                     flash = Volume_ADC_DEC_TRIM_VREF_4_DIFF_16_20;
 2149              		.loc 1 1658 0
 2150 00a2 2D4B     		ldr	r3, .L129+16
 2151 00a4 1B78     		ldrb	r3, [r3]
 2152 00a6 DBB2     		uxtb	r3, r3
 2153 00a8 FB75     		strb	r3, [r7, #23]
1659:.\Generated_Source\PSoC5/Volume_ADC.c ****                 }
1660:.\Generated_Source\PSoC5/Volume_ADC.c ****                 else
1661:.\Generated_Source\PSoC5/Volume_ADC.c ****                 {
1662:.\Generated_Source\PSoC5/Volume_ADC.c ****                     flash = Volume_ADC_DEC_TRIM_VREF_4_DIFF_8_15;
1663:.\Generated_Source\PSoC5/Volume_ADC.c ****                 }
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 68


1664:.\Generated_Source\PSoC5/Volume_ADC.c ****                 break;
 2154              		.loc 1 1664 0
 2155 00aa 14E0     		b	.L119
 2156              	.L122:
1662:.\Generated_Source\PSoC5/Volume_ADC.c ****                 }
 2157              		.loc 1 1662 0
 2158 00ac 2B4B     		ldr	r3, .L129+20
 2159 00ae 1B78     		ldrb	r3, [r3]
 2160 00b0 DBB2     		uxtb	r3, r3
 2161 00b2 FB75     		strb	r3, [r7, #23]
 2162              		.loc 1 1664 0
 2163 00b4 0FE0     		b	.L119
 2164              	.L116:
1665:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1666:.\Generated_Source\PSoC5/Volume_ADC.c ****             case Volume_ADC_IR_VNEG_VREF_16_DIFF:
1667:.\Generated_Source\PSoC5/Volume_ADC.c ****                 /* Normalize the flash Value */
1668:.\Generated_Source\PSoC5/Volume_ADC.c ****                 if(resolution > 15u)
 2165              		.loc 1 1668 0
 2166 00b6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2167 00b8 0F2B     		cmp	r3, #15
 2168 00ba 04D9     		bls	.L124
1669:.\Generated_Source\PSoC5/Volume_ADC.c ****                 {
1670:.\Generated_Source\PSoC5/Volume_ADC.c ****                     flash = Volume_ADC_DEC_TRIM_VREF_16_DIFF_16_20;
 2169              		.loc 1 1670 0
 2170 00bc 284B     		ldr	r3, .L129+24
 2171 00be 1B78     		ldrb	r3, [r3]
 2172 00c0 DBB2     		uxtb	r3, r3
 2173 00c2 FB75     		strb	r3, [r7, #23]
1671:.\Generated_Source\PSoC5/Volume_ADC.c ****                 }
1672:.\Generated_Source\PSoC5/Volume_ADC.c ****                 else
1673:.\Generated_Source\PSoC5/Volume_ADC.c ****                 {
1674:.\Generated_Source\PSoC5/Volume_ADC.c ****                     flash = Volume_ADC_DEC_TRIM_VREF_16_DIFF_8_15;
1675:.\Generated_Source\PSoC5/Volume_ADC.c ****                 }
1676:.\Generated_Source\PSoC5/Volume_ADC.c ****                 break;
 2174              		.loc 1 1676 0
 2175 00c4 07E0     		b	.L119
 2176              	.L124:
1674:.\Generated_Source\PSoC5/Volume_ADC.c ****                 }
 2177              		.loc 1 1674 0
 2178 00c6 274B     		ldr	r3, .L129+28
 2179 00c8 1B78     		ldrb	r3, [r3]
 2180 00ca DBB2     		uxtb	r3, r3
 2181 00cc FB75     		strb	r3, [r7, #23]
 2182              		.loc 1 1676 0
 2183 00ce 02E0     		b	.L119
 2184              	.L111:
1677:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1678:.\Generated_Source\PSoC5/Volume_ADC.c ****             default:
1679:.\Generated_Source\PSoC5/Volume_ADC.c ****                 flash = 0;
 2185              		.loc 1 1679 0
 2186 00d0 0023     		movs	r3, #0
 2187 00d2 FB75     		strb	r3, [r7, #23]
1680:.\Generated_Source\PSoC5/Volume_ADC.c ****                 break;
 2188              		.loc 1 1680 0
 2189 00d4 00BF     		nop
 2190              	.L119:
1681:.\Generated_Source\PSoC5/Volume_ADC.c ****         }
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 69


1682:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1683:.\Generated_Source\PSoC5/Volume_ADC.c ****         /* Add two values */
1684:.\Generated_Source\PSoC5/Volume_ADC.c **** 		normalised = (int32)idealDecGain + ((int32)flash * 32);
 2191              		.loc 1 1684 0
 2192 00d6 BA88     		ldrh	r2, [r7, #4]
 2193 00d8 97F91730 		ldrsb	r3, [r7, #23]
 2194 00dc 5B01     		lsls	r3, r3, #5
 2195 00de 1344     		add	r3, r3, r2
 2196 00e0 3B61     		str	r3, [r7, #16]
1685:.\Generated_Source\PSoC5/Volume_ADC.c ****         gcorTmp = (uint32)normalised * (uint32)idealOddDecGain;
 2197              		.loc 1 1685 0
 2198 00e2 7B88     		ldrh	r3, [r7, #2]
 2199 00e4 3A69     		ldr	r2, [r7, #16]
 2200 00e6 02FB03F3 		mul	r3, r2, r3
 2201 00ea FB60     		str	r3, [r7, #12]
1686:.\Generated_Source\PSoC5/Volume_ADC.c ****         gcorValue = (uint16)(gcorTmp / Volume_ADC_IDEAL_GAIN_CONST);
 2202              		.loc 1 1686 0
 2203 00ec FB68     		ldr	r3, [r7, #12]
 2204 00ee DB0B     		lsrs	r3, r3, #15
 2205 00f0 BB82     		strh	r3, [r7, #20]	@ movhi
1687:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1688:.\Generated_Source\PSoC5/Volume_ADC.c ****         if (resolution < (Volume_ADC_MAX_GVAL - 1u))
 2206              		.loc 1 1688 0
 2207 00f2 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2208 00f4 0D2B     		cmp	r3, #13
 2209 00f6 11D8     		bhi	.L126
1689:.\Generated_Source\PSoC5/Volume_ADC.c ****         {
1690:.\Generated_Source\PSoC5/Volume_ADC.c ****             gcorValue = (gcorValue >> (Volume_ADC_MAX_GVAL - (resolution + 1u)));
 2210              		.loc 1 1690 0
 2211 00f8 BB8A     		ldrh	r3, [r7, #20]
 2212 00fa BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 2213 00fc C2F10E02 		rsb	r2, r2, #14
 2214 0100 1341     		asrs	r3, r3, r2
 2215 0102 BB82     		strh	r3, [r7, #20]	@ movhi
1691:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_gcor[config - 1u].gval = (resolution + 1u);
 2216              		.loc 1 1691 0
 2217 0104 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 2218 0108 013B     		subs	r3, r3, #1
 2219 010a BA79     		ldrb	r2, [r7, #6]
 2220 010c 0132     		adds	r2, r2, #1
 2221 010e D1B2     		uxtb	r1, r2
 2222 0110 154A     		ldr	r2, .L129+32
 2223 0112 9B00     		lsls	r3, r3, #2
 2224 0114 1344     		add	r3, r3, r2
 2225 0116 0A46     		mov	r2, r1
 2226 0118 9A70     		strb	r2, [r3, #2]
 2227 011a 07E0     		b	.L127
 2228              	.L126:
1692:.\Generated_Source\PSoC5/Volume_ADC.c ****         }
1693:.\Generated_Source\PSoC5/Volume_ADC.c ****         else
1694:.\Generated_Source\PSoC5/Volume_ADC.c ****         {
1695:.\Generated_Source\PSoC5/Volume_ADC.c ****             /* Use all 16 bits */
1696:.\Generated_Source\PSoC5/Volume_ADC.c ****             Volume_ADC_gcor[config - 1u].gval = Volume_ADC_MAX_GVAL;
 2229              		.loc 1 1696 0
 2230 011c 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 2231 0120 013B     		subs	r3, r3, #1
 2232 0122 114A     		ldr	r2, .L129+32
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 70


 2233 0124 9B00     		lsls	r3, r3, #2
 2234 0126 1344     		add	r3, r3, r2
 2235 0128 0F22     		movs	r2, #15
 2236 012a 9A70     		strb	r2, [r3, #2]
 2237              	.L127:
1697:.\Generated_Source\PSoC5/Volume_ADC.c ****         }
1698:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1699:.\Generated_Source\PSoC5/Volume_ADC.c ****         /* Save the gain correction register value */
1700:.\Generated_Source\PSoC5/Volume_ADC.c ****         Volume_ADC_gcor[config - 1u].gcor = gcorValue;
 2238              		.loc 1 1700 0
 2239 012c 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 2240 0130 013B     		subs	r3, r3, #1
 2241 0132 0D49     		ldr	r1, .L129+32
 2242 0134 BA8A     		ldrh	r2, [r7, #20]	@ movhi
 2243 0136 21F82320 		strh	r2, [r1, r3, lsl #2]	@ movhi
 2244 013a 02E0     		b	.L109
 2245              	.L110:
1701:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
1702:.\Generated_Source\PSoC5/Volume_ADC.c ****     else
1703:.\Generated_Source\PSoC5/Volume_ADC.c ****     {
1704:.\Generated_Source\PSoC5/Volume_ADC.c ****         /* Halt CPU in debug mode if config is out of valid range */
1705:.\Generated_Source\PSoC5/Volume_ADC.c ****         CYASSERT(0u != 0u);
 2246              		.loc 1 1705 0 discriminator 1
 2247 013c 0020     		movs	r0, #0
 2248 013e FFF7FEFF 		bl	CyHalt
 2249              	.L109:
1706:.\Generated_Source\PSoC5/Volume_ADC.c ****     }
1707:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 2250              		.loc 1 1707 0
 2251 0142 1C37     		adds	r7, r7, #28
 2252              		.cfi_def_cfa_offset 12
 2253 0144 BD46     		mov	sp, r7
 2254              		.cfi_def_cfa_register 13
 2255              		@ sp needed
 2256 0146 90BD     		pop	{r4, r7, pc}
 2257              	.L130:
 2258              		.align	2
 2259              	.L129:
 2260 0148 18010049 		.word	1224737048
 2261 014c 1C010049 		.word	1224737052
 2262 0150 19010049 		.word	1224737049
 2263 0154 1D010049 		.word	1224737053
 2264 0158 1A010049 		.word	1224737050
 2265 015c 1E010049 		.word	1224737054
 2266 0160 1B010049 		.word	1224737051
 2267 0164 1F010049 		.word	1224737055
 2268 0168 04000000 		.word	Volume_ADC_gcor
 2269              		.cfi_endproc
 2270              	.LFE21:
 2271              		.size	Volume_ADC_GainCompensation, .-Volume_ADC_GainCompensation
 2272              		.section	.text.Volume_ADC_SetDSMRef0Reg,"ax",%progbits
 2273              		.align	2
 2274              		.thumb
 2275              		.thumb_func
 2276              		.type	Volume_ADC_SetDSMRef0Reg, %function
 2277              	Volume_ADC_SetDSMRef0Reg:
 2278              	.LFB22:
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 71


1708:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1709:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1710:.\Generated_Source\PSoC5/Volume_ADC.c **** /******************************************************************************
1711:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_SetDSMRef0Reg(uint8)
1712:.\Generated_Source\PSoC5/Volume_ADC.c **** ******************************************************************************
1713:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1714:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
1715:.\Generated_Source\PSoC5/Volume_ADC.c **** *  This API sets the DSM_REF0 register. This is written for internal use.
1716:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1717:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
1718:.\Generated_Source\PSoC5/Volume_ADC.c **** *  value:  Value to be written to DSM_REF0 register.
1719:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1720:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
1721:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
1722:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1723:.\Generated_Source\PSoC5/Volume_ADC.c **** ******************************************************************************/
1724:.\Generated_Source\PSoC5/Volume_ADC.c **** static void Volume_ADC_SetDSMRef0Reg(uint8 value) 
1725:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 2279              		.loc 1 1725 0
 2280              		.cfi_startproc
 2281              		@ args = 0, pretend = 0, frame = 16
 2282              		@ frame_needed = 1, uses_anonymous_args = 0
 2283 0000 80B5     		push	{r7, lr}
 2284              		.cfi_def_cfa_offset 8
 2285              		.cfi_offset 7, -8
 2286              		.cfi_offset 14, -4
 2287 0002 84B0     		sub	sp, sp, #16
 2288              		.cfi_def_cfa_offset 24
 2289 0004 00AF     		add	r7, sp, #0
 2290              		.cfi_def_cfa_register 7
 2291 0006 0346     		mov	r3, r0
 2292 0008 FB71     		strb	r3, [r7, #7]
1726:.\Generated_Source\PSoC5/Volume_ADC.c ****     uint8 enableInterrupts;
1727:.\Generated_Source\PSoC5/Volume_ADC.c ****     enableInterrupts = CyEnterCriticalSection();
 2293              		.loc 1 1727 0
 2294 000a FFF7FEFF 		bl	CyEnterCriticalSection
 2295 000e 0346     		mov	r3, r0
 2296 0010 FB73     		strb	r3, [r7, #15]
1728:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1729:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Disable PRES, Enable power to VCMBUF0, REFBUF0 and REFBUF1, enable PRES */
1730:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_RESET_CR4_REG |= (Volume_ADC_IGNORE_PRESA1 | Volume_ADC_IGNORE_PRESD1);
 2297              		.loc 1 1730 0
 2298 0012 164A     		ldr	r2, .L132
 2299 0014 154B     		ldr	r3, .L132
 2300 0016 1B78     		ldrb	r3, [r3]
 2301 0018 DBB2     		uxtb	r3, r3
 2302 001a 43F00303 		orr	r3, r3, #3
 2303 001e DBB2     		uxtb	r3, r3
 2304 0020 1370     		strb	r3, [r2]
1731:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_RESET_CR5_REG |= (Volume_ADC_IGNORE_PRESA2 | Volume_ADC_IGNORE_PRESD2);
 2305              		.loc 1 1731 0
 2306 0022 134A     		ldr	r2, .L132+4
 2307 0024 124B     		ldr	r3, .L132+4
 2308 0026 1B78     		ldrb	r3, [r3]
 2309 0028 DBB2     		uxtb	r3, r3
 2310 002a 43F00303 		orr	r3, r3, #3
 2311 002e DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 72


 2312 0030 1370     		strb	r3, [r2]
1732:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DSM_REF0_REG = value;
 2313              		.loc 1 1732 0
 2314 0032 104A     		ldr	r2, .L132+8
 2315 0034 FB79     		ldrb	r3, [r7, #7]
 2316 0036 1370     		strb	r3, [r2]
1733:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1734:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Wait for 3 microseconds */
1735:.\Generated_Source\PSoC5/Volume_ADC.c ****     CyDelayUs(Volume_ADC_PRES_DELAY_TIME);
 2317              		.loc 1 1735 0
 2318 0038 0320     		movs	r0, #3
 2319 003a FFF7FEFF 		bl	CyDelayUs
1736:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Enable the press circuit */
1737:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_RESET_CR4_REG &= (uint8)~(Volume_ADC_IGNORE_PRESA1 | Volume_ADC_IGNORE_PRESD1);
 2320              		.loc 1 1737 0
 2321 003e 0B4A     		ldr	r2, .L132
 2322 0040 0A4B     		ldr	r3, .L132
 2323 0042 1B78     		ldrb	r3, [r3]
 2324 0044 DBB2     		uxtb	r3, r3
 2325 0046 23F00303 		bic	r3, r3, #3
 2326 004a DBB2     		uxtb	r3, r3
 2327 004c 1370     		strb	r3, [r2]
1738:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_RESET_CR5_REG &= (uint8)~(Volume_ADC_IGNORE_PRESA2 | Volume_ADC_IGNORE_PRESD2);
 2328              		.loc 1 1738 0
 2329 004e 084A     		ldr	r2, .L132+4
 2330 0050 074B     		ldr	r3, .L132+4
 2331 0052 1B78     		ldrb	r3, [r3]
 2332 0054 DBB2     		uxtb	r3, r3
 2333 0056 23F00303 		bic	r3, r3, #3
 2334 005a DBB2     		uxtb	r3, r3
 2335 005c 1370     		strb	r3, [r2]
1739:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1740:.\Generated_Source\PSoC5/Volume_ADC.c ****     CyExitCriticalSection(enableInterrupts);
 2336              		.loc 1 1740 0
 2337 005e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2338 0060 1846     		mov	r0, r3
 2339 0062 FFF7FEFF 		bl	CyExitCriticalSection
1741:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 2340              		.loc 1 1741 0
 2341 0066 1037     		adds	r7, r7, #16
 2342              		.cfi_def_cfa_offset 8
 2343 0068 BD46     		mov	sp, r7
 2344              		.cfi_def_cfa_register 13
 2345              		@ sp needed
 2346 006a 80BD     		pop	{r7, pc}
 2347              	.L133:
 2348              		.align	2
 2349              	.L132:
 2350 006c F8460040 		.word	1073759992
 2351 0070 F9460040 		.word	1073759993
 2352 0074 92580040 		.word	1073764498
 2353              		.cfi_endproc
 2354              	.LFE22:
 2355              		.size	Volume_ADC_SetDSMRef0Reg, .-Volume_ADC_SetDSMRef0Reg
 2356              		.section	.text.Volume_ADC_Read8,"ax",%progbits
 2357              		.align	2
 2358              		.global	Volume_ADC_Read8
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 73


 2359              		.thumb
 2360              		.thumb_func
 2361              		.type	Volume_ADC_Read8, %function
 2362              	Volume_ADC_Read8:
 2363              	.LFB23:
1742:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1743:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1744:.\Generated_Source\PSoC5/Volume_ADC.c **** /*******************************************************************************
1745:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_Read8
1746:.\Generated_Source\PSoC5/Volume_ADC.c **** ********************************************************************************
1747:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1748:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
1749:.\Generated_Source\PSoC5/Volume_ADC.c **** *  This function simplifies getting results from the ADC when only a
1750:.\Generated_Source\PSoC5/Volume_ADC.c **** *  single reading is required. When called, it will start ADC
1751:.\Generated_Source\PSoC5/Volume_ADC.c **** *  conversions, wait for the conversion to be complete, stop ADC
1752:.\Generated_Source\PSoC5/Volume_ADC.c **** *  conversion and return the result. This is a blocking function and will
1753:.\Generated_Source\PSoC5/Volume_ADC.c **** *  not return until the result is ready.
1754:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1755:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
1756:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
1757:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1758:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
1759:.\Generated_Source\PSoC5/Volume_ADC.c **** *  int8:  ADC result.
1760:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1761:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
1762:.\Generated_Source\PSoC5/Volume_ADC.c **** int8 Volume_ADC_Read8(void) 
1763:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 2364              		.loc 1 1763 0
 2365              		.cfi_startproc
 2366              		@ args = 0, pretend = 0, frame = 8
 2367              		@ frame_needed = 1, uses_anonymous_args = 0
 2368 0000 80B5     		push	{r7, lr}
 2369              		.cfi_def_cfa_offset 8
 2370              		.cfi_offset 7, -8
 2371              		.cfi_offset 14, -4
 2372 0002 82B0     		sub	sp, sp, #8
 2373              		.cfi_def_cfa_offset 16
 2374 0004 00AF     		add	r7, sp, #0
 2375              		.cfi_def_cfa_register 7
1764:.\Generated_Source\PSoC5/Volume_ADC.c ****     int8 result;
1765:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1766:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Clear pending conversion done status */
1767:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DEC_SR_REG |= Volume_ADC_DEC_INTR_CLEAR;
 2376              		.loc 1 1767 0
 2377 0006 0C4A     		ldr	r2, .L136
 2378 0008 0B4B     		ldr	r3, .L136
 2379 000a 1B78     		ldrb	r3, [r3]
 2380 000c DBB2     		uxtb	r3, r3
 2381 000e 43F00403 		orr	r3, r3, #4
 2382 0012 DBB2     		uxtb	r3, r3
 2383 0014 1370     		strb	r3, [r2]
1768:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_StartConvert();
 2384              		.loc 1 1768 0
 2385 0016 FFF7FEFF 		bl	Volume_ADC_StartConvert
1769:.\Generated_Source\PSoC5/Volume_ADC.c ****     (void)Volume_ADC_IsEndConversion(Volume_ADC_WAIT_FOR_RESULT);
 2386              		.loc 1 1769 0
 2387 001a 0020     		movs	r0, #0
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 74


 2388 001c FFF7FEFF 		bl	Volume_ADC_IsEndConversion
1770:.\Generated_Source\PSoC5/Volume_ADC.c ****      result = Volume_ADC_GetResult8();
 2389              		.loc 1 1770 0
 2390 0020 FFF7FEFF 		bl	Volume_ADC_GetResult8
 2391 0024 0346     		mov	r3, r0
 2392 0026 FB71     		strb	r3, [r7, #7]
1771:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_StopConvert();
 2393              		.loc 1 1771 0
 2394 0028 FFF7FEFF 		bl	Volume_ADC_StopConvert
1772:.\Generated_Source\PSoC5/Volume_ADC.c ****     
1773:.\Generated_Source\PSoC5/Volume_ADC.c ****      return(result);
 2395              		.loc 1 1773 0
 2396 002c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2397 002e 5BB2     		sxtb	r3, r3
1774:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 2398              		.loc 1 1774 0
 2399 0030 1846     		mov	r0, r3
 2400 0032 0837     		adds	r7, r7, #8
 2401              		.cfi_def_cfa_offset 8
 2402 0034 BD46     		mov	sp, r7
 2403              		.cfi_def_cfa_register 13
 2404              		@ sp needed
 2405 0036 80BD     		pop	{r7, pc}
 2406              	.L137:
 2407              		.align	2
 2408              	.L136:
 2409 0038 014E0040 		.word	1073761793
 2410              		.cfi_endproc
 2411              	.LFE23:
 2412              		.size	Volume_ADC_Read8, .-Volume_ADC_Read8
 2413              		.section	.text.Volume_ADC_Read16,"ax",%progbits
 2414              		.align	2
 2415              		.global	Volume_ADC_Read16
 2416              		.thumb
 2417              		.thumb_func
 2418              		.type	Volume_ADC_Read16, %function
 2419              	Volume_ADC_Read16:
 2420              	.LFB24:
1775:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1776:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1777:.\Generated_Source\PSoC5/Volume_ADC.c **** /*******************************************************************************
1778:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_Read16
1779:.\Generated_Source\PSoC5/Volume_ADC.c **** ********************************************************************************
1780:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1781:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
1782:.\Generated_Source\PSoC5/Volume_ADC.c **** *  This function simplifies getting results from the ADC when only a
1783:.\Generated_Source\PSoC5/Volume_ADC.c **** *  single reading is required. When called, it will start ADC
1784:.\Generated_Source\PSoC5/Volume_ADC.c **** *  conversions, wait for the conversion to be complete, stop ADC
1785:.\Generated_Source\PSoC5/Volume_ADC.c **** *  conversion and return the result. This is a blocking function and will
1786:.\Generated_Source\PSoC5/Volume_ADC.c **** *  not return until the result is ready.
1787:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1788:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
1789:.\Generated_Source\PSoC5/Volume_ADC.c **** *   void
1790:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1791:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
1792:.\Generated_Source\PSoC5/Volume_ADC.c **** *  int16:  ADC result.
1793:.\Generated_Source\PSoC5/Volume_ADC.c **** *
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 75


1794:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
1795:.\Generated_Source\PSoC5/Volume_ADC.c **** int16 Volume_ADC_Read16(void) 
1796:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 2421              		.loc 1 1796 0
 2422              		.cfi_startproc
 2423              		@ args = 0, pretend = 0, frame = 8
 2424              		@ frame_needed = 1, uses_anonymous_args = 0
 2425 0000 80B5     		push	{r7, lr}
 2426              		.cfi_def_cfa_offset 8
 2427              		.cfi_offset 7, -8
 2428              		.cfi_offset 14, -4
 2429 0002 82B0     		sub	sp, sp, #8
 2430              		.cfi_def_cfa_offset 16
 2431 0004 00AF     		add	r7, sp, #0
 2432              		.cfi_def_cfa_register 7
1797:.\Generated_Source\PSoC5/Volume_ADC.c ****     int16 result;
1798:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1799:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Clear pending conversion done status */
1800:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DEC_SR_REG |= Volume_ADC_DEC_INTR_CLEAR;
 2433              		.loc 1 1800 0
 2434 0006 0C4A     		ldr	r2, .L140
 2435 0008 0B4B     		ldr	r3, .L140
 2436 000a 1B78     		ldrb	r3, [r3]
 2437 000c DBB2     		uxtb	r3, r3
 2438 000e 43F00403 		orr	r3, r3, #4
 2439 0012 DBB2     		uxtb	r3, r3
 2440 0014 1370     		strb	r3, [r2]
1801:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_StartConvert();
 2441              		.loc 1 1801 0
 2442 0016 FFF7FEFF 		bl	Volume_ADC_StartConvert
1802:.\Generated_Source\PSoC5/Volume_ADC.c ****     (void)Volume_ADC_IsEndConversion(Volume_ADC_WAIT_FOR_RESULT);
 2443              		.loc 1 1802 0
 2444 001a 0020     		movs	r0, #0
 2445 001c FFF7FEFF 		bl	Volume_ADC_IsEndConversion
1803:.\Generated_Source\PSoC5/Volume_ADC.c ****      result = Volume_ADC_GetResult16();
 2446              		.loc 1 1803 0
 2447 0020 FFF7FEFF 		bl	Volume_ADC_GetResult16
 2448 0024 0346     		mov	r3, r0
 2449 0026 FB80     		strh	r3, [r7, #6]	@ movhi
1804:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_StopConvert();
 2450              		.loc 1 1804 0
 2451 0028 FFF7FEFF 		bl	Volume_ADC_StopConvert
1805:.\Generated_Source\PSoC5/Volume_ADC.c ****     
1806:.\Generated_Source\PSoC5/Volume_ADC.c ****      return(result);
 2452              		.loc 1 1806 0
 2453 002c FB88     		ldrh	r3, [r7, #6]
 2454 002e 1BB2     		sxth	r3, r3
1807:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 2455              		.loc 1 1807 0
 2456 0030 1846     		mov	r0, r3
 2457 0032 0837     		adds	r7, r7, #8
 2458              		.cfi_def_cfa_offset 8
 2459 0034 BD46     		mov	sp, r7
 2460              		.cfi_def_cfa_register 13
 2461              		@ sp needed
 2462 0036 80BD     		pop	{r7, pc}
 2463              	.L141:
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 76


 2464              		.align	2
 2465              	.L140:
 2466 0038 014E0040 		.word	1073761793
 2467              		.cfi_endproc
 2468              	.LFE24:
 2469              		.size	Volume_ADC_Read16, .-Volume_ADC_Read16
 2470              		.section	.text.Volume_ADC_Read32,"ax",%progbits
 2471              		.align	2
 2472              		.global	Volume_ADC_Read32
 2473              		.thumb
 2474              		.thumb_func
 2475              		.type	Volume_ADC_Read32, %function
 2476              	Volume_ADC_Read32:
 2477              	.LFB25:
1808:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1809:.\Generated_Source\PSoC5/Volume_ADC.c **** 
1810:.\Generated_Source\PSoC5/Volume_ADC.c **** /*******************************************************************************
1811:.\Generated_Source\PSoC5/Volume_ADC.c **** * Function Name: Volume_ADC_Read32
1812:.\Generated_Source\PSoC5/Volume_ADC.c **** ********************************************************************************
1813:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1814:.\Generated_Source\PSoC5/Volume_ADC.c **** * Summary:
1815:.\Generated_Source\PSoC5/Volume_ADC.c **** *  This function simplifies getting results from the ADC when only a
1816:.\Generated_Source\PSoC5/Volume_ADC.c **** *  single reading is required. When called, it will start ADC
1817:.\Generated_Source\PSoC5/Volume_ADC.c **** *  conversions, wait for the conversion to be complete, stop ADC
1818:.\Generated_Source\PSoC5/Volume_ADC.c **** *  conversion and return the result. This is a blocking function and will
1819:.\Generated_Source\PSoC5/Volume_ADC.c **** *  not return until the result is ready.
1820:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1821:.\Generated_Source\PSoC5/Volume_ADC.c **** * Parameters:
1822:.\Generated_Source\PSoC5/Volume_ADC.c **** *  None
1823:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1824:.\Generated_Source\PSoC5/Volume_ADC.c **** * Return:
1825:.\Generated_Source\PSoC5/Volume_ADC.c **** *  int32: ADC result.
1826:.\Generated_Source\PSoC5/Volume_ADC.c **** *
1827:.\Generated_Source\PSoC5/Volume_ADC.c **** *******************************************************************************/
1828:.\Generated_Source\PSoC5/Volume_ADC.c **** int32 Volume_ADC_Read32(void) 
1829:.\Generated_Source\PSoC5/Volume_ADC.c **** {
 2478              		.loc 1 1829 0
 2479              		.cfi_startproc
 2480              		@ args = 0, pretend = 0, frame = 8
 2481              		@ frame_needed = 1, uses_anonymous_args = 0
 2482 0000 80B5     		push	{r7, lr}
 2483              		.cfi_def_cfa_offset 8
 2484              		.cfi_offset 7, -8
 2485              		.cfi_offset 14, -4
 2486 0002 82B0     		sub	sp, sp, #8
 2487              		.cfi_def_cfa_offset 16
 2488 0004 00AF     		add	r7, sp, #0
 2489              		.cfi_def_cfa_register 7
1830:.\Generated_Source\PSoC5/Volume_ADC.c ****     int32 result;
1831:.\Generated_Source\PSoC5/Volume_ADC.c ****     
1832:.\Generated_Source\PSoC5/Volume_ADC.c ****     /* Clear pending conversion done status */
1833:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_DEC_SR_REG |= Volume_ADC_DEC_INTR_CLEAR;
 2490              		.loc 1 1833 0
 2491 0006 0B4A     		ldr	r2, .L144
 2492 0008 0A4B     		ldr	r3, .L144
 2493 000a 1B78     		ldrb	r3, [r3]
 2494 000c DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 77


 2495 000e 43F00403 		orr	r3, r3, #4
 2496 0012 DBB2     		uxtb	r3, r3
 2497 0014 1370     		strb	r3, [r2]
1834:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_StartConvert();
 2498              		.loc 1 1834 0
 2499 0016 FFF7FEFF 		bl	Volume_ADC_StartConvert
1835:.\Generated_Source\PSoC5/Volume_ADC.c ****     (void)Volume_ADC_IsEndConversion(Volume_ADC_WAIT_FOR_RESULT);
 2500              		.loc 1 1835 0
 2501 001a 0020     		movs	r0, #0
 2502 001c FFF7FEFF 		bl	Volume_ADC_IsEndConversion
1836:.\Generated_Source\PSoC5/Volume_ADC.c ****      result = Volume_ADC_GetResult32();
 2503              		.loc 1 1836 0
 2504 0020 FFF7FEFF 		bl	Volume_ADC_GetResult32
 2505 0024 7860     		str	r0, [r7, #4]
1837:.\Generated_Source\PSoC5/Volume_ADC.c ****     Volume_ADC_StopConvert();
 2506              		.loc 1 1837 0
 2507 0026 FFF7FEFF 		bl	Volume_ADC_StopConvert
1838:.\Generated_Source\PSoC5/Volume_ADC.c ****     
1839:.\Generated_Source\PSoC5/Volume_ADC.c ****      return(result);
 2508              		.loc 1 1839 0
 2509 002a 7B68     		ldr	r3, [r7, #4]
1840:.\Generated_Source\PSoC5/Volume_ADC.c **** }
 2510              		.loc 1 1840 0
 2511 002c 1846     		mov	r0, r3
 2512 002e 0837     		adds	r7, r7, #8
 2513              		.cfi_def_cfa_offset 8
 2514 0030 BD46     		mov	sp, r7
 2515              		.cfi_def_cfa_register 13
 2516              		@ sp needed
 2517 0032 80BD     		pop	{r7, pc}
 2518              	.L145:
 2519              		.align	2
 2520              	.L144:
 2521 0034 014E0040 		.word	1073761793
 2522              		.cfi_endproc
 2523              	.LFE25:
 2524              		.size	Volume_ADC_Read32, .-Volume_ADC_Read32
 2525              		.text
 2526              	.Letext0:
 2527              		.file 2 ".\\Generated_Source\\PSoC5\\cytypes.h"
 2528              		.file 3 ".\\Generated_Source\\PSoC5\\Volume_ADC.h"
 2529              		.section	.debug_info,"",%progbits
 2530              	.Ldebug_info0:
 2531 0000 21070000 		.4byte	0x721
 2532 0004 0400     		.2byte	0x4
 2533 0006 00000000 		.4byte	.Ldebug_abbrev0
 2534 000a 04       		.byte	0x4
 2535 000b 01       		.uleb128 0x1
 2536 000c 21030000 		.4byte	.LASF89
 2537 0010 01       		.byte	0x1
 2538 0011 BF000000 		.4byte	.LASF90
 2539 0015 30020000 		.4byte	.LASF91
 2540 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2541 001d 00000000 		.4byte	0
 2542 0021 00000000 		.4byte	.Ldebug_line0
 2543 0025 02       		.uleb128 0x2
 2544 0026 01       		.byte	0x1
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 78


 2545 0027 06       		.byte	0x6
 2546 0028 B3000000 		.4byte	.LASF0
 2547 002c 02       		.uleb128 0x2
 2548 002d 01       		.byte	0x1
 2549 002e 08       		.byte	0x8
 2550 002f 1D040000 		.4byte	.LASF1
 2551 0033 02       		.uleb128 0x2
 2552 0034 02       		.byte	0x2
 2553 0035 05       		.byte	0x5
 2554 0036 3D040000 		.4byte	.LASF2
 2555 003a 02       		.uleb128 0x2
 2556 003b 02       		.byte	0x2
 2557 003c 07       		.byte	0x7
 2558 003d FD010000 		.4byte	.LASF3
 2559 0041 02       		.uleb128 0x2
 2560 0042 04       		.byte	0x4
 2561 0043 05       		.byte	0x5
 2562 0044 06010000 		.4byte	.LASF4
 2563 0048 02       		.uleb128 0x2
 2564 0049 04       		.byte	0x4
 2565 004a 07       		.byte	0x7
 2566 004b C8010000 		.4byte	.LASF5
 2567 004f 02       		.uleb128 0x2
 2568 0050 08       		.byte	0x8
 2569 0051 05       		.byte	0x5
 2570 0052 A5000000 		.4byte	.LASF6
 2571 0056 02       		.uleb128 0x2
 2572 0057 08       		.byte	0x8
 2573 0058 07       		.byte	0x7
 2574 0059 7E000000 		.4byte	.LASF7
 2575 005d 03       		.uleb128 0x3
 2576 005e 04       		.byte	0x4
 2577 005f 05       		.byte	0x5
 2578 0060 696E7400 		.ascii	"int\000"
 2579 0064 02       		.uleb128 0x2
 2580 0065 04       		.byte	0x4
 2581 0066 07       		.byte	0x7
 2582 0067 B4010000 		.4byte	.LASF8
 2583 006b 04       		.uleb128 0x4
 2584 006c 3F010000 		.4byte	.LASF9
 2585 0070 02       		.byte	0x2
 2586 0071 9201     		.2byte	0x192
 2587 0073 2C000000 		.4byte	0x2c
 2588 0077 04       		.uleb128 0x4
 2589 0078 00000000 		.4byte	.LASF10
 2590 007c 02       		.byte	0x2
 2591 007d 9301     		.2byte	0x193
 2592 007f 3A000000 		.4byte	0x3a
 2593 0083 04       		.uleb128 0x4
 2594 0084 64010000 		.4byte	.LASF11
 2595 0088 02       		.byte	0x2
 2596 0089 9401     		.2byte	0x194
 2597 008b 48000000 		.4byte	0x48
 2598 008f 04       		.uleb128 0x4
 2599 0090 10020000 		.4byte	.LASF12
 2600 0094 02       		.byte	0x2
 2601 0095 9501     		.2byte	0x195
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 79


 2602 0097 25000000 		.4byte	0x25
 2603 009b 04       		.uleb128 0x4
 2604 009c B8050000 		.4byte	.LASF13
 2605 00a0 02       		.byte	0x2
 2606 00a1 9601     		.2byte	0x196
 2607 00a3 33000000 		.4byte	0x33
 2608 00a7 04       		.uleb128 0x4
 2609 00a8 E5000000 		.4byte	.LASF14
 2610 00ac 02       		.byte	0x2
 2611 00ad 9701     		.2byte	0x197
 2612 00af 41000000 		.4byte	0x41
 2613 00b3 04       		.uleb128 0x4
 2614 00b4 CB020000 		.4byte	.LASF15
 2615 00b8 02       		.byte	0x2
 2616 00b9 9801     		.2byte	0x198
 2617 00bb BF000000 		.4byte	0xbf
 2618 00bf 02       		.uleb128 0x2
 2619 00c0 04       		.byte	0x4
 2620 00c1 04       		.byte	0x4
 2621 00c2 E8030000 		.4byte	.LASF16
 2622 00c6 02       		.uleb128 0x2
 2623 00c7 08       		.byte	0x8
 2624 00c8 04       		.byte	0x4
 2625 00c9 45010000 		.4byte	.LASF17
 2626 00cd 02       		.uleb128 0x2
 2627 00ce 01       		.byte	0x1
 2628 00cf 08       		.byte	0x8
 2629 00d0 D2040000 		.4byte	.LASF18
 2630 00d4 04       		.uleb128 0x4
 2631 00d5 00040000 		.4byte	.LASF19
 2632 00d9 02       		.byte	0x2
 2633 00da 3C02     		.2byte	0x23c
 2634 00dc E0000000 		.4byte	0xe0
 2635 00e0 05       		.uleb128 0x5
 2636 00e1 6B000000 		.4byte	0x6b
 2637 00e5 04       		.uleb128 0x4
 2638 00e6 39010000 		.4byte	.LASF20
 2639 00ea 02       		.byte	0x2
 2640 00eb 3D02     		.2byte	0x23d
 2641 00ed F1000000 		.4byte	0xf1
 2642 00f1 05       		.uleb128 0x5
 2643 00f2 77000000 		.4byte	0x77
 2644 00f6 04       		.uleb128 0x4
 2645 00f7 8F020000 		.4byte	.LASF21
 2646 00fb 02       		.byte	0x2
 2647 00fc 3E02     		.2byte	0x23e
 2648 00fe 02010000 		.4byte	0x102
 2649 0102 05       		.uleb128 0x5
 2650 0103 83000000 		.4byte	0x83
 2651 0107 02       		.uleb128 0x2
 2652 0108 04       		.byte	0x4
 2653 0109 07       		.byte	0x7
 2654 010a D3020000 		.4byte	.LASF22
 2655 010e 06       		.uleb128 0x6
 2656 010f 04       		.byte	0x4
 2657 0110 03       		.byte	0x3
 2658 0111 2F       		.byte	0x2f
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 80


 2659 0112 2F010000 		.4byte	0x12f
 2660 0116 07       		.uleb128 0x7
 2661 0117 65000000 		.4byte	.LASF23
 2662 011b 03       		.byte	0x3
 2663 011c 31       		.byte	0x31
 2664 011d 77000000 		.4byte	0x77
 2665 0121 00       		.byte	0
 2666 0122 07       		.uleb128 0x7
 2667 0123 E5040000 		.4byte	.LASF24
 2668 0127 03       		.byte	0x3
 2669 0128 32       		.byte	0x32
 2670 0129 6B000000 		.4byte	0x6b
 2671 012d 02       		.byte	0x2
 2672 012e 00       		.byte	0
 2673 012f 08       		.uleb128 0x8
 2674 0130 0A030000 		.4byte	.LASF25
 2675 0134 03       		.byte	0x3
 2676 0135 33       		.byte	0x33
 2677 0136 0E010000 		.4byte	0x10e
 2678 013a 09       		.uleb128 0x9
 2679 013b 87040000 		.4byte	.LASF28
 2680 013f 01       		.byte	0x1
 2681 0140 5B       		.byte	0x5b
 2682 0141 00000000 		.4byte	.LFB0
 2683 0145 1C010000 		.4byte	.LFE0-.LFB0
 2684 0149 01       		.uleb128 0x1
 2685 014a 9C       		.byte	0x9c
 2686 014b 0A       		.uleb128 0xa
 2687 014c EB010000 		.4byte	.LASF30
 2688 0150 01       		.byte	0x1
 2689 0151 B8       		.byte	0xb8
 2690 0152 00000000 		.4byte	.LFB1
 2691 0156 58010000 		.4byte	.LFE1-.LFB1
 2692 015a 01       		.uleb128 0x1
 2693 015b 9C       		.byte	0x9c
 2694 015c 7D010000 		.4byte	0x17d
 2695 0160 0B       		.uleb128 0xb
 2696 0161 DE040000 		.4byte	.LASF26
 2697 0165 01       		.byte	0x1
 2698 0166 BA       		.byte	0xba
 2699 0167 6B000000 		.4byte	0x6b
 2700 016b 02       		.uleb128 0x2
 2701 016c 91       		.byte	0x91
 2702 016d 76       		.sleb128 -10
 2703 016e 0B       		.uleb128 0xb
 2704 016f 81050000 		.4byte	.LASF27
 2705 0173 01       		.byte	0x1
 2706 0174 BB       		.byte	0xbb
 2707 0175 6B000000 		.4byte	0x6b
 2708 0179 02       		.uleb128 0x2
 2709 017a 91       		.byte	0x91
 2710 017b 77       		.sleb128 -9
 2711 017c 00       		.byte	0
 2712 017d 0C       		.uleb128 0xc
 2713 017e DA010000 		.4byte	.LASF29
 2714 0182 01       		.byte	0x1
 2715 0183 4901     		.2byte	0x149
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 81


 2716 0185 00000000 		.4byte	.LFB2
 2717 0189 30000000 		.4byte	.LFE2-.LFB2
 2718 018d 01       		.uleb128 0x1
 2719 018e 9C       		.byte	0x9c
 2720 018f 0D       		.uleb128 0xd
 2721 0190 A4010000 		.4byte	.LASF31
 2722 0194 01       		.byte	0x1
 2723 0195 6A01     		.2byte	0x16a
 2724 0197 00000000 		.4byte	.LFB3
 2725 019b 7C010000 		.4byte	.LFE3-.LFB3
 2726 019f 01       		.uleb128 0x1
 2727 01a0 9C       		.byte	0x9c
 2728 01a1 B5010000 		.4byte	0x1b5
 2729 01a5 0E       		.uleb128 0xe
 2730 01a6 81050000 		.4byte	.LASF27
 2731 01aa 01       		.byte	0x1
 2732 01ab 6C01     		.2byte	0x16c
 2733 01ad 6B000000 		.4byte	0x6b
 2734 01b1 02       		.uleb128 0x2
 2735 01b2 91       		.byte	0x91
 2736 01b3 77       		.sleb128 -9
 2737 01b4 00       		.byte	0
 2738 01b5 0F       		.uleb128 0xf
 2739 01b6 07000000 		.4byte	.LASF32
 2740 01ba 01       		.byte	0x1
 2741 01bb AD01     		.2byte	0x1ad
 2742 01bd 00000000 		.4byte	.LFB4
 2743 01c1 3C000000 		.4byte	.LFE4-.LFB4
 2744 01c5 01       		.uleb128 0x1
 2745 01c6 9C       		.byte	0x9c
 2746 01c7 EA010000 		.4byte	0x1ea
 2747 01cb 10       		.uleb128 0x10
 2748 01cc CC030000 		.4byte	.LASF35
 2749 01d0 01       		.byte	0x1
 2750 01d1 AD01     		.2byte	0x1ad
 2751 01d3 6B000000 		.4byte	0x6b
 2752 01d7 02       		.uleb128 0x2
 2753 01d8 91       		.byte	0x91
 2754 01d9 6F       		.sleb128 -17
 2755 01da 0E       		.uleb128 0xe
 2756 01db D3050000 		.4byte	.LASF33
 2757 01df 01       		.byte	0x1
 2758 01e0 AF01     		.2byte	0x1af
 2759 01e2 6B000000 		.4byte	0x6b
 2760 01e6 02       		.uleb128 0x2
 2761 01e7 91       		.byte	0x91
 2762 01e8 77       		.sleb128 -9
 2763 01e9 00       		.byte	0
 2764 01ea 0F       		.uleb128 0xf
 2765 01eb BA040000 		.4byte	.LASF34
 2766 01ef 01       		.byte	0x1
 2767 01f0 D101     		.2byte	0x1d1
 2768 01f2 00000000 		.4byte	.LFB5
 2769 01f6 38000000 		.4byte	.LFE5-.LFB5
 2770 01fa 01       		.uleb128 0x1
 2771 01fb 9C       		.byte	0x9c
 2772 01fc 1F020000 		.4byte	0x21f
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 82


 2773 0200 10       		.uleb128 0x10
 2774 0201 C2030000 		.4byte	.LASF36
 2775 0205 01       		.byte	0x1
 2776 0206 D101     		.2byte	0x1d1
 2777 0208 6B000000 		.4byte	0x6b
 2778 020c 02       		.uleb128 0x2
 2779 020d 91       		.byte	0x91
 2780 020e 6F       		.sleb128 -17
 2781 020f 0E       		.uleb128 0xe
 2782 0210 D3050000 		.4byte	.LASF33
 2783 0214 01       		.byte	0x1
 2784 0215 D301     		.2byte	0x1d3
 2785 0217 6B000000 		.4byte	0x6b
 2786 021b 02       		.uleb128 0x2
 2787 021c 91       		.byte	0x91
 2788 021d 77       		.sleb128 -9
 2789 021e 00       		.byte	0
 2790 021f 11       		.uleb128 0x11
 2791 0220 F5040000 		.4byte	.LASF40
 2792 0224 01       		.byte	0x1
 2793 0225 F901     		.2byte	0x1f9
 2794 0227 6B000000 		.4byte	0x6b
 2795 022b 00000000 		.4byte	.LFB6
 2796 022f B4000000 		.4byte	.LFE6-.LFB6
 2797 0233 01       		.uleb128 0x1
 2798 0234 9C       		.byte	0x9c
 2799 0235 76020000 		.4byte	0x276
 2800 0239 10       		.uleb128 0x10
 2801 023a 99050000 		.4byte	.LASF37
 2802 023e 01       		.byte	0x1
 2803 023f F901     		.2byte	0x1f9
 2804 0241 B3000000 		.4byte	0xb3
 2805 0245 02       		.uleb128 0x2
 2806 0246 91       		.byte	0x91
 2807 0247 6C       		.sleb128 -20
 2808 0248 0E       		.uleb128 0xe
 2809 0249 D3050000 		.4byte	.LASF33
 2810 024d 01       		.byte	0x1
 2811 024e FB01     		.2byte	0x1fb
 2812 0250 77000000 		.4byte	0x77
 2813 0254 02       		.uleb128 0x2
 2814 0255 91       		.byte	0x91
 2815 0256 74       		.sleb128 -12
 2816 0257 0E       		.uleb128 0xe
 2817 0258 92050000 		.4byte	.LASF38
 2818 025c 01       		.byte	0x1
 2819 025d FC01     		.2byte	0x1fc
 2820 025f 6B000000 		.4byte	0x6b
 2821 0263 02       		.uleb128 0x2
 2822 0264 91       		.byte	0x91
 2823 0265 77       		.sleb128 -9
 2824 0266 0E       		.uleb128 0xe
 2825 0267 10050000 		.4byte	.LASF39
 2826 026b 01       		.byte	0x1
 2827 026c FD01     		.2byte	0x1fd
 2828 026e B3000000 		.4byte	0xb3
 2829 0272 02       		.uleb128 0x2
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 83


 2830 0273 91       		.byte	0x91
 2831 0274 70       		.sleb128 -16
 2832 0275 00       		.byte	0
 2833 0276 12       		.uleb128 0x12
 2834 0277 A4050000 		.4byte	.LASF41
 2835 027b 01       		.byte	0x1
 2836 027c 2802     		.2byte	0x228
 2837 027e 77000000 		.4byte	0x77
 2838 0282 00000000 		.4byte	.LFB7
 2839 0286 3C000000 		.4byte	.LFE7-.LFB7
 2840 028a 01       		.uleb128 0x1
 2841 028b 9C       		.byte	0x9c
 2842 028c AF020000 		.4byte	0x2af
 2843 0290 0E       		.uleb128 0xe
 2844 0291 D7040000 		.4byte	.LASF42
 2845 0295 01       		.byte	0x1
 2846 0296 2A02     		.2byte	0x22a
 2847 0298 6B000000 		.4byte	0x6b
 2848 029c 02       		.uleb128 0x2
 2849 029d 91       		.byte	0x91
 2850 029e 75       		.sleb128 -11
 2851 029f 0E       		.uleb128 0xe
 2852 02a0 15020000 		.4byte	.LASF43
 2853 02a4 01       		.byte	0x1
 2854 02a5 2B02     		.2byte	0x22b
 2855 02a7 77000000 		.4byte	0x77
 2856 02ab 02       		.uleb128 0x2
 2857 02ac 91       		.byte	0x91
 2858 02ad 76       		.sleb128 -10
 2859 02ae 00       		.byte	0
 2860 02af 13       		.uleb128 0x13
 2861 02b0 4F040000 		.4byte	.LASF44
 2862 02b4 01       		.byte	0x1
 2863 02b5 4A02     		.2byte	0x24a
 2864 02b7 00000000 		.4byte	.LFB8
 2865 02bb 20000000 		.4byte	.LFE8-.LFB8
 2866 02bf 01       		.uleb128 0x1
 2867 02c0 9C       		.byte	0x9c
 2868 02c1 13       		.uleb128 0x13
 2869 02c2 D1030000 		.4byte	.LASF45
 2870 02c6 01       		.byte	0x1
 2871 02c7 6102     		.2byte	0x261
 2872 02c9 00000000 		.4byte	.LFB9
 2873 02cd 20000000 		.4byte	.LFE9-.LFB9
 2874 02d1 01       		.uleb128 0x1
 2875 02d2 9C       		.byte	0x9c
 2876 02d3 12       		.uleb128 0x12
 2877 02d4 EF020000 		.4byte	.LASF46
 2878 02d8 01       		.byte	0x1
 2879 02d9 8402     		.2byte	0x284
 2880 02db 6B000000 		.4byte	0x6b
 2881 02df 00000000 		.4byte	.LFB10
 2882 02e3 50000000 		.4byte	.LFE10-.LFB10
 2883 02e7 01       		.uleb128 0x1
 2884 02e8 9C       		.byte	0x9c
 2885 02e9 0C030000 		.4byte	0x30c
 2886 02ed 10       		.uleb128 0x10
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 84


 2887 02ee 9C010000 		.4byte	.LASF47
 2888 02f2 01       		.byte	0x1
 2889 02f3 8402     		.2byte	0x284
 2890 02f5 6B000000 		.4byte	0x6b
 2891 02f9 02       		.uleb128 0x2
 2892 02fa 91       		.byte	0x91
 2893 02fb 6F       		.sleb128 -17
 2894 02fc 0E       		.uleb128 0xe
 2895 02fd 92050000 		.4byte	.LASF38
 2896 0301 01       		.byte	0x1
 2897 0302 8602     		.2byte	0x286
 2898 0304 6B000000 		.4byte	0x6b
 2899 0308 02       		.uleb128 0x2
 2900 0309 91       		.byte	0x91
 2901 030a 77       		.sleb128 -9
 2902 030b 00       		.byte	0
 2903 030c 12       		.uleb128 0x12
 2904 030d 20000000 		.4byte	.LASF48
 2905 0311 01       		.byte	0x1
 2906 0312 B302     		.2byte	0x2b3
 2907 0314 8F000000 		.4byte	0x8f
 2908 0318 00000000 		.4byte	.LFB11
 2909 031c 68000000 		.4byte	.LFE11-.LFB11
 2910 0320 01       		.uleb128 0x1
 2911 0321 9C       		.byte	0x9c
 2912 0322 45030000 		.4byte	0x345
 2913 0326 0E       		.uleb128 0xe
 2914 0327 DA050000 		.4byte	.LASF49
 2915 032b 01       		.byte	0x1
 2916 032c B502     		.2byte	0x2b5
 2917 032e 8F000000 		.4byte	0x8f
 2918 0332 02       		.uleb128 0x2
 2919 0333 91       		.byte	0x91
 2920 0334 76       		.sleb128 -10
 2921 0335 0E       		.uleb128 0xe
 2922 0336 C2030000 		.4byte	.LASF36
 2923 033a 01       		.byte	0x1
 2924 033b B602     		.2byte	0x2b6
 2925 033d 6B000000 		.4byte	0x6b
 2926 0341 02       		.uleb128 0x2
 2927 0342 91       		.byte	0x91
 2928 0343 77       		.sleb128 -9
 2929 0344 00       		.byte	0
 2930 0345 12       		.uleb128 0x12
 2931 0346 95020000 		.4byte	.LASF50
 2932 034a 01       		.byte	0x1
 2933 034b E902     		.2byte	0x2e9
 2934 034d 9B000000 		.4byte	0x9b
 2935 0351 00000000 		.4byte	.LFB12
 2936 0355 7C000000 		.4byte	.LFE12-.LFB12
 2937 0359 01       		.uleb128 0x1
 2938 035a 9C       		.byte	0x9c
 2939 035b 7E030000 		.4byte	0x37e
 2940 035f 0E       		.uleb128 0xe
 2941 0360 DA050000 		.4byte	.LASF49
 2942 0364 01       		.byte	0x1
 2943 0365 EB02     		.2byte	0x2eb
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 85


 2944 0367 77000000 		.4byte	0x77
 2945 036b 02       		.uleb128 0x2
 2946 036c 91       		.byte	0x91
 2947 036d 76       		.sleb128 -10
 2948 036e 0E       		.uleb128 0xe
 2949 036f C2030000 		.4byte	.LASF36
 2950 0373 01       		.byte	0x1
 2951 0374 EC02     		.2byte	0x2ec
 2952 0376 6B000000 		.4byte	0x6b
 2953 037a 02       		.uleb128 0x2
 2954 037b 91       		.byte	0x91
 2955 037c 75       		.sleb128 -11
 2956 037d 00       		.byte	0
 2957 037e 12       		.uleb128 0x12
 2958 037f 97040000 		.4byte	.LASF51
 2959 0383 01       		.byte	0x1
 2960 0384 2503     		.2byte	0x325
 2961 0386 A7000000 		.4byte	0xa7
 2962 038a 00000000 		.4byte	.LFB13
 2963 038e A8000000 		.4byte	.LFE13-.LFB13
 2964 0392 01       		.uleb128 0x1
 2965 0393 9C       		.byte	0x9c
 2966 0394 B7030000 		.4byte	0x3b7
 2967 0398 0E       		.uleb128 0xe
 2968 0399 DA050000 		.4byte	.LASF49
 2969 039d 01       		.byte	0x1
 2970 039e 2703     		.2byte	0x327
 2971 03a0 83000000 		.4byte	0x83
 2972 03a4 02       		.uleb128 0x2
 2973 03a5 91       		.byte	0x91
 2974 03a6 74       		.sleb128 -12
 2975 03a7 0E       		.uleb128 0xe
 2976 03a8 C2030000 		.4byte	.LASF36
 2977 03ac 01       		.byte	0x1
 2978 03ad 2803     		.2byte	0x328
 2979 03af 6B000000 		.4byte	0x6b
 2980 03b3 02       		.uleb128 0x2
 2981 03b4 91       		.byte	0x91
 2982 03b5 73       		.sleb128 -13
 2983 03b6 00       		.byte	0
 2984 03b7 0F       		.uleb128 0xf
 2985 03b8 BE050000 		.4byte	.LASF52
 2986 03bc 01       		.byte	0x1
 2987 03bd 8203     		.2byte	0x382
 2988 03bf 00000000 		.4byte	.LFB14
 2989 03c3 1C000000 		.4byte	.LFE14-.LFB14
 2990 03c7 01       		.uleb128 0x1
 2991 03c8 9C       		.byte	0x9c
 2992 03c9 DD030000 		.4byte	0x3dd
 2993 03cd 10       		.uleb128 0x10
 2994 03ce 2C050000 		.4byte	.LASF53
 2995 03d2 01       		.byte	0x1
 2996 03d3 8203     		.2byte	0x382
 2997 03d5 A7000000 		.4byte	0xa7
 2998 03d9 02       		.uleb128 0x2
 2999 03da 91       		.byte	0x91
 3000 03db 74       		.sleb128 -12
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 86


 3001 03dc 00       		.byte	0
 3002 03dd 0F       		.uleb128 0xf
 3003 03de 19050000 		.4byte	.LASF54
 3004 03e2 01       		.byte	0x1
 3005 03e3 A503     		.2byte	0x3a5
 3006 03e5 00000000 		.4byte	.LFB15
 3007 03e9 1C000000 		.4byte	.LFE15-.LFB15
 3008 03ed 01       		.uleb128 0x1
 3009 03ee 9C       		.byte	0x9c
 3010 03ef 03040000 		.4byte	0x403
 3011 03f3 10       		.uleb128 0x10
 3012 03f4 36000000 		.4byte	.LASF55
 3013 03f8 01       		.byte	0x1
 3014 03f9 A503     		.2byte	0x3a5
 3015 03fb A7000000 		.4byte	0xa7
 3016 03ff 02       		.uleb128 0x2
 3017 0400 91       		.byte	0x91
 3018 0401 74       		.sleb128 -12
 3019 0402 00       		.byte	0
 3020 0403 12       		.uleb128 0x12
 3021 0404 81010000 		.4byte	.LASF56
 3022 0408 01       		.byte	0x1
 3023 0409 C003     		.2byte	0x3c0
 3024 040b 9B000000 		.4byte	0x9b
 3025 040f 00000000 		.4byte	.LFB16
 3026 0413 40000000 		.4byte	.LFE16-.LFB16
 3027 0417 01       		.uleb128 0x1
 3028 0418 9C       		.byte	0x9c
 3029 0419 3C040000 		.4byte	0x43c
 3030 041d 10       		.uleb128 0x10
 3031 041e 5E050000 		.4byte	.LASF57
 3032 0422 01       		.byte	0x1
 3033 0423 C003     		.2byte	0x3c0
 3034 0425 A7000000 		.4byte	0xa7
 3035 0429 02       		.uleb128 0x2
 3036 042a 91       		.byte	0x91
 3037 042b 6C       		.sleb128 -20
 3038 042c 0E       		.uleb128 0xe
 3039 042d 82020000 		.4byte	.LASF58
 3040 0431 01       		.byte	0x1
 3041 0432 C303     		.2byte	0x3c3
 3042 0434 9B000000 		.4byte	0x9b
 3043 0438 02       		.uleb128 0x2
 3044 0439 91       		.byte	0x91
 3045 043a 76       		.sleb128 -10
 3046 043b 00       		.byte	0
 3047 043c 11       		.uleb128 0x11
 3048 043d 1F010000 		.4byte	.LASF59
 3049 0441 01       		.byte	0x1
 3050 0442 FD03     		.2byte	0x3fd
 3051 0444 B3000000 		.4byte	0xb3
 3052 0448 00000000 		.4byte	.LFB17
 3053 044c 44000000 		.4byte	.LFE17-.LFB17
 3054 0450 01       		.uleb128 0x1
 3055 0451 9C       		.byte	0x9c
 3056 0452 75040000 		.4byte	0x475
 3057 0456 10       		.uleb128 0x10
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 87


 3058 0457 5E050000 		.4byte	.LASF57
 3059 045b 01       		.byte	0x1
 3060 045c FD03     		.2byte	0x3fd
 3061 045e A7000000 		.4byte	0xa7
 3062 0462 02       		.uleb128 0x2
 3063 0463 91       		.byte	0x91
 3064 0464 64       		.sleb128 -28
 3065 0465 0E       		.uleb128 0xe
 3066 0466 5E010000 		.4byte	.LASF60
 3067 046a 01       		.byte	0x1
 3068 046b 0004     		.2byte	0x400
 3069 046d B3000000 		.4byte	0xb3
 3070 0471 02       		.uleb128 0x2
 3071 0472 91       		.byte	0x91
 3072 0473 6C       		.sleb128 -20
 3073 0474 00       		.byte	0
 3074 0475 12       		.uleb128 0x12
 3075 0476 EB000000 		.4byte	.LASF61
 3076 047a 01       		.byte	0x1
 3077 047b 3F04     		.2byte	0x43f
 3078 047d A7000000 		.4byte	0xa7
 3079 0481 00000000 		.4byte	.LFB18
 3080 0485 B8000000 		.4byte	.LFE18-.LFB18
 3081 0489 01       		.uleb128 0x1
 3082 048a 9C       		.byte	0x9c
 3083 048b DB040000 		.4byte	0x4db
 3084 048f 10       		.uleb128 0x10
 3085 0490 5E050000 		.4byte	.LASF57
 3086 0494 01       		.byte	0x1
 3087 0495 3F04     		.2byte	0x43f
 3088 0497 A7000000 		.4byte	0xa7
 3089 049b 02       		.uleb128 0x2
 3090 049c 91       		.byte	0x91
 3091 049d 64       		.sleb128 -28
 3092 049e 0E       		.uleb128 0xe
 3093 049f C1010000 		.4byte	.LASF62
 3094 04a3 01       		.byte	0x1
 3095 04a4 4204     		.2byte	0x442
 3096 04a6 A7000000 		.4byte	0xa7
 3097 04aa 02       		.uleb128 0x2
 3098 04ab 91       		.byte	0x91
 3099 04ac 68       		.sleb128 -24
 3100 04ad 0E       		.uleb128 0xe
 3101 04ae AE040000 		.4byte	.LASF63
 3102 04b2 01       		.byte	0x1
 3103 04b3 4304     		.2byte	0x443
 3104 04b5 A7000000 		.4byte	0xa7
 3105 04b9 02       		.uleb128 0x2
 3106 04ba 91       		.byte	0x91
 3107 04bb 74       		.sleb128 -12
 3108 04bc 0E       		.uleb128 0xe
 3109 04bd B4040000 		.4byte	.LASF64
 3110 04c1 01       		.byte	0x1
 3111 04c2 4404     		.2byte	0x444
 3112 04c4 A7000000 		.4byte	0xa7
 3113 04c8 02       		.uleb128 0x2
 3114 04c9 91       		.byte	0x91
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 88


 3115 04ca 70       		.sleb128 -16
 3116 04cb 0E       		.uleb128 0xe
 3117 04cc EA040000 		.4byte	.LASF65
 3118 04d0 01       		.byte	0x1
 3119 04d1 4504     		.2byte	0x445
 3120 04d3 6B000000 		.4byte	0x6b
 3121 04d7 02       		.uleb128 0x2
 3122 04d8 91       		.byte	0x91
 3123 04d9 6F       		.sleb128 -17
 3124 04da 00       		.byte	0
 3125 04db 14       		.uleb128 0x14
 3126 04dc 6B010000 		.4byte	.LASF68
 3127 04e0 01       		.byte	0x1
 3128 04e1 DA04     		.2byte	0x4da
 3129 04e3 00000000 		.4byte	.LFB19
 3130 04e7 5C010000 		.4byte	.LFE19-.LFB19
 3131 04eb 01       		.uleb128 0x1
 3132 04ec 9C       		.byte	0x9c
 3133 04ed 01050000 		.4byte	0x501
 3134 04f1 10       		.uleb128 0x10
 3135 04f2 DE040000 		.4byte	.LASF26
 3136 04f6 01       		.byte	0x1
 3137 04f7 DA04     		.2byte	0x4da
 3138 04f9 6B000000 		.4byte	0x6b
 3139 04fd 02       		.uleb128 0x2
 3140 04fe 91       		.byte	0x91
 3141 04ff 77       		.sleb128 -9
 3142 0500 00       		.byte	0
 3143 0501 0D       		.uleb128 0xd
 3144 0502 AC020000 		.4byte	.LASF66
 3145 0506 01       		.byte	0x1
 3146 0507 1006     		.2byte	0x610
 3147 0509 00000000 		.4byte	.LFB20
 3148 050d 90000000 		.4byte	.LFE20-.LFB20
 3149 0511 01       		.uleb128 0x1
 3150 0512 9C       		.byte	0x9c
 3151 0513 36050000 		.4byte	0x536
 3152 0517 10       		.uleb128 0x10
 3153 0518 DE040000 		.4byte	.LASF26
 3154 051c 01       		.byte	0x1
 3155 051d 1006     		.2byte	0x610
 3156 051f 6B000000 		.4byte	0x6b
 3157 0523 02       		.uleb128 0x2
 3158 0524 91       		.byte	0x91
 3159 0525 77       		.sleb128 -9
 3160 0526 10       		.uleb128 0x10
 3161 0527 08050000 		.4byte	.LASF67
 3162 052b 01       		.byte	0x1
 3163 052c 1006     		.2byte	0x610
 3164 052e 6B000000 		.4byte	0x6b
 3165 0532 02       		.uleb128 0x2
 3166 0533 91       		.byte	0x91
 3167 0534 76       		.sleb128 -10
 3168 0535 00       		.byte	0
 3169 0536 14       		.uleb128 0x14
 3170 0537 49000000 		.4byte	.LASF69
 3171 053b 01       		.byte	0x1
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 89


 3172 053c 5106     		.2byte	0x651
 3173 053e 00000000 		.4byte	.LFB21
 3174 0542 6C010000 		.4byte	.LFE21-.LFB21
 3175 0546 01       		.uleb128 0x1
 3176 0547 9C       		.byte	0x9c
 3177 0548 D4050000 		.4byte	0x5d4
 3178 054c 10       		.uleb128 0x10
 3179 054d 3E000000 		.4byte	.LASF70
 3180 0551 01       		.byte	0x1
 3181 0552 5106     		.2byte	0x651
 3182 0554 6B000000 		.4byte	0x6b
 3183 0558 02       		.uleb128 0x2
 3184 0559 91       		.byte	0x91
 3185 055a 5F       		.sleb128 -33
 3186 055b 10       		.uleb128 0x10
 3187 055c 05040000 		.4byte	.LASF71
 3188 0560 01       		.byte	0x1
 3189 0561 5106     		.2byte	0x651
 3190 0563 77000000 		.4byte	0x77
 3191 0567 02       		.uleb128 0x2
 3192 0568 91       		.byte	0x91
 3193 0569 5C       		.sleb128 -36
 3194 056a 10       		.uleb128 0x10
 3195 056b 95000000 		.4byte	.LASF72
 3196 056f 01       		.byte	0x1
 3197 0570 5106     		.2byte	0x651
 3198 0572 77000000 		.4byte	0x77
 3199 0576 02       		.uleb128 0x2
 3200 0577 91       		.byte	0x91
 3201 0578 5A       		.sleb128 -38
 3202 0579 10       		.uleb128 0x10
 3203 057a EA040000 		.4byte	.LASF65
 3204 057e 01       		.byte	0x1
 3205 057f 5206     		.2byte	0x652
 3206 0581 6B000000 		.4byte	0x6b
 3207 0585 02       		.uleb128 0x2
 3208 0586 91       		.byte	0x91
 3209 0587 5E       		.sleb128 -34
 3210 0588 10       		.uleb128 0x10
 3211 0589 DE040000 		.4byte	.LASF26
 3212 058d 01       		.byte	0x1
 3213 058e 5206     		.2byte	0x652
 3214 0590 6B000000 		.4byte	0x6b
 3215 0594 02       		.uleb128 0x2
 3216 0595 91       		.byte	0x91
 3217 0596 00       		.sleb128 0
 3218 0597 0E       		.uleb128 0xe
 3219 0598 89020000 		.4byte	.LASF73
 3220 059c 01       		.byte	0x1
 3221 059d 5406     		.2byte	0x654
 3222 059f 8F000000 		.4byte	0x8f
 3223 05a3 02       		.uleb128 0x2
 3224 05a4 91       		.byte	0x91
 3225 05a5 6F       		.sleb128 -17
 3226 05a6 0E       		.uleb128 0xe
 3227 05a7 12040000 		.4byte	.LASF74
 3228 05ab 01       		.byte	0x1
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 90


 3229 05ac 5506     		.2byte	0x655
 3230 05ae A7000000 		.4byte	0xa7
 3231 05b2 02       		.uleb128 0x2
 3232 05b3 91       		.byte	0x91
 3233 05b4 68       		.sleb128 -24
 3234 05b5 0E       		.uleb128 0xe
 3235 05b6 15020000 		.4byte	.LASF43
 3236 05ba 01       		.byte	0x1
 3237 05bb 5606     		.2byte	0x656
 3238 05bd 77000000 		.4byte	0x77
 3239 05c1 02       		.uleb128 0x2
 3240 05c2 91       		.byte	0x91
 3241 05c3 6C       		.sleb128 -20
 3242 05c4 0E       		.uleb128 0xe
 3243 05c5 47040000 		.4byte	.LASF75
 3244 05c9 01       		.byte	0x1
 3245 05ca 5706     		.2byte	0x657
 3246 05cc 83000000 		.4byte	0x83
 3247 05d0 02       		.uleb128 0x2
 3248 05d1 91       		.byte	0x91
 3249 05d2 64       		.sleb128 -28
 3250 05d3 00       		.byte	0
 3251 05d4 14       		.uleb128 0x14
 3252 05d5 68050000 		.4byte	.LASF76
 3253 05d9 01       		.byte	0x1
 3254 05da BC06     		.2byte	0x6bc
 3255 05dc 00000000 		.4byte	.LFB22
 3256 05e0 78000000 		.4byte	.LFE22-.LFB22
 3257 05e4 01       		.uleb128 0x1
 3258 05e5 9C       		.byte	0x9c
 3259 05e6 09060000 		.4byte	0x609
 3260 05ea 10       		.uleb128 0x10
 3261 05eb 81040000 		.4byte	.LASF77
 3262 05ef 01       		.byte	0x1
 3263 05f0 BC06     		.2byte	0x6bc
 3264 05f2 6B000000 		.4byte	0x6b
 3265 05f6 02       		.uleb128 0x2
 3266 05f7 91       		.byte	0x91
 3267 05f8 6F       		.sleb128 -17
 3268 05f9 0E       		.uleb128 0xe
 3269 05fa 81050000 		.4byte	.LASF27
 3270 05fe 01       		.byte	0x1
 3271 05ff BE06     		.2byte	0x6be
 3272 0601 6B000000 		.4byte	0x6b
 3273 0605 02       		.uleb128 0x2
 3274 0606 91       		.byte	0x91
 3275 0607 77       		.sleb128 -9
 3276 0608 00       		.byte	0
 3277 0609 11       		.uleb128 0x11
 3278 060a 1F020000 		.4byte	.LASF78
 3279 060e 01       		.byte	0x1
 3280 060f E206     		.2byte	0x6e2
 3281 0611 8F000000 		.4byte	0x8f
 3282 0615 00000000 		.4byte	.LFB23
 3283 0619 3C000000 		.4byte	.LFE23-.LFB23
 3284 061d 01       		.uleb128 0x1
 3285 061e 9C       		.byte	0x9c
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 91


 3286 061f 33060000 		.4byte	0x633
 3287 0623 0E       		.uleb128 0xe
 3288 0624 DA050000 		.4byte	.LASF49
 3289 0628 01       		.byte	0x1
 3290 0629 E406     		.2byte	0x6e4
 3291 062b 8F000000 		.4byte	0x8f
 3292 062f 02       		.uleb128 0x2
 3293 0630 91       		.byte	0x91
 3294 0631 77       		.sleb128 -9
 3295 0632 00       		.byte	0
 3296 0633 11       		.uleb128 0x11
 3297 0634 4C050000 		.4byte	.LASF79
 3298 0638 01       		.byte	0x1
 3299 0639 0307     		.2byte	0x703
 3300 063b 9B000000 		.4byte	0x9b
 3301 063f 00000000 		.4byte	.LFB24
 3302 0643 3C000000 		.4byte	.LFE24-.LFB24
 3303 0647 01       		.uleb128 0x1
 3304 0648 9C       		.byte	0x9c
 3305 0649 5D060000 		.4byte	0x65d
 3306 064d 0E       		.uleb128 0xe
 3307 064e DA050000 		.4byte	.LASF49
 3308 0652 01       		.byte	0x1
 3309 0653 0507     		.2byte	0x705
 3310 0655 9B000000 		.4byte	0x9b
 3311 0659 02       		.uleb128 0x2
 3312 065a 91       		.byte	0x91
 3313 065b 76       		.sleb128 -10
 3314 065c 00       		.byte	0
 3315 065d 11       		.uleb128 0x11
 3316 065e 4C010000 		.4byte	.LASF80
 3317 0662 01       		.byte	0x1
 3318 0663 2407     		.2byte	0x724
 3319 0665 A7000000 		.4byte	0xa7
 3320 0669 00000000 		.4byte	.LFB25
 3321 066d 38000000 		.4byte	.LFE25-.LFB25
 3322 0671 01       		.uleb128 0x1
 3323 0672 9C       		.byte	0x9c
 3324 0673 87060000 		.4byte	0x687
 3325 0677 0E       		.uleb128 0xe
 3326 0678 DA050000 		.4byte	.LASF49
 3327 067c 01       		.byte	0x1
 3328 067d 2607     		.2byte	0x726
 3329 067f A7000000 		.4byte	0xa7
 3330 0683 02       		.uleb128 0x2
 3331 0684 91       		.byte	0x91
 3332 0685 74       		.sleb128 -12
 3333 0686 00       		.byte	0
 3334 0687 15       		.uleb128 0x15
 3335 0688 2F010000 		.4byte	0x12f
 3336 068c 97060000 		.4byte	0x697
 3337 0690 16       		.uleb128 0x16
 3338 0691 07010000 		.4byte	0x107
 3339 0695 00       		.byte	0
 3340 0696 00       		.byte	0
 3341 0697 0B       		.uleb128 0xb
 3342 0698 0F010000 		.4byte	.LASF81
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 92


 3343 069c 01       		.byte	0x1
 3344 069d 3D       		.byte	0x3d
 3345 069e 87060000 		.4byte	0x687
 3346 06a2 05       		.uleb128 0x5
 3347 06a3 03       		.byte	0x3
 3348 06a4 04000000 		.4byte	Volume_ADC_gcor
 3349 06a8 17       		.uleb128 0x17
 3350 06a9 DC020000 		.4byte	.LASF82
 3351 06ad 01       		.byte	0x1
 3352 06ae 2C       		.byte	0x2c
 3353 06af 6B000000 		.4byte	0x6b
 3354 06b3 05       		.uleb128 0x5
 3355 06b4 03       		.byte	0x3
 3356 06b5 00000000 		.4byte	Volume_ADC_initVar
 3357 06b9 17       		.uleb128 0x17
 3358 06ba 6A000000 		.4byte	.LASF83
 3359 06be 01       		.byte	0x1
 3360 06bf 24       		.byte	0x24
 3361 06c0 E0000000 		.4byte	0xe0
 3362 06c4 05       		.uleb128 0x5
 3363 06c5 03       		.byte	0x3
 3364 06c6 00000000 		.4byte	Volume_ADC_convDone
 3365 06ca 17       		.uleb128 0x17
 3366 06cb 67040000 		.4byte	.LASF84
 3367 06cf 01       		.byte	0x1
 3368 06d0 29       		.byte	0x29
 3369 06d1 E0000000 		.4byte	0xe0
 3370 06d5 05       		.uleb128 0x5
 3371 06d6 03       		.byte	0x3
 3372 06d7 00000000 		.4byte	Volume_ADC_stopConversion
 3373 06db 17       		.uleb128 0x17
 3374 06dc AF030000 		.4byte	.LASF85
 3375 06e0 01       		.byte	0x1
 3376 06e1 2F       		.byte	0x2f
 3377 06e2 E0000000 		.4byte	0xe0
 3378 06e6 05       		.uleb128 0x5
 3379 06e7 03       		.byte	0x3
 3380 06e8 00000000 		.4byte	Volume_ADC_started
 3381 06ec 17       		.uleb128 0x17
 3382 06ed EE030000 		.4byte	.LASF86
 3383 06f1 01       		.byte	0x1
 3384 06f2 32       		.byte	0x32
 3385 06f3 E0000000 		.4byte	0xe0
 3386 06f7 05       		.uleb128 0x5
 3387 06f8 03       		.byte	0x3
 3388 06f9 00000000 		.4byte	Volume_ADC_Config
 3389 06fd 17       		.uleb128 0x17
 3390 06fe 2B040000 		.4byte	.LASF87
 3391 0702 01       		.byte	0x1
 3392 0703 34       		.byte	0x34
 3393 0704 0E070000 		.4byte	0x70e
 3394 0708 05       		.uleb128 0x5
 3395 0709 03       		.byte	0x3
 3396 070a 00000000 		.4byte	Volume_ADC_Offset
 3397 070e 05       		.uleb128 0x5
 3398 070f A7000000 		.4byte	0xa7
 3399 0713 17       		.uleb128 0x17
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 93


 3400 0714 33050000 		.4byte	.LASF88
 3401 0718 01       		.byte	0x1
 3402 0719 35       		.byte	0x35
 3403 071a 0E070000 		.4byte	0x70e
 3404 071e 05       		.uleb128 0x5
 3405 071f 03       		.byte	0x3
 3406 0720 00000000 		.4byte	Volume_ADC_CountsPerVolt
 3407 0724 00       		.byte	0
 3408              		.section	.debug_abbrev,"",%progbits
 3409              	.Ldebug_abbrev0:
 3410 0000 01       		.uleb128 0x1
 3411 0001 11       		.uleb128 0x11
 3412 0002 01       		.byte	0x1
 3413 0003 25       		.uleb128 0x25
 3414 0004 0E       		.uleb128 0xe
 3415 0005 13       		.uleb128 0x13
 3416 0006 0B       		.uleb128 0xb
 3417 0007 03       		.uleb128 0x3
 3418 0008 0E       		.uleb128 0xe
 3419 0009 1B       		.uleb128 0x1b
 3420 000a 0E       		.uleb128 0xe
 3421 000b 55       		.uleb128 0x55
 3422 000c 17       		.uleb128 0x17
 3423 000d 11       		.uleb128 0x11
 3424 000e 01       		.uleb128 0x1
 3425 000f 10       		.uleb128 0x10
 3426 0010 17       		.uleb128 0x17
 3427 0011 00       		.byte	0
 3428 0012 00       		.byte	0
 3429 0013 02       		.uleb128 0x2
 3430 0014 24       		.uleb128 0x24
 3431 0015 00       		.byte	0
 3432 0016 0B       		.uleb128 0xb
 3433 0017 0B       		.uleb128 0xb
 3434 0018 3E       		.uleb128 0x3e
 3435 0019 0B       		.uleb128 0xb
 3436 001a 03       		.uleb128 0x3
 3437 001b 0E       		.uleb128 0xe
 3438 001c 00       		.byte	0
 3439 001d 00       		.byte	0
 3440 001e 03       		.uleb128 0x3
 3441 001f 24       		.uleb128 0x24
 3442 0020 00       		.byte	0
 3443 0021 0B       		.uleb128 0xb
 3444 0022 0B       		.uleb128 0xb
 3445 0023 3E       		.uleb128 0x3e
 3446 0024 0B       		.uleb128 0xb
 3447 0025 03       		.uleb128 0x3
 3448 0026 08       		.uleb128 0x8
 3449 0027 00       		.byte	0
 3450 0028 00       		.byte	0
 3451 0029 04       		.uleb128 0x4
 3452 002a 16       		.uleb128 0x16
 3453 002b 00       		.byte	0
 3454 002c 03       		.uleb128 0x3
 3455 002d 0E       		.uleb128 0xe
 3456 002e 3A       		.uleb128 0x3a
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 94


 3457 002f 0B       		.uleb128 0xb
 3458 0030 3B       		.uleb128 0x3b
 3459 0031 05       		.uleb128 0x5
 3460 0032 49       		.uleb128 0x49
 3461 0033 13       		.uleb128 0x13
 3462 0034 00       		.byte	0
 3463 0035 00       		.byte	0
 3464 0036 05       		.uleb128 0x5
 3465 0037 35       		.uleb128 0x35
 3466 0038 00       		.byte	0
 3467 0039 49       		.uleb128 0x49
 3468 003a 13       		.uleb128 0x13
 3469 003b 00       		.byte	0
 3470 003c 00       		.byte	0
 3471 003d 06       		.uleb128 0x6
 3472 003e 13       		.uleb128 0x13
 3473 003f 01       		.byte	0x1
 3474 0040 0B       		.uleb128 0xb
 3475 0041 0B       		.uleb128 0xb
 3476 0042 3A       		.uleb128 0x3a
 3477 0043 0B       		.uleb128 0xb
 3478 0044 3B       		.uleb128 0x3b
 3479 0045 0B       		.uleb128 0xb
 3480 0046 01       		.uleb128 0x1
 3481 0047 13       		.uleb128 0x13
 3482 0048 00       		.byte	0
 3483 0049 00       		.byte	0
 3484 004a 07       		.uleb128 0x7
 3485 004b 0D       		.uleb128 0xd
 3486 004c 00       		.byte	0
 3487 004d 03       		.uleb128 0x3
 3488 004e 0E       		.uleb128 0xe
 3489 004f 3A       		.uleb128 0x3a
 3490 0050 0B       		.uleb128 0xb
 3491 0051 3B       		.uleb128 0x3b
 3492 0052 0B       		.uleb128 0xb
 3493 0053 49       		.uleb128 0x49
 3494 0054 13       		.uleb128 0x13
 3495 0055 38       		.uleb128 0x38
 3496 0056 0B       		.uleb128 0xb
 3497 0057 00       		.byte	0
 3498 0058 00       		.byte	0
 3499 0059 08       		.uleb128 0x8
 3500 005a 16       		.uleb128 0x16
 3501 005b 00       		.byte	0
 3502 005c 03       		.uleb128 0x3
 3503 005d 0E       		.uleb128 0xe
 3504 005e 3A       		.uleb128 0x3a
 3505 005f 0B       		.uleb128 0xb
 3506 0060 3B       		.uleb128 0x3b
 3507 0061 0B       		.uleb128 0xb
 3508 0062 49       		.uleb128 0x49
 3509 0063 13       		.uleb128 0x13
 3510 0064 00       		.byte	0
 3511 0065 00       		.byte	0
 3512 0066 09       		.uleb128 0x9
 3513 0067 2E       		.uleb128 0x2e
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 95


 3514 0068 00       		.byte	0
 3515 0069 3F       		.uleb128 0x3f
 3516 006a 19       		.uleb128 0x19
 3517 006b 03       		.uleb128 0x3
 3518 006c 0E       		.uleb128 0xe
 3519 006d 3A       		.uleb128 0x3a
 3520 006e 0B       		.uleb128 0xb
 3521 006f 3B       		.uleb128 0x3b
 3522 0070 0B       		.uleb128 0xb
 3523 0071 27       		.uleb128 0x27
 3524 0072 19       		.uleb128 0x19
 3525 0073 11       		.uleb128 0x11
 3526 0074 01       		.uleb128 0x1
 3527 0075 12       		.uleb128 0x12
 3528 0076 06       		.uleb128 0x6
 3529 0077 40       		.uleb128 0x40
 3530 0078 18       		.uleb128 0x18
 3531 0079 9642     		.uleb128 0x2116
 3532 007b 19       		.uleb128 0x19
 3533 007c 00       		.byte	0
 3534 007d 00       		.byte	0
 3535 007e 0A       		.uleb128 0xa
 3536 007f 2E       		.uleb128 0x2e
 3537 0080 01       		.byte	0x1
 3538 0081 3F       		.uleb128 0x3f
 3539 0082 19       		.uleb128 0x19
 3540 0083 03       		.uleb128 0x3
 3541 0084 0E       		.uleb128 0xe
 3542 0085 3A       		.uleb128 0x3a
 3543 0086 0B       		.uleb128 0xb
 3544 0087 3B       		.uleb128 0x3b
 3545 0088 0B       		.uleb128 0xb
 3546 0089 27       		.uleb128 0x27
 3547 008a 19       		.uleb128 0x19
 3548 008b 11       		.uleb128 0x11
 3549 008c 01       		.uleb128 0x1
 3550 008d 12       		.uleb128 0x12
 3551 008e 06       		.uleb128 0x6
 3552 008f 40       		.uleb128 0x40
 3553 0090 18       		.uleb128 0x18
 3554 0091 9642     		.uleb128 0x2116
 3555 0093 19       		.uleb128 0x19
 3556 0094 01       		.uleb128 0x1
 3557 0095 13       		.uleb128 0x13
 3558 0096 00       		.byte	0
 3559 0097 00       		.byte	0
 3560 0098 0B       		.uleb128 0xb
 3561 0099 34       		.uleb128 0x34
 3562 009a 00       		.byte	0
 3563 009b 03       		.uleb128 0x3
 3564 009c 0E       		.uleb128 0xe
 3565 009d 3A       		.uleb128 0x3a
 3566 009e 0B       		.uleb128 0xb
 3567 009f 3B       		.uleb128 0x3b
 3568 00a0 0B       		.uleb128 0xb
 3569 00a1 49       		.uleb128 0x49
 3570 00a2 13       		.uleb128 0x13
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 96


 3571 00a3 02       		.uleb128 0x2
 3572 00a4 18       		.uleb128 0x18
 3573 00a5 00       		.byte	0
 3574 00a6 00       		.byte	0
 3575 00a7 0C       		.uleb128 0xc
 3576 00a8 2E       		.uleb128 0x2e
 3577 00a9 00       		.byte	0
 3578 00aa 3F       		.uleb128 0x3f
 3579 00ab 19       		.uleb128 0x19
 3580 00ac 03       		.uleb128 0x3
 3581 00ad 0E       		.uleb128 0xe
 3582 00ae 3A       		.uleb128 0x3a
 3583 00af 0B       		.uleb128 0xb
 3584 00b0 3B       		.uleb128 0x3b
 3585 00b1 05       		.uleb128 0x5
 3586 00b2 27       		.uleb128 0x27
 3587 00b3 19       		.uleb128 0x19
 3588 00b4 11       		.uleb128 0x11
 3589 00b5 01       		.uleb128 0x1
 3590 00b6 12       		.uleb128 0x12
 3591 00b7 06       		.uleb128 0x6
 3592 00b8 40       		.uleb128 0x40
 3593 00b9 18       		.uleb128 0x18
 3594 00ba 9642     		.uleb128 0x2116
 3595 00bc 19       		.uleb128 0x19
 3596 00bd 00       		.byte	0
 3597 00be 00       		.byte	0
 3598 00bf 0D       		.uleb128 0xd
 3599 00c0 2E       		.uleb128 0x2e
 3600 00c1 01       		.byte	0x1
 3601 00c2 3F       		.uleb128 0x3f
 3602 00c3 19       		.uleb128 0x19
 3603 00c4 03       		.uleb128 0x3
 3604 00c5 0E       		.uleb128 0xe
 3605 00c6 3A       		.uleb128 0x3a
 3606 00c7 0B       		.uleb128 0xb
 3607 00c8 3B       		.uleb128 0x3b
 3608 00c9 05       		.uleb128 0x5
 3609 00ca 27       		.uleb128 0x27
 3610 00cb 19       		.uleb128 0x19
 3611 00cc 11       		.uleb128 0x11
 3612 00cd 01       		.uleb128 0x1
 3613 00ce 12       		.uleb128 0x12
 3614 00cf 06       		.uleb128 0x6
 3615 00d0 40       		.uleb128 0x40
 3616 00d1 18       		.uleb128 0x18
 3617 00d2 9642     		.uleb128 0x2116
 3618 00d4 19       		.uleb128 0x19
 3619 00d5 01       		.uleb128 0x1
 3620 00d6 13       		.uleb128 0x13
 3621 00d7 00       		.byte	0
 3622 00d8 00       		.byte	0
 3623 00d9 0E       		.uleb128 0xe
 3624 00da 34       		.uleb128 0x34
 3625 00db 00       		.byte	0
 3626 00dc 03       		.uleb128 0x3
 3627 00dd 0E       		.uleb128 0xe
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 97


 3628 00de 3A       		.uleb128 0x3a
 3629 00df 0B       		.uleb128 0xb
 3630 00e0 3B       		.uleb128 0x3b
 3631 00e1 05       		.uleb128 0x5
 3632 00e2 49       		.uleb128 0x49
 3633 00e3 13       		.uleb128 0x13
 3634 00e4 02       		.uleb128 0x2
 3635 00e5 18       		.uleb128 0x18
 3636 00e6 00       		.byte	0
 3637 00e7 00       		.byte	0
 3638 00e8 0F       		.uleb128 0xf
 3639 00e9 2E       		.uleb128 0x2e
 3640 00ea 01       		.byte	0x1
 3641 00eb 3F       		.uleb128 0x3f
 3642 00ec 19       		.uleb128 0x19
 3643 00ed 03       		.uleb128 0x3
 3644 00ee 0E       		.uleb128 0xe
 3645 00ef 3A       		.uleb128 0x3a
 3646 00f0 0B       		.uleb128 0xb
 3647 00f1 3B       		.uleb128 0x3b
 3648 00f2 05       		.uleb128 0x5
 3649 00f3 27       		.uleb128 0x27
 3650 00f4 19       		.uleb128 0x19
 3651 00f5 11       		.uleb128 0x11
 3652 00f6 01       		.uleb128 0x1
 3653 00f7 12       		.uleb128 0x12
 3654 00f8 06       		.uleb128 0x6
 3655 00f9 40       		.uleb128 0x40
 3656 00fa 18       		.uleb128 0x18
 3657 00fb 9742     		.uleb128 0x2117
 3658 00fd 19       		.uleb128 0x19
 3659 00fe 01       		.uleb128 0x1
 3660 00ff 13       		.uleb128 0x13
 3661 0100 00       		.byte	0
 3662 0101 00       		.byte	0
 3663 0102 10       		.uleb128 0x10
 3664 0103 05       		.uleb128 0x5
 3665 0104 00       		.byte	0
 3666 0105 03       		.uleb128 0x3
 3667 0106 0E       		.uleb128 0xe
 3668 0107 3A       		.uleb128 0x3a
 3669 0108 0B       		.uleb128 0xb
 3670 0109 3B       		.uleb128 0x3b
 3671 010a 05       		.uleb128 0x5
 3672 010b 49       		.uleb128 0x49
 3673 010c 13       		.uleb128 0x13
 3674 010d 02       		.uleb128 0x2
 3675 010e 18       		.uleb128 0x18
 3676 010f 00       		.byte	0
 3677 0110 00       		.byte	0
 3678 0111 11       		.uleb128 0x11
 3679 0112 2E       		.uleb128 0x2e
 3680 0113 01       		.byte	0x1
 3681 0114 3F       		.uleb128 0x3f
 3682 0115 19       		.uleb128 0x19
 3683 0116 03       		.uleb128 0x3
 3684 0117 0E       		.uleb128 0xe
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 98


 3685 0118 3A       		.uleb128 0x3a
 3686 0119 0B       		.uleb128 0xb
 3687 011a 3B       		.uleb128 0x3b
 3688 011b 05       		.uleb128 0x5
 3689 011c 27       		.uleb128 0x27
 3690 011d 19       		.uleb128 0x19
 3691 011e 49       		.uleb128 0x49
 3692 011f 13       		.uleb128 0x13
 3693 0120 11       		.uleb128 0x11
 3694 0121 01       		.uleb128 0x1
 3695 0122 12       		.uleb128 0x12
 3696 0123 06       		.uleb128 0x6
 3697 0124 40       		.uleb128 0x40
 3698 0125 18       		.uleb128 0x18
 3699 0126 9642     		.uleb128 0x2116
 3700 0128 19       		.uleb128 0x19
 3701 0129 01       		.uleb128 0x1
 3702 012a 13       		.uleb128 0x13
 3703 012b 00       		.byte	0
 3704 012c 00       		.byte	0
 3705 012d 12       		.uleb128 0x12
 3706 012e 2E       		.uleb128 0x2e
 3707 012f 01       		.byte	0x1
 3708 0130 3F       		.uleb128 0x3f
 3709 0131 19       		.uleb128 0x19
 3710 0132 03       		.uleb128 0x3
 3711 0133 0E       		.uleb128 0xe
 3712 0134 3A       		.uleb128 0x3a
 3713 0135 0B       		.uleb128 0xb
 3714 0136 3B       		.uleb128 0x3b
 3715 0137 05       		.uleb128 0x5
 3716 0138 27       		.uleb128 0x27
 3717 0139 19       		.uleb128 0x19
 3718 013a 49       		.uleb128 0x49
 3719 013b 13       		.uleb128 0x13
 3720 013c 11       		.uleb128 0x11
 3721 013d 01       		.uleb128 0x1
 3722 013e 12       		.uleb128 0x12
 3723 013f 06       		.uleb128 0x6
 3724 0140 40       		.uleb128 0x40
 3725 0141 18       		.uleb128 0x18
 3726 0142 9742     		.uleb128 0x2117
 3727 0144 19       		.uleb128 0x19
 3728 0145 01       		.uleb128 0x1
 3729 0146 13       		.uleb128 0x13
 3730 0147 00       		.byte	0
 3731 0148 00       		.byte	0
 3732 0149 13       		.uleb128 0x13
 3733 014a 2E       		.uleb128 0x2e
 3734 014b 00       		.byte	0
 3735 014c 3F       		.uleb128 0x3f
 3736 014d 19       		.uleb128 0x19
 3737 014e 03       		.uleb128 0x3
 3738 014f 0E       		.uleb128 0xe
 3739 0150 3A       		.uleb128 0x3a
 3740 0151 0B       		.uleb128 0xb
 3741 0152 3B       		.uleb128 0x3b
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 99


 3742 0153 05       		.uleb128 0x5
 3743 0154 27       		.uleb128 0x27
 3744 0155 19       		.uleb128 0x19
 3745 0156 11       		.uleb128 0x11
 3746 0157 01       		.uleb128 0x1
 3747 0158 12       		.uleb128 0x12
 3748 0159 06       		.uleb128 0x6
 3749 015a 40       		.uleb128 0x40
 3750 015b 18       		.uleb128 0x18
 3751 015c 9742     		.uleb128 0x2117
 3752 015e 19       		.uleb128 0x19
 3753 015f 00       		.byte	0
 3754 0160 00       		.byte	0
 3755 0161 14       		.uleb128 0x14
 3756 0162 2E       		.uleb128 0x2e
 3757 0163 01       		.byte	0x1
 3758 0164 03       		.uleb128 0x3
 3759 0165 0E       		.uleb128 0xe
 3760 0166 3A       		.uleb128 0x3a
 3761 0167 0B       		.uleb128 0xb
 3762 0168 3B       		.uleb128 0x3b
 3763 0169 05       		.uleb128 0x5
 3764 016a 27       		.uleb128 0x27
 3765 016b 19       		.uleb128 0x19
 3766 016c 11       		.uleb128 0x11
 3767 016d 01       		.uleb128 0x1
 3768 016e 12       		.uleb128 0x12
 3769 016f 06       		.uleb128 0x6
 3770 0170 40       		.uleb128 0x40
 3771 0171 18       		.uleb128 0x18
 3772 0172 9642     		.uleb128 0x2116
 3773 0174 19       		.uleb128 0x19
 3774 0175 01       		.uleb128 0x1
 3775 0176 13       		.uleb128 0x13
 3776 0177 00       		.byte	0
 3777 0178 00       		.byte	0
 3778 0179 15       		.uleb128 0x15
 3779 017a 01       		.uleb128 0x1
 3780 017b 01       		.byte	0x1
 3781 017c 49       		.uleb128 0x49
 3782 017d 13       		.uleb128 0x13
 3783 017e 01       		.uleb128 0x1
 3784 017f 13       		.uleb128 0x13
 3785 0180 00       		.byte	0
 3786 0181 00       		.byte	0
 3787 0182 16       		.uleb128 0x16
 3788 0183 21       		.uleb128 0x21
 3789 0184 00       		.byte	0
 3790 0185 49       		.uleb128 0x49
 3791 0186 13       		.uleb128 0x13
 3792 0187 2F       		.uleb128 0x2f
 3793 0188 0B       		.uleb128 0xb
 3794 0189 00       		.byte	0
 3795 018a 00       		.byte	0
 3796 018b 17       		.uleb128 0x17
 3797 018c 34       		.uleb128 0x34
 3798 018d 00       		.byte	0
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 100


 3799 018e 03       		.uleb128 0x3
 3800 018f 0E       		.uleb128 0xe
 3801 0190 3A       		.uleb128 0x3a
 3802 0191 0B       		.uleb128 0xb
 3803 0192 3B       		.uleb128 0x3b
 3804 0193 0B       		.uleb128 0xb
 3805 0194 49       		.uleb128 0x49
 3806 0195 13       		.uleb128 0x13
 3807 0196 3F       		.uleb128 0x3f
 3808 0197 19       		.uleb128 0x19
 3809 0198 02       		.uleb128 0x2
 3810 0199 18       		.uleb128 0x18
 3811 019a 00       		.byte	0
 3812 019b 00       		.byte	0
 3813 019c 00       		.byte	0
 3814              		.section	.debug_aranges,"",%progbits
 3815 0000 E4000000 		.4byte	0xe4
 3816 0004 0200     		.2byte	0x2
 3817 0006 00000000 		.4byte	.Ldebug_info0
 3818 000a 04       		.byte	0x4
 3819 000b 00       		.byte	0
 3820 000c 0000     		.2byte	0
 3821 000e 0000     		.2byte	0
 3822 0010 00000000 		.4byte	.LFB0
 3823 0014 1C010000 		.4byte	.LFE0-.LFB0
 3824 0018 00000000 		.4byte	.LFB1
 3825 001c 58010000 		.4byte	.LFE1-.LFB1
 3826 0020 00000000 		.4byte	.LFB2
 3827 0024 30000000 		.4byte	.LFE2-.LFB2
 3828 0028 00000000 		.4byte	.LFB3
 3829 002c 7C010000 		.4byte	.LFE3-.LFB3
 3830 0030 00000000 		.4byte	.LFB4
 3831 0034 3C000000 		.4byte	.LFE4-.LFB4
 3832 0038 00000000 		.4byte	.LFB5
 3833 003c 38000000 		.4byte	.LFE5-.LFB5
 3834 0040 00000000 		.4byte	.LFB6
 3835 0044 B4000000 		.4byte	.LFE6-.LFB6
 3836 0048 00000000 		.4byte	.LFB7
 3837 004c 3C000000 		.4byte	.LFE7-.LFB7
 3838 0050 00000000 		.4byte	.LFB8
 3839 0054 20000000 		.4byte	.LFE8-.LFB8
 3840 0058 00000000 		.4byte	.LFB9
 3841 005c 20000000 		.4byte	.LFE9-.LFB9
 3842 0060 00000000 		.4byte	.LFB10
 3843 0064 50000000 		.4byte	.LFE10-.LFB10
 3844 0068 00000000 		.4byte	.LFB11
 3845 006c 68000000 		.4byte	.LFE11-.LFB11
 3846 0070 00000000 		.4byte	.LFB12
 3847 0074 7C000000 		.4byte	.LFE12-.LFB12
 3848 0078 00000000 		.4byte	.LFB13
 3849 007c A8000000 		.4byte	.LFE13-.LFB13
 3850 0080 00000000 		.4byte	.LFB14
 3851 0084 1C000000 		.4byte	.LFE14-.LFB14
 3852 0088 00000000 		.4byte	.LFB15
 3853 008c 1C000000 		.4byte	.LFE15-.LFB15
 3854 0090 00000000 		.4byte	.LFB16
 3855 0094 40000000 		.4byte	.LFE16-.LFB16
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 101


 3856 0098 00000000 		.4byte	.LFB17
 3857 009c 44000000 		.4byte	.LFE17-.LFB17
 3858 00a0 00000000 		.4byte	.LFB18
 3859 00a4 B8000000 		.4byte	.LFE18-.LFB18
 3860 00a8 00000000 		.4byte	.LFB19
 3861 00ac 5C010000 		.4byte	.LFE19-.LFB19
 3862 00b0 00000000 		.4byte	.LFB20
 3863 00b4 90000000 		.4byte	.LFE20-.LFB20
 3864 00b8 00000000 		.4byte	.LFB21
 3865 00bc 6C010000 		.4byte	.LFE21-.LFB21
 3866 00c0 00000000 		.4byte	.LFB22
 3867 00c4 78000000 		.4byte	.LFE22-.LFB22
 3868 00c8 00000000 		.4byte	.LFB23
 3869 00cc 3C000000 		.4byte	.LFE23-.LFB23
 3870 00d0 00000000 		.4byte	.LFB24
 3871 00d4 3C000000 		.4byte	.LFE24-.LFB24
 3872 00d8 00000000 		.4byte	.LFB25
 3873 00dc 38000000 		.4byte	.LFE25-.LFB25
 3874 00e0 00000000 		.4byte	0
 3875 00e4 00000000 		.4byte	0
 3876              		.section	.debug_ranges,"",%progbits
 3877              	.Ldebug_ranges0:
 3878 0000 00000000 		.4byte	.LFB0
 3879 0004 1C010000 		.4byte	.LFE0
 3880 0008 00000000 		.4byte	.LFB1
 3881 000c 58010000 		.4byte	.LFE1
 3882 0010 00000000 		.4byte	.LFB2
 3883 0014 30000000 		.4byte	.LFE2
 3884 0018 00000000 		.4byte	.LFB3
 3885 001c 7C010000 		.4byte	.LFE3
 3886 0020 00000000 		.4byte	.LFB4
 3887 0024 3C000000 		.4byte	.LFE4
 3888 0028 00000000 		.4byte	.LFB5
 3889 002c 38000000 		.4byte	.LFE5
 3890 0030 00000000 		.4byte	.LFB6
 3891 0034 B4000000 		.4byte	.LFE6
 3892 0038 00000000 		.4byte	.LFB7
 3893 003c 3C000000 		.4byte	.LFE7
 3894 0040 00000000 		.4byte	.LFB8
 3895 0044 20000000 		.4byte	.LFE8
 3896 0048 00000000 		.4byte	.LFB9
 3897 004c 20000000 		.4byte	.LFE9
 3898 0050 00000000 		.4byte	.LFB10
 3899 0054 50000000 		.4byte	.LFE10
 3900 0058 00000000 		.4byte	.LFB11
 3901 005c 68000000 		.4byte	.LFE11
 3902 0060 00000000 		.4byte	.LFB12
 3903 0064 7C000000 		.4byte	.LFE12
 3904 0068 00000000 		.4byte	.LFB13
 3905 006c A8000000 		.4byte	.LFE13
 3906 0070 00000000 		.4byte	.LFB14
 3907 0074 1C000000 		.4byte	.LFE14
 3908 0078 00000000 		.4byte	.LFB15
 3909 007c 1C000000 		.4byte	.LFE15
 3910 0080 00000000 		.4byte	.LFB16
 3911 0084 40000000 		.4byte	.LFE16
 3912 0088 00000000 		.4byte	.LFB17
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 102


 3913 008c 44000000 		.4byte	.LFE17
 3914 0090 00000000 		.4byte	.LFB18
 3915 0094 B8000000 		.4byte	.LFE18
 3916 0098 00000000 		.4byte	.LFB19
 3917 009c 5C010000 		.4byte	.LFE19
 3918 00a0 00000000 		.4byte	.LFB20
 3919 00a4 90000000 		.4byte	.LFE20
 3920 00a8 00000000 		.4byte	.LFB21
 3921 00ac 6C010000 		.4byte	.LFE21
 3922 00b0 00000000 		.4byte	.LFB22
 3923 00b4 78000000 		.4byte	.LFE22
 3924 00b8 00000000 		.4byte	.LFB23
 3925 00bc 3C000000 		.4byte	.LFE23
 3926 00c0 00000000 		.4byte	.LFB24
 3927 00c4 3C000000 		.4byte	.LFE24
 3928 00c8 00000000 		.4byte	.LFB25
 3929 00cc 38000000 		.4byte	.LFE25
 3930 00d0 00000000 		.4byte	0
 3931 00d4 00000000 		.4byte	0
 3932              		.section	.debug_line,"",%progbits
 3933              	.Ldebug_line0:
 3934 0000 5F030000 		.section	.debug_str,"MS",%progbits,1
 3934      02005900 
 3934      00000201 
 3934      FB0E0D00 
 3934      01010101 
 3935              	.LASF10:
 3936 0000 75696E74 		.ascii	"uint16\000"
 3936      313600
 3937              	.LASF32:
 3938 0007 566F6C75 		.ascii	"Volume_ADC_SetBufferGain\000"
 3938      6D655F41 
 3938      44435F53 
 3938      65744275 
 3938      66666572 
 3939              	.LASF48:
 3940 0020 566F6C75 		.ascii	"Volume_ADC_GetResult8\000"
 3940      6D655F41 
 3940      44435F47 
 3940      65745265 
 3940      73756C74 
 3941              	.LASF55:
 3942 0036 61646347 		.ascii	"adcGain\000"
 3942      61696E00 
 3943              	.LASF70:
 3944 003e 696E7075 		.ascii	"inputRange\000"
 3944      7452616E 
 3944      676500
 3945              	.LASF69:
 3946 0049 566F6C75 		.ascii	"Volume_ADC_GainCompensation\000"
 3946      6D655F41 
 3946      44435F47 
 3946      61696E43 
 3946      6F6D7065 
 3947              	.LASF23:
 3948 0065 67636F72 		.ascii	"gcor\000"
 3948      00
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 103


 3949              	.LASF83:
 3950 006a 566F6C75 		.ascii	"Volume_ADC_convDone\000"
 3950      6D655F41 
 3950      44435F63 
 3950      6F6E7644 
 3950      6F6E6500 
 3951              	.LASF7:
 3952 007e 6C6F6E67 		.ascii	"long long unsigned int\000"
 3952      206C6F6E 
 3952      6720756E 
 3952      7369676E 
 3952      65642069 
 3953              	.LASF72:
 3954 0095 69646561 		.ascii	"idealOddDecGain\000"
 3954      6C4F6464 
 3954      44656347 
 3954      61696E00 
 3955              	.LASF6:
 3956 00a5 6C6F6E67 		.ascii	"long long int\000"
 3956      206C6F6E 
 3956      6720696E 
 3956      7400
 3957              	.LASF0:
 3958 00b3 7369676E 		.ascii	"signed char\000"
 3958      65642063 
 3958      68617200 
 3959              	.LASF90:
 3960 00bf 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\Volume_ADC.c\000"
 3960      6E657261 
 3960      7465645F 
 3960      536F7572 
 3960      63655C50 
 3961              	.LASF14:
 3962 00e5 696E7433 		.ascii	"int32\000"
 3962      3200
 3963              	.LASF61:
 3964 00eb 566F6C75 		.ascii	"Volume_ADC_CountsTo_uVolts\000"
 3964      6D655F41 
 3964      44435F43 
 3964      6F756E74 
 3964      73546F5F 
 3965              	.LASF4:
 3966 0106 6C6F6E67 		.ascii	"long int\000"
 3966      20696E74 
 3966      00
 3967              	.LASF81:
 3968 010f 566F6C75 		.ascii	"Volume_ADC_gcor\000"
 3968      6D655F41 
 3968      44435F67 
 3968      636F7200 
 3969              	.LASF59:
 3970 011f 566F6C75 		.ascii	"Volume_ADC_CountsTo_Volts\000"
 3970      6D655F41 
 3970      44435F43 
 3970      6F756E74 
 3970      73546F5F 
 3971              	.LASF20:
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 104


 3972 0139 72656731 		.ascii	"reg16\000"
 3972      3600
 3973              	.LASF9:
 3974 013f 75696E74 		.ascii	"uint8\000"
 3974      3800
 3975              	.LASF17:
 3976 0145 646F7562 		.ascii	"double\000"
 3976      6C6500
 3977              	.LASF80:
 3978 014c 566F6C75 		.ascii	"Volume_ADC_Read32\000"
 3978      6D655F41 
 3978      44435F52 
 3978      65616433 
 3978      3200
 3979              	.LASF60:
 3980 015e 566F6C74 		.ascii	"Volts\000"
 3980      7300
 3981              	.LASF11:
 3982 0164 75696E74 		.ascii	"uint32\000"
 3982      333200
 3983              	.LASF68:
 3984 016b 566F6C75 		.ascii	"Volume_ADC_InitConfig\000"
 3984      6D655F41 
 3984      44435F49 
 3984      6E697443 
 3984      6F6E6669 
 3985              	.LASF56:
 3986 0181 566F6C75 		.ascii	"Volume_ADC_CountsTo_mVolts\000"
 3986      6D655F41 
 3986      44435F43 
 3986      6F756E74 
 3986      73546F5F 
 3987              	.LASF47:
 3988 019c 7265744D 		.ascii	"retMode\000"
 3988      6F646500 
 3989              	.LASF31:
 3990 01a4 566F6C75 		.ascii	"Volume_ADC_Stop\000"
 3990      6D655F41 
 3990      44435F53 
 3990      746F7000 
 3991              	.LASF8:
 3992 01b4 756E7369 		.ascii	"unsigned int\000"
 3992      676E6564 
 3992      20696E74 
 3992      00
 3993              	.LASF62:
 3994 01c1 75566F6C 		.ascii	"uVolts\000"
 3994      747300
 3995              	.LASF5:
 3996 01c8 6C6F6E67 		.ascii	"long unsigned int\000"
 3996      20756E73 
 3996      69676E65 
 3996      6420696E 
 3996      7400
 3997              	.LASF29:
 3998 01da 566F6C75 		.ascii	"Volume_ADC_Start\000"
 3998      6D655F41 
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 105


 3998      44435F53 
 3998      74617274 
 3998      00
 3999              	.LASF30:
 4000 01eb 566F6C75 		.ascii	"Volume_ADC_Enable\000"
 4000      6D655F41 
 4000      44435F45 
 4000      6E61626C 
 4000      6500
 4001              	.LASF3:
 4002 01fd 73686F72 		.ascii	"short unsigned int\000"
 4002      7420756E 
 4002      7369676E 
 4002      65642069 
 4002      6E7400
 4003              	.LASF12:
 4004 0210 696E7438 		.ascii	"int8\000"
 4004      00
 4005              	.LASF43:
 4006 0215 67636F72 		.ascii	"gcorValue\000"
 4006      56616C75 
 4006      6500
 4007              	.LASF78:
 4008 021f 566F6C75 		.ascii	"Volume_ADC_Read8\000"
 4008      6D655F41 
 4008      44435F52 
 4008      65616438 
 4008      00
 4009              	.LASF91:
 4010 0230 433A5C55 		.ascii	"C:\\Users\\Lukas Creutzburg\\Documents\\PSoC Creato"
 4010      73657273 
 4010      5C4C756B 
 4010      61732043 
 4010      72657574 
 4011 025f 725C576F 		.ascii	"r\\Workspace01\\Volume_Control.cydsn\000"
 4011      726B7370 
 4011      61636530 
 4011      315C566F 
 4011      6C756D65 
 4012              	.LASF58:
 4013 0282 6D566F6C 		.ascii	"mVolts\000"
 4013      747300
 4014              	.LASF73:
 4015 0289 666C6173 		.ascii	"flash\000"
 4015      6800
 4016              	.LASF21:
 4017 028f 72656733 		.ascii	"reg32\000"
 4017      3200
 4018              	.LASF50:
 4019 0295 566F6C75 		.ascii	"Volume_ADC_GetResult16\000"
 4019      6D655F41 
 4019      44435F47 
 4019      65745265 
 4019      73756C74 
 4020              	.LASF66:
 4021 02ac 566F6C75 		.ascii	"Volume_ADC_SelectConfiguration\000"
 4021      6D655F41 
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 106


 4021      44435F53 
 4021      656C6563 
 4021      74436F6E 
 4022              	.LASF15:
 4023 02cb 666C6F61 		.ascii	"float32\000"
 4023      74333200 
 4024              	.LASF22:
 4025 02d3 73697A65 		.ascii	"sizetype\000"
 4025      74797065 
 4025      00
 4026              	.LASF82:
 4027 02dc 566F6C75 		.ascii	"Volume_ADC_initVar\000"
 4027      6D655F41 
 4027      44435F69 
 4027      6E697456 
 4027      617200
 4028              	.LASF46:
 4029 02ef 566F6C75 		.ascii	"Volume_ADC_IsEndConversion\000"
 4029      6D655F41 
 4029      44435F49 
 4029      73456E64 
 4029      436F6E76 
 4030              	.LASF25:
 4031 030a 566F6C75 		.ascii	"Volume_ADC_GCOR_STRUCT\000"
 4031      6D655F41 
 4031      44435F47 
 4031      434F525F 
 4031      53545255 
 4032              	.LASF89:
 4033 0321 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 4033      4320342E 
 4033      392E3320 
 4033      32303135 
 4033      30333033 
 4034 0354 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 4034      20726576 
 4034      6973696F 
 4034      6E203232 
 4034      31323230 
 4035 0387 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4035      66756E63 
 4035      74696F6E 
 4035      2D736563 
 4035      74696F6E 
 4036              	.LASF85:
 4037 03af 566F6C75 		.ascii	"Volume_ADC_started\000"
 4037      6D655F41 
 4037      44435F73 
 4037      74617274 
 4037      656400
 4038              	.LASF36:
 4039 03c2 636F6865 		.ascii	"coherency\000"
 4039      72656E63 
 4039      7900
 4040              	.LASF35:
 4041 03cc 6761696E 		.ascii	"gain\000"
 4041      00
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 107


 4042              	.LASF45:
 4043 03d1 566F6C75 		.ascii	"Volume_ADC_StopConvert\000"
 4043      6D655F41 
 4043      44435F53 
 4043      746F7043 
 4043      6F6E7665 
 4044              	.LASF16:
 4045 03e8 666C6F61 		.ascii	"float\000"
 4045      7400
 4046              	.LASF86:
 4047 03ee 566F6C75 		.ascii	"Volume_ADC_Config\000"
 4047      6D655F41 
 4047      44435F43 
 4047      6F6E6669 
 4047      6700
 4048              	.LASF19:
 4049 0400 72656738 		.ascii	"reg8\000"
 4049      00
 4050              	.LASF71:
 4051 0405 69646561 		.ascii	"idealDecGain\000"
 4051      6C446563 
 4051      4761696E 
 4051      00
 4052              	.LASF74:
 4053 0412 6E6F726D 		.ascii	"normalised\000"
 4053      616C6973 
 4053      656400
 4054              	.LASF1:
 4055 041d 756E7369 		.ascii	"unsigned char\000"
 4055      676E6564 
 4055      20636861 
 4055      7200
 4056              	.LASF87:
 4057 042b 566F6C75 		.ascii	"Volume_ADC_Offset\000"
 4057      6D655F41 
 4057      44435F4F 
 4057      66667365 
 4057      7400
 4058              	.LASF2:
 4059 043d 73686F72 		.ascii	"short int\000"
 4059      7420696E 
 4059      7400
 4060              	.LASF75:
 4061 0447 67636F72 		.ascii	"gcorTmp\000"
 4061      546D7000 
 4062              	.LASF44:
 4063 044f 566F6C75 		.ascii	"Volume_ADC_StartConvert\000"
 4063      6D655F41 
 4063      44435F53 
 4063      74617274 
 4063      436F6E76 
 4064              	.LASF84:
 4065 0467 566F6C75 		.ascii	"Volume_ADC_stopConversion\000"
 4065      6D655F41 
 4065      44435F73 
 4065      746F7043 
 4065      6F6E7665 
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 108


 4066              	.LASF77:
 4067 0481 76616C75 		.ascii	"value\000"
 4067      6500
 4068              	.LASF28:
 4069 0487 566F6C75 		.ascii	"Volume_ADC_Init\000"
 4069      6D655F41 
 4069      44435F49 
 4069      6E697400 
 4070              	.LASF51:
 4071 0497 566F6C75 		.ascii	"Volume_ADC_GetResult32\000"
 4071      6D655F41 
 4071      44435F47 
 4071      65745265 
 4071      73756C74 
 4072              	.LASF63:
 4073 04ae 636F6566 		.ascii	"coefA\000"
 4073      4100
 4074              	.LASF64:
 4075 04b4 636F6566 		.ascii	"coefB\000"
 4075      4200
 4076              	.LASF34:
 4077 04ba 566F6C75 		.ascii	"Volume_ADC_SetCoherency\000"
 4077      6D655F41 
 4077      44435F53 
 4077      6574436F 
 4077      68657265 
 4078              	.LASF18:
 4079 04d2 63686172 		.ascii	"char\000"
 4079      00
 4080              	.LASF42:
 4081 04d7 6756616C 		.ascii	"gValue\000"
 4081      756500
 4082              	.LASF26:
 4083 04de 636F6E66 		.ascii	"config\000"
 4083      696700
 4084              	.LASF24:
 4085 04e5 6776616C 		.ascii	"gval\000"
 4085      00
 4086              	.LASF65:
 4087 04ea 7265736F 		.ascii	"resolution\000"
 4087      6C757469 
 4087      6F6E00
 4088              	.LASF40:
 4089 04f5 566F6C75 		.ascii	"Volume_ADC_SetGCOR\000"
 4089      6D655F41 
 4089      44435F53 
 4089      65744743 
 4089      4F5200
 4090              	.LASF67:
 4091 0508 72657374 		.ascii	"restart\000"
 4091      61727400 
 4092              	.LASF39:
 4093 0510 746D7056 		.ascii	"tmpValue\000"
 4093      616C7565 
 4093      00
 4094              	.LASF54:
 4095 0519 566F6C75 		.ascii	"Volume_ADC_SetGain\000"
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 109


 4095      6D655F41 
 4095      44435F53 
 4095      65744761 
 4095      696E00
 4096              	.LASF53:
 4097 052c 6F666673 		.ascii	"offset\000"
 4097      657400
 4098              	.LASF88:
 4099 0533 566F6C75 		.ascii	"Volume_ADC_CountsPerVolt\000"
 4099      6D655F41 
 4099      44435F43 
 4099      6F756E74 
 4099      73506572 
 4100              	.LASF79:
 4101 054c 566F6C75 		.ascii	"Volume_ADC_Read16\000"
 4101      6D655F41 
 4101      44435F52 
 4101      65616431 
 4101      3600
 4102              	.LASF57:
 4103 055e 61646343 		.ascii	"adcCounts\000"
 4103      6F756E74 
 4103      7300
 4104              	.LASF76:
 4105 0568 566F6C75 		.ascii	"Volume_ADC_SetDSMRef0Reg\000"
 4105      6D655F41 
 4105      44435F53 
 4105      65744453 
 4105      4D526566 
 4106              	.LASF27:
 4107 0581 656E6162 		.ascii	"enableInterrupts\000"
 4107      6C65496E 
 4107      74657272 
 4107      75707473 
 4107      00
 4108              	.LASF38:
 4109 0592 73746174 		.ascii	"status\000"
 4109      757300
 4110              	.LASF37:
 4111 0599 6761696E 		.ascii	"gainAdjust\000"
 4111      41646A75 
 4111      737400
 4112              	.LASF41:
 4113 05a4 566F6C75 		.ascii	"Volume_ADC_ReadGCOR\000"
 4113      6D655F41 
 4113      44435F52 
 4113      65616447 
 4113      434F5200 
 4114              	.LASF13:
 4115 05b8 696E7431 		.ascii	"int16\000"
 4115      3600
 4116              	.LASF52:
 4117 05be 566F6C75 		.ascii	"Volume_ADC_SetOffset\000"
 4117      6D655F41 
 4117      44435F53 
 4117      65744F66 
 4117      66736574 
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\cc3QhbPx.s 			page 110


 4118              	.LASF33:
 4119 05d3 746D7052 		.ascii	"tmpReg\000"
 4119      656700
 4120              	.LASF49:
 4121 05da 72657375 		.ascii	"result\000"
 4121      6C7400
 4122              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
